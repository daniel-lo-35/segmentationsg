
============================ Messages from Goddess ============================
 * Job starting from: Sun Apr 17 11:25:48 CST 2022
 * Job ID           : 22550
 * Job name         : VGMotif
 * Job partition    : v100-32g
 * Nodes            : 1
 * Cores            : 4
 * Working directory: ~/segmentationsg/scripts
===============================================================================

Namespace(config_file='../configs/sg_dev_masktransfer.yaml', dist_url='tcp://127.0.0.1:17550', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['DATALOADER.NUM_WORKERS', '2', 'MODEL.WEIGHTS', '../output-step1-vg/resnet_pretrain_weights.pth', 'OUTPUT_DIR', '../output-step3-motif-short-vg', 'DATASETS.VISUAL_GENOME.IMAGES', '../datasets-real/vg/images', 'DATASETS.VISUAL_GENOME.MAPPING_DICTIONARY', '../datasets-real/vg/VG-SGG-dicts-with-attri.json', 'DATASETS.VISUAL_GENOME.IMAGE_DATA', '../datasets-real/vg/image_data.json', 'DATASETS.VISUAL_GENOME.VG_ATTRIBUTE_H5', '../datasets-real/vg/VG-SGG-with-attri.h5', 'DATASETS.MSCOCO.ANNOTATIONS', '../datasets-real/coco/annotations/', 'DATASETS.MSCOCO.DATAROOT', '../datasets-real/coco/', 'MODEL.MASK_ON', 'True', 'MODEL.ROI_SCENEGRAPH_HEAD.USE_GT_BOX', 'False', 'MODEL.ROI_SCENEGRAPH_HEAD.USE_GT_OBJECT_LABEL', 'False', 'MODEL.ROI_SCENEGRAPH_HEAD.USE_MASK_ATTENTION', 'True', 'MODEL.ROI_SCENEGRAPH_HEAD.MASK_ATTENTION_TYPE', 'Weighted', 'MODEL.ROI_SCENEGRAPH_HEAD.SIGMOID_ATTENTION', 'True', 'TEST.EVAL_PERIOD', '50000', 'MODEL.ROI_RELATION_FEATURE_EXTRACTORS.MULTIPLY_LOGITS_WITH_MASKS', 'False', 'MODEL.ROI_BOX_FEATURE_EXTRACTORS.BOX_FEATURE_MASK', 'True', 'MODEL.ROI_BOX_FEATURE_EXTRACTORS.CLASS_LOGITS_WITH_MASK', 'False', 'SOLVER.IMS_PER_BATCH', '16', 'DATASETS.SEG_DATA_DIVISOR', '2', 'MODEL.ROI_SCENEGRAPH_HEAD.PREDICTOR', 'MotifSegmentationPredictorC', 'MODEL.ROI_HEADS.REFINE_SEG_MASKS', 'False', 'TEST.DETECTIONS_PER_IMAGE', '40', 'SOLVER.MAX_ITER', '2000', 'DATASETS.VISUAL_GENOME.NUMBER_OF_VALIDATION_IMAGES', '5000', 'MODEL.ROI_HEADS.MASK_NUM_CLASSES', '80', 'MODEL.ROI_HEADS.NUM_OUTPUT_CLASSES', '80', 'MODEL.ROI_SCENEGRAPH_HEAD.NUM_CLASSES', '50', 'SOLVER.REFERENCE_WORLD_SIZE', '4'], resume=True)
loading cached file:  tmp/visual_genome_train_data_.pkl
loading cached file:  tmp/visual_genome_val_data_.pkl
loading cached file:  tmp/visual_genome_test_data_.pkl
[32m[04/17 11:26:29 detectron2]: [0mRank of current process: 0. World size: 1
[32m[04/17 11:26:32 detectron2]: [0mEnvironment info:
----------------------  ----------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Sep 23 2021, 22:44:21) [GCC 8.4.1 20200928 (Red Hat 8.4.1-1.0.1)]
numpy                   1.19.0
detectron2              0.6 @/home/r09521612/.local/lib/python3.8/site-packages/detectron2
Compiler                GCC 7.3
CUDA compiler           CUDA 10.2
detectron2 arch flags   3.7, 5.0, 5.2, 6.0, 6.1, 7.0, 7.5
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.10.0+cu102 @/home/r09521612/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   Tesla V100-SXM2-32GB (arch=7.0)
Driver version          460.73.01
CUDA_HOME               /opt/cuda-11.2
Pillow                  8.3.2
torchvision             0.11.1+cu102 @/home/r09521612/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20211023
iopath                  0.1.9
cv2                     4.5.3
----------------------  ----------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[32m[04/17 11:26:32 detectron2]: [0mCommand line arguments: Namespace(config_file='../configs/sg_dev_masktransfer.yaml', dist_url='tcp://127.0.0.1:17550', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['DATALOADER.NUM_WORKERS', '2', 'MODEL.WEIGHTS', '../output-step1-vg/resnet_pretrain_weights.pth', 'OUTPUT_DIR', '../output-step3-motif-short-vg', 'DATASETS.VISUAL_GENOME.IMAGES', '../datasets-real/vg/images', 'DATASETS.VISUAL_GENOME.MAPPING_DICTIONARY', '../datasets-real/vg/VG-SGG-dicts-with-attri.json', 'DATASETS.VISUAL_GENOME.IMAGE_DATA', '../datasets-real/vg/image_data.json', 'DATASETS.VISUAL_GENOME.VG_ATTRIBUTE_H5', '../datasets-real/vg/VG-SGG-with-attri.h5', 'DATASETS.MSCOCO.ANNOTATIONS', '../datasets-real/coco/annotations/', 'DATASETS.MSCOCO.DATAROOT', '../datasets-real/coco/', 'MODEL.MASK_ON', 'True', 'MODEL.ROI_SCENEGRAPH_HEAD.USE_GT_BOX', 'False', 'MODEL.ROI_SCENEGRAPH_HEAD.USE_GT_OBJECT_LABEL', 'False', 'MODEL.ROI_SCENEGRAPH_HEAD.USE_MASK_ATTENTION', 'True', 'MODEL.ROI_SCENEGRAPH_HEAD.MASK_ATTENTION_TYPE', 'Weighted', 'MODEL.ROI_SCENEGRAPH_HEAD.SIGMOID_ATTENTION', 'True', 'TEST.EVAL_PERIOD', '50000', 'MODEL.ROI_RELATION_FEATURE_EXTRACTORS.MULTIPLY_LOGITS_WITH_MASKS', 'False', 'MODEL.ROI_BOX_FEATURE_EXTRACTORS.BOX_FEATURE_MASK', 'True', 'MODEL.ROI_BOX_FEATURE_EXTRACTORS.CLASS_LOGITS_WITH_MASK', 'False', 'SOLVER.IMS_PER_BATCH', '16', 'DATASETS.SEG_DATA_DIVISOR', '2', 'MODEL.ROI_SCENEGRAPH_HEAD.PREDICTOR', 'MotifSegmentationPredictorC', 'MODEL.ROI_HEADS.REFINE_SEG_MASKS', 'False', 'TEST.DETECTIONS_PER_IMAGE', '40', 'SOLVER.MAX_ITER', '2000', 'DATASETS.VISUAL_GENOME.NUMBER_OF_VALIDATION_IMAGES', '5000', 'MODEL.ROI_HEADS.MASK_NUM_CLASSES', '80', 'MODEL.ROI_HEADS.NUM_OUTPUT_CLASSES', '80', 'MODEL.ROI_SCENEGRAPH_HEAD.NUM_CLASSES', '50', 'SOLVER.REFERENCE_WORLD_SIZE', '4'], resume=True)
[32m[04/17 11:26:32 detectron2]: [0mContents of args.config_file=../configs/sg_dev_masktransfer.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mBase-RCNN-FPN.yaml[39m[38;5;186m"[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mSceneGraphSegmentationRCNN[39m[38;5;186m'[39m
[38;5;15m  [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m  [39m[38;5;197mUSE_MASK_ON_NODE[39m[38;5;15m:[39m[38;5;15m [39mFalse
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15m57.375[39m,[38;5;15m [39m[38;5;15m57.120[39m,[38;5;15m [39m[38;5;15m58.395[39m]
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39mFalse[38;5;15m  [39m[38;5;242m# this is a C2 model[39m
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m32
[38;5;15m    [39m[38;5;197mWIDTH_PER_GROUP[39m[38;5;15m:[39m[38;5;15m [39m8
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m101
[38;5;15m  [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mSGSegmentationROIHeadsMaskTransfer[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m150
[38;5;15m    [39m[38;5;197mEMBEDDINGS_PATH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m/home/r09521612/segmentationsg/segmentationsg/data/embeddings/glove_mean_vg[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mEMBEDDINGS_PATH_COCO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m/home/r09521612/segmentationsg/segmentationsg/data/embeddings/glove_mean_coco[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mROI_SCENEGRAPH_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mSceneGraphSegmentationHead[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mPREDICTOR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mMotifSegmentationPredictor[39m[38;5;186m'[39m
[38;5;15m  [39m[38;5;197mROI_MASK_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mSceneGraphMaskHeadTransfer[39m[38;5;186m'[39m
[38;5;15m  [39m[38;5;197mFREEZE_LAYERS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMETA_ARCH[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15mproposal_generator[39m,[38;5;15m [39m[38;5;15mbackbone[39m]
[38;5;15m    [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15mbox_pooler[39m,[38;5;15m [39m[38;5;15mbox_head[39m,[38;5;15m [39m[38;5;15mbox_predictor[39m,[38;5;15m [39m[38;5;15mmask_pooler[39m,[38;5;15m [39m[38;5;15mmask_head[39m,[38;5;15m [39m[38;5;15mkeypoint_pooler[39m,[38;5;15m [39m[38;5;15mkeypoint_head[39m]
[38;5;15m  [39m[38;5;197mROI_BOX_FEATURE_EXTRACTORS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mBoxFeatureSegmentationExtractor[39m[38;5;186m'[39m
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mVISUAL[39m[38;5;15m [39m[38;5;186mGENOME[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m[38;5;15m [39m('VG_train',)
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m[38;5;15m [39m('coco_val_2017','VG_test',)
[38;5;15m  [39m[38;5;197mVISUAL_GENOME[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mTRAIN_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mVAL_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mTEST_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mTRAIN_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mFILTER_EMPTY_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197mFILTER_NON_OVERLAP[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197mFILTER_DUPLICATE_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m16
[38;5;15m  [39m[38;5;197mBIAS_LR_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m0.01
[38;5;15m  [39m[38;5;197mWARMUP_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m0.0001
[38;5;15m  [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m0.9
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m[38;5;15m [39m(25000, 35000)
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m40000
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m500
[38;5;15m  [39m[38;5;197mCLIP_GRADIENTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLIP_VALUE[39m[38;5;15m:[39m[38;5;15m [39m5.0
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m5000
[38;5;197mGLOVE_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m../glove/[39m[38;5;186m'[39m

[32m[04/17 11:26:32 detectron2]: [0mRunning with full config:
[38;5;197mCUDNN_BENCHMARK[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mASPECT_RATIO_GROUPING[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mFILTER_EMPTY_ANNOTATIONS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;15m  [39m[38;5;197mREPEAT_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mSAMPLER_TRAIN[39m[38;5;15m:[39m[38;5;15m [39mTrainingSampler
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mMASK_TEST[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mcoco_val_2017
[38;5;15m  [39m[38;5;197mMASK_TRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mcoco_train_2017
[38;5;15m  [39m[38;5;197mMSCOCO[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANNOTATIONS[39m[38;5;15m:[39m[38;5;15m [39m../datasets-real/coco/annotations/
[38;5;15m    [39m[38;5;197mDATAROOT[39m[38;5;15m:[39m[38;5;15m [39m../datasets-real/coco/
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m2000
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mSEG_DATA_DIVISOR[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mcoco_val_2017
[38;5;15m  [39m-[38;5;15m [39mVG_test
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mVG_train
[38;5;15m  [39m[38;5;197mTRANSFER[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mcoco_train_2014
[38;5;15m  [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39mVISUAL GENOME
[38;5;15m  [39m[38;5;197mVISUAL_GENOME[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOX_SCALE[39m[38;5;15m:[39m[38;5;15m [39m1024
[38;5;15m    [39m[38;5;197mCLIPPED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mFILTER_DUPLICATE_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mFILTER_EMPTY_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mFILTER_NON_OVERLAP[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mIMAGES[39m[38;5;15m:[39m[38;5;15m [39m../datasets-real/vg/images
[38;5;15m    [39m[38;5;197mIMAGE_DATA[39m[38;5;15m:[39m[38;5;15m [39m../datasets-real/vg/image_data.json
[38;5;15m    [39m[38;5;197mMAPPING_DICTIONARY[39m[38;5;15m:[39m[38;5;15m [39m../datasets-real/vg/VG-SGG-dicts-with-attri.json
[38;5;15m    [39m[38;5;197mNUMBER_OF_VALIDATION_IMAGES[39m[38;5;15m:[39m[38;5;15m [39m5000
[38;5;15m    [39m[38;5;197mTEST_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mTRAIN_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mVAL_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mVG_ATTRIBUTE_H5[39m[38;5;15m:[39m[38;5;15m [39m../datasets-real/vg/VG-SGG-with-attri.h5
[38;5;197mDEV_RUN[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;197mGLOBAL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mHACK[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;197mGLOVE_DIR[39m[38;5;15m:[39m[38;5;15m [39m../glove/
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.9
[38;5;15m    [39m-[38;5;15m [39m0.9
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39mrelative_range
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39mBGR
[38;5;15m  [39m[38;5;197mMASK_FORMAT[39m[38;5;15m:[39m[38;5;15m [39mpolygon
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m1333
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m1333
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m800
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m640
[38;5;15m  [39m-[38;5;15m [39m672
[38;5;15m  [39m-[38;5;15m [39m704
[38;5;15m  [39m-[38;5;15m [39m736
[38;5;15m  [39m-[38;5;15m [39m768
[38;5;15m  [39m-[38;5;15m [39m800
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39mchoice
[38;5;15m  [39m[38;5;197mRANDOM_FLIP[39m[38;5;15m:[39m[38;5;15m [39mhorizontal
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mANCHOR_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANGLES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m-90
[38;5;15m      [39m-[38;5;15m [39m0
[38;5;15m      [39m-[38;5;15m [39m90
[38;5;15m    [39m[38;5;197mASPECT_RATIOS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m0.5
[38;5;15m      [39m-[38;5;15m [39m1.0
[38;5;15m      [39m-[38;5;15m [39m2.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mDefaultAnchorGenerator
[38;5;15m    [39m[38;5;197mOFFSET[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m    [39m[38;5;197mSIZES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m32
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m64
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m128
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m256
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m512
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFREEZE_AT[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mbuild_resnet_fpn_backbone
[38;5;15m  [39m[38;5;197mDEVICE[39m[38;5;15m:[39m[38;5;15m [39mcuda
[38;5;15m  [39m[38;5;197mFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFUSE_TYPE[39m[38;5;15m:[39m[38;5;15m [39msum
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres4
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m  [39m[38;5;197mFREEZE_LAYERS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMETA_ARCH[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mproposal_generator
[38;5;15m    [39m-[38;5;15m [39mbackbone
[38;5;15m    [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mbox_pooler
[38;5;15m    [39m-[38;5;15m [39mbox_head
[38;5;15m    [39m-[38;5;15m [39mbox_predictor
[38;5;15m    [39m-[38;5;15m [39mmask_pooler
[38;5;15m    [39m-[38;5;15m [39mmask_head
[38;5;15m    [39m-[38;5;15m [39mkeypoint_pooler
[38;5;15m    [39m-[38;5;15m [39mkeypoint_head
[38;5;15m  [39m[38;5;197mGROUP_NORM[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDIM_PER_GP[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;15m    [39m[38;5;197mEPSILON[39m[38;5;15m:[39m[38;5;15m [39m1.0e-05
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m32
[38;5;15m  [39m[38;5;197mKEYPOINT_ON[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mLOAD_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39mSceneGraphSegmentationRCNN
[38;5;15m  [39m[38;5;197mPANOPTIC_FPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMBINE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m      [39m[38;5;197mINSTANCES_CONFIDENCE_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m      [39m[38;5;197mOVERLAP_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m      [39m[38;5;197mSTUFF_AREA_LIMIT[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m103.53
[38;5;15m  [39m-[38;5;15m [39m116.28
[38;5;15m  [39m-[38;5;15m [39m123.675
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m57.375
[38;5;15m  [39m-[38;5;15m [39m57.12
[38;5;15m  [39m-[38;5;15m [39m58.395
[38;5;15m  [39m[38;5;197mPROPOSAL_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMIN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mRPN
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEFORM_MODULATED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mDEFORM_NUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mDEFORM_ON_PER_STAGE[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m101
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mFrozenBN
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m32
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres4
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mRES2_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mRES5_DILATION[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m64
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mWIDTH_PER_GROUP[39m[38;5;15m:[39m[38;5;15m [39m8
[38;5;15m  [39m[38;5;197mRETINANET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m&id002[39m
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m0.25
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m2.0
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mp3
[38;5;15m    [39m-[38;5;15m [39mp4
[38;5;15m    [39m-[38;5;15m [39mp5
[38;5;15m    [39m-[38;5;15m [39mp6
[38;5;15m    [39m-[38;5;15m [39mp7
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.4
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m80
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m0.01
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m    [39m[38;5;197mSMOOTH_L1_LOSS_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mTOPK_CANDIDATES_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mROI_BOX_CASCADE_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m[38;5;15m&id001[39m
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m5.0
[38;5;15m      [39m-[38;5;15m [39m5.0
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m20.0
[38;5;15m      [39m-[38;5;15m [39m20.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m30.0
[38;5;15m      [39m-[38;5;15m [39m30.0
[38;5;15m      [39m-[38;5;15m [39m15.0
[38;5;15m      [39m-[38;5;15m [39m15.0
[38;5;15m    [39m[38;5;197mIOUS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m-[38;5;15m [39m0.6
[38;5;15m    [39m-[38;5;15m [39m0.7
[38;5;15m  [39m[38;5;197mROI_BOX_FEATURE_EXTRACTORS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOX_FEATURE_MASK[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mCLASS_LOGITS_WITH_MASK[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mBoxFeatureSegmentationExtractor
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m28
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m  [39m[38;5;197mROI_BOX_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id001[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_BBOX_REG[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mFC_DIM[39m[38;5;15m:[39m[38;5;15m [39m1024
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mFastRCNNConvFCHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNUM_FC[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m7
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m    [39m[38;5;197mTRAIN_ON_PRED_BOXES[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mEMBEDDINGS_PATH[39m[38;5;15m:[39m[38;5;15m [39m/home/r09521612/segmentationsg/segmentationsg/data/embeddings/glove_mean_vg
[38;5;15m    [39m[38;5;197mEMBEDDINGS_PATH_COCO[39m[38;5;15m:[39m[38;5;15m [39m/home/r09521612/segmentationsg/segmentationsg/data/embeddings/glove_mean_coco
[38;5;15m    [39m[38;5;197mFG_IOU_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mp2
[38;5;15m    [39m-[38;5;15m [39mp3
[38;5;15m    [39m-[38;5;15m [39mp4
[38;5;15m    [39m-[38;5;15m [39mp5
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mLINGUAL_MATRIX_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m    [39m[38;5;197mMASK_NUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m80
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mSGSegmentationROIHeadsMaskTransfer
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m150
[38;5;15m    [39m[38;5;197mNUM_OUTPUT_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m80
[38;5;15m    [39m[38;5;197mOBJECTNESS_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.3
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m0.25
[38;5;15m    [39m[38;5;197mPROPOSAL_APPEND_GT[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mREFINE_SEG_MASKS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m    [39m[38;5;197mSEGMENTATION_STEP_MASK_REFINE[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mROI_KEYPOINT_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mMIN_KEYPOINTS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mKRCNNConvDeconvUpsampleHead
[38;5;15m    [39m[38;5;197mNORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mNUM_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m17
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m  [39m[38;5;197mROI_MASK_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_MASK[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mSceneGraphMaskHeadTransfer
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m  [39m[38;5;197mROI_RELATION_FEATURE_EXTRACTORS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMULTIPLY_LOGITS_WITH_MASKS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mRelationFeatureExtractor
[38;5;15m    [39m[38;5;197mUSE_MASK_COMBINER[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mROI_SCENEGRAPH_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mADD_GTBOX_TO_PROPOSAL_IN_TRAIN[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m64
[38;5;15m    [39m[38;5;197mCONTEXT_DROPOUT_RATE[39m[38;5;15m:[39m[38;5;15m [39m0.2
[38;5;15m    [39m[38;5;197mCONTEXT_HIDDEN_DIM[39m[38;5;15m:[39m[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mCONTEXT_OBJ_LAYER[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mCONTEXT_POOLING_DIM[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mCONTEXT_REL_LAYER[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mEMBED_DIM[39m[38;5;15m:[39m[38;5;15m [39m200
[38;5;15m    [39m[38;5;197mLABEL_SMOOTHING_LOSS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mMASK_ATTENTION_TYPE[39m[38;5;15m:[39m[38;5;15m [39mWeighted
[38;5;15m    [39m[38;5;197mMODE[39m[38;5;15m:[39m[38;5;15m [39mpredcls
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mSceneGraphSegmentationHead
[38;5;15m    [39m[38;5;197mNMS_FILTER_DUPLICATES[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m50
[38;5;15m    [39m[38;5;197mNUM_SAMPLE_PER_GT_REL[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m0.25
[38;5;15m    [39m[38;5;197mPREDICTOR[39m[38;5;15m:[39m[38;5;15m [39mMotifSegmentationPredictorC
[38;5;15m    [39m[38;5;197mPREDICT_USE_BIAS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mPREDICT_USE_VISION[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mREL_PROP[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.01858
[38;5;15m    [39m-[38;5;15m [39m0.00057
[38;5;15m    [39m-[38;5;15m [39m0.00051
[38;5;15m    [39m-[38;5;15m [39m0.00109
[38;5;15m    [39m-[38;5;15m [39m0.0015
[38;5;15m    [39m-[38;5;15m [39m0.00489
[38;5;15m    [39m-[38;5;15m [39m0.00432
[38;5;15m    [39m-[38;5;15m [39m0.02913
[38;5;15m    [39m-[38;5;15m [39m0.00245
[38;5;15m    [39m-[38;5;15m [39m0.00121
[38;5;15m    [39m-[38;5;15m [39m0.00404
[38;5;15m    [39m-[38;5;15m [39m0.0011
[38;5;15m    [39m-[38;5;15m [39m0.00132
[38;5;15m    [39m-[38;5;15m [39m0.00172
[38;5;15m    [39m-[38;5;15m [39m5.0e-05
[38;5;15m    [39m-[38;5;15m [39m0.00242
[38;5;15m    [39m-[38;5;15m [39m0.0005
[38;5;15m    [39m-[38;5;15m [39m0.00048
[38;5;15m    [39m-[38;5;15m [39m0.00208
[38;5;15m    [39m-[38;5;15m [39m0.15608
[38;5;15m    [39m-[38;5;15m [39m0.0265
[38;5;15m    [39m-[38;5;15m [39m0.06091
[38;5;15m    [39m-[38;5;15m [39m0.009
[38;5;15m    [39m-[38;5;15m [39m0.00183
[38;5;15m    [39m-[38;5;15m [39m0.00225
[38;5;15m    [39m-[38;5;15m [39m0.0009
[38;5;15m    [39m-[38;5;15m [39m0.00028
[38;5;15m    [39m-[38;5;15m [39m0.00077
[38;5;15m    [39m-[38;5;15m [39m0.04844
[38;5;15m    [39m-[38;5;15m [39m0.08645
[38;5;15m    [39m-[38;5;15m [39m0.31621
[38;5;15m    [39m-[38;5;15m [39m0.00088
[38;5;15m    [39m-[38;5;15m [39m0.00301
[38;5;15m    [39m-[38;5;15m [39m0.00042
[38;5;15m    [39m-[38;5;15m [39m0.00186
[38;5;15m    [39m-[38;5;15m [39m0.001
[38;5;15m    [39m-[38;5;15m [39m0.00027
[38;5;15m    [39m-[38;5;15m [39m0.01012
[38;5;15m    [39m-[38;5;15m [39m0.0001
[38;5;15m    [39m-[38;5;15m [39m0.01286
[38;5;15m    [39m-[38;5;15m [39m0.00647
[38;5;15m    [39m-[38;5;15m [39m0.00084
[38;5;15m    [39m-[38;5;15m [39m0.01077
[38;5;15m    [39m-[38;5;15m [39m0.00132
[38;5;15m    [39m-[38;5;15m [39m0.00069
[38;5;15m    [39m-[38;5;15m [39m0.00376
[38;5;15m    [39m-[38;5;15m [39m0.00214
[38;5;15m    [39m-[38;5;15m [39m0.11424
[38;5;15m    [39m-[38;5;15m [39m0.01205
[38;5;15m    [39m-[38;5;15m [39m0.02958
[38;5;15m    [39m[38;5;197mREQUIRE_BOX_OVERLAP[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mRETURN_SEG_ANNOS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mRETURN_SEG_MASKS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mSEG_BBOX_LOSS_MULTIPLIER[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mSIGMOID_ATTENTION[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mTRANSFORMER[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mDROPOUT_RATE[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m      [39m[38;5;197mINNER_DIM[39m[38;5;15m:[39m[38;5;15m [39m2048
[38;5;15m      [39m[38;5;197mKEY_DIM[39m[38;5;15m:[39m[38;5;15m [39m64
[38;5;15m      [39m[38;5;197mNUM_HEAD[39m[38;5;15m:[39m[38;5;15m [39m8
[38;5;15m      [39m[38;5;197mOBJ_LAYER[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m      [39m[38;5;197mREL_LAYER[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;15m      [39m[38;5;197mVAL_DIM[39m[38;5;15m:[39m[38;5;15m [39m64
[38;5;15m    [39m[38;5;197mUSE_GT_BOX[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mUSE_GT_OBJECT_LABEL[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mUSE_MASK_ATTENTION[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mUSE_ONLY_FG_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mZERO_SHOT_TRIPLETS[39m[38;5;15m:[39m[38;5;15m [39m../evaluation/datasets/vg/zeroshot_triplet.pytorch
[38;5;15m  [39m[38;5;197mRPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id002[39m
[38;5;15m    [39m[38;5;197mBOUNDARY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m[38;5;197mHEAD_NAME[39m[38;5;15m:[39m[38;5;15m [39mStandardRPNHead
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mp2
[38;5;15m    [39m-[38;5;15m [39mp3
[38;5;15m    [39m-[38;5;15m [39mp4
[38;5;15m    [39m-[38;5;15m [39mp5
[38;5;15m    [39m-[38;5;15m [39mp6
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.3
[38;5;15m    [39m-[38;5;15m [39m0.7
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mNMS_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.7
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m2000
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mSCENEGRAPH_ON[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m128
[38;5;15m    [39m[38;5;197mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m255
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mp2
[38;5;15m    [39m-[38;5;15m [39mp3
[38;5;15m    [39m-[38;5;15m [39mp4
[38;5;15m    [39m-[38;5;15m [39mp5
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mSemSegFPNHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mGN
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m54
[38;5;15m  [39m[38;5;197mUSE_MASK_ON_NODE[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m../output-step1-vg/resnet_pretrain_weights.pth
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m../output-step3-motif-short-vg
[38;5;197mSEED[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAMP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m0.01
[38;5;15m  [39m[38;5;197mBIAS_LR_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m500
[38;5;15m  [39m[38;5;197mCLIP_GRADIENTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLIP_TYPE[39m[38;5;15m:[39m[38;5;15m [39mvalue
[38;5;15m    [39m[38;5;197mCLIP_VALUE[39m[38;5;15m:[39m[38;5;15m [39m5.0
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNORM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m2.0
[38;5;15m  [39m[38;5;197mGAMMA[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m16
[38;5;15m  [39m[38;5;197mLR_SCHEDULER_NAME[39m[38;5;15m:[39m[38;5;15m [39mWarmupMultiStepLR
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m2000
[38;5;15m  [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m0.9
[38;5;15m  [39m[38;5;197mNESTEROV[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mREFERENCE_WORLD_SIZE[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m25000
[38;5;15m  [39m-[38;5;15m [39m35000
[38;5;15m  [39m[38;5;197mWARMUP_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m  [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39mlinear
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m0.0001
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_BIAS[39m[38;5;15m:[39m[38;5;15m [39mnull
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_NORM[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mFLIP[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mMAX_SIZE[39m[38;5;15m:[39m[38;5;15m [39m4000
[38;5;15m    [39m[38;5;197mMIN_SIZES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m400
[38;5;15m    [39m-[38;5;15m [39m500
[38;5;15m    [39m-[38;5;15m [39m600
[38;5;15m    [39m-[38;5;15m [39m700
[38;5;15m    [39m-[38;5;15m [39m800
[38;5;15m    [39m-[38;5;15m [39m900
[38;5;15m    [39m-[38;5;15m [39m1000
[38;5;15m    [39m-[38;5;15m [39m1100
[38;5;15m    [39m-[38;5;15m [39m1200
[38;5;15m  [39m[38;5;197mDETECTIONS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m40
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m50000
[38;5;15m  [39m[38;5;197mEXPECTED_RESULTS[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mKEYPOINT_OKS_SIGMAS[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mPRECISE_BN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNUM_ITER[39m[38;5;15m:[39m[38;5;15m [39m200
[38;5;15m  [39m[38;5;197mRELATION[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mLATER_NMS_PREDICTION_THRES[39m[38;5;15m:[39m[38;5;15m [39m0.3
[38;5;15m    [39m[38;5;197mMULTIPLE_PREDS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mREQUIRE_OVERLAP[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;197mVERSION[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;197mVIS_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m0

[32m[04/17 11:26:32 detectron2]: [0mFull config saved to ../output-step3-motif-short-vg/config.yaml
[32m[04/17 11:26:32 d2.utils.env]: [0mUsing a generated random seed 33102541
[32m[04/17 11:26:32 d2.engine.defaults]: [0mAuto-scaling the config to batch_size=4, learning_rate=0.0025, max_iter=8000, warmup=4000.
loading word vectors from ../glove/glove.6B.200d.pt
loading word vectors from ../glove/glove.6B.200d.pt
loading word vectors from ../glove/glove.6B.200d.pt
loading word vectors from ../glove/glove.6B.200d.pt
loading word vectors from ../glove/glove.6B.200d.pt
animal
bag
basket
beach
board
boot
box
building
cabinet
cap
coat
counter
curtain
desk
door
drawer
ear
engine
eye
fence
finger
flag
flower
food
fruit
glass
glove
hair
hand
handle
hat
helmet
hill
house
lamp
leaf
letter
light
logo
mountain
mouth
neck
nose
number
paper
paw
pillow
plate
pole
post
pot
racket
railing
rock
roof
room
seat
shelf
shirt
shoe
sidewalk
sign
skier
sneaker
snow
sock
stand
street
tail
tile
tire
towel
tower
track
tree
trunk
vegetable
vehicle
wave
wheel
window
windshield
wing
wire
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: box_head.fc1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: box_head.fc1.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: box_head.fc2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: box_head.fc2.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: box_predictor.cls_score.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: box_predictor.cls_score.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: box_predictor.bbox_pred.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: box_predictor.bbox_pred.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: box_predictor.transfer_cls_score.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: box_predictor.transfer_cls_score.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: box_predictor.transfer_bbox_pred.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: box_predictor.transfer_bbox_pred.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: mask_head.mask_fcn1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: mask_head.mask_fcn1.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: mask_head.mask_fcn2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: mask_head.mask_fcn2.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: mask_head.mask_fcn3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: mask_head.mask_fcn3.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: mask_head.mask_fcn4.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: mask_head.mask_fcn4.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: mask_head.deconv.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: mask_head.deconv.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: mask_head.predictor.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: mask_head.predictor.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.fpn_lateral2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.fpn_lateral2.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.fpn_output2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.fpn_output2.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.fpn_lateral3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.fpn_lateral3.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.fpn_output3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.fpn_output3.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.fpn_lateral4.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.fpn_lateral4.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.fpn_output4.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.fpn_output4.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.fpn_lateral5.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.fpn_lateral5.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.fpn_output5.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.fpn_output5.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.stem.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res2.0.shortcut.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res2.0.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res2.0.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res2.0.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res2.1.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res2.1.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res2.1.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res2.2.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res2.2.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res2.2.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res3.0.shortcut.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res3.0.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res3.0.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res3.0.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res3.1.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res3.1.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res3.1.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res3.2.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res3.2.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res3.2.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res3.3.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res3.3.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res3.3.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.0.shortcut.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.0.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.0.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.0.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.1.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.1.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.1.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.2.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.2.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.2.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.3.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.3.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.3.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.4.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.4.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.4.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.5.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.5.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.5.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.6.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.6.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.6.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.7.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.7.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.7.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.8.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.8.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.8.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.9.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.9.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.9.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.10.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.10.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.10.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.11.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.11.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.11.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.12.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.12.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.12.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.13.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.13.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.13.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.14.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.14.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.14.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.15.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.15.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.15.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.16.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.16.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.16.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.17.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.17.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.17.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.18.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.18.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.18.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.19.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.19.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.19.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.20.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.20.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.20.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.21.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.21.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.21.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.22.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.22.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res4.22.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res5.0.shortcut.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res5.0.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res5.0.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res5.0.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res5.1.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res5.1.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res5.1.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res5.2.conv1.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res5.2.conv2.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: backbone.bottom_up.res5.2.conv3.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: proposal_generator.rpn_head.conv.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: proposal_generator.rpn_head.conv.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: proposal_generator.rpn_head.objectness_logits.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: proposal_generator.rpn_head.objectness_logits.bias
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: proposal_generator.rpn_head.anchor_deltas.weight
[5m[31mWARNING[0m [32m[04/17 11:26:45 detectron2]: [0mFreezed Layer: proposal_generator.rpn_head.anchor_deltas.bias
[32m[04/17 11:26:46 d2.engine.defaults]: [0mModel:
SceneGraphSegmentationRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv2): Conv2d(
            2048, 2048, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv3): Conv2d(
            2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv2): Conv2d(
            2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv3): Conv2d(
            2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv2): Conv2d(
            2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv3): Conv2d(
            2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): SGSegmentationROIHeadsMaskTransfer(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayersSGMaskTransfer(
      (cls_score): Linear(in_features=1024, out_features=81, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=320, bias=True)
      (transfer_cls_score): Linear(in_features=1024, out_features=151, bias=True)
      (transfer_bbox_pred): Linear(in_features=1024, out_features=600, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): SceneGraphMaskHeadTransfer(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 80, kernel_size=(1, 1), stride=(1, 1))
    )
    (scenegraph_head): SceneGraphSegmentationHead(
      (box_feature_extractor): BoxFeatureSegmentationExtractor(
        (mask_combiner): Conv2d(406, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (mask_combiner_segmentation): Conv2d(336, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (pooler): ROIPooler(
          (level_poolers): ModuleList(
            (0): ROIAlign(output_size=(28, 28), spatial_scale=0.25, sampling_ratio=0, aligned=True)
            (1): ROIAlign(output_size=(28, 28), spatial_scale=0.125, sampling_ratio=0, aligned=True)
            (2): ROIAlign(output_size=(28, 28), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
            (3): ROIAlign(output_size=(28, 28), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
          )
        )
        (fc6): Linear(in_features=200704, out_features=1024, bias=True)
        (fc7): Linear(in_features=1024, out_features=1024, bias=True)
      )
      (union_feature_extractor): RelationFeatureExtractor(
        (feature_extractor): BoxFeatureExtractor(
          (mask_combiner): Conv2d(406, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (pooler): ROIPooler(
            (level_poolers): ModuleList(
              (0): ROIAlign(output_size=(28, 28), spatial_scale=0.25, sampling_ratio=0, aligned=True)
              (1): ROIAlign(output_size=(28, 28), spatial_scale=0.125, sampling_ratio=0, aligned=True)
              (2): ROIAlign(output_size=(28, 28), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
              (3): ROIAlign(output_size=(28, 28), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
            )
          )
          (fc6): Linear(in_features=200704, out_features=1024, bias=True)
          (fc7): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (variance_net): Linear(in_features=302, out_features=6, bias=True)
      )
      (predictor): MotifSegmentationPredictorC(
        (post_emb): Linear(in_features=512, out_features=1024, bias=True)
        (post_cat): Linear(in_features=1024, out_features=4096, bias=True)
        (rel_compress): Linear(in_features=4096, out_features=51, bias=True)
        (up_dim): Linear(in_features=1024, out_features=4096, bias=True)
        (freq_bias): FrequencyBias(
          (obj_baseline): Embedding(22801, 51)
        )
        (context_layer): LSTMContextSegmentationC(
          (obj_embed1): Embedding(151, 200)
          (obj_embed2): Embedding(151, 200)
          (pos_embed): Sequential(
            (0): Linear(in_features=9, out_features=32, bias=True)
            (1): BatchNorm1d(32, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
            (2): Linear(in_features=32, out_features=128, bias=True)
            (3): ReLU(inplace=True)
          )
          (obj_ctx_rnn): LSTM(1352, 512, bidirectional=True)
          (decoder_rnn): DecoderRNN(
            (obj_embed): Embedding(152, 200)
            (input_linearity): Linear(in_features=2064, out_features=3072, bias=True)
            (state_linearity): Linear(in_features=512, out_features=2560, bias=True)
            (out_obj): Linear(in_features=512, out_features=151, bias=True)
          )
          (edge_ctx_rnn): LSTM(1736, 512, bidirectional=True)
          (lin_obj_h): Linear(in_features=1024, out_features=512, bias=True)
          (lin_edge_h): Linear(in_features=1024, out_features=512, bias=True)
          (sg_segmentation_features): Linear(in_features=1864, out_features=256, bias=True)
          (segmentation_head): SGSceneGraphMaskHead(
            (mask_fcn1): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
              (activation): ReLU()
            )
            (mask_fcn2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
              (activation): ReLU()
            )
            (mask_fcn3): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
              (activation): ReLU()
            )
            (mask_fcn4): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
              (activation): ReLU()
            )
            (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
            (deconv_relu): ReLU()
            (predictor): Conv2d(256, 80, kernel_size=(1, 1), stride=(1, 1))
          )
          (obj_embed_segmentation): Embedding(81, 200)
          (segmentation_reducer): Conv2d(
            512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)
            (activation): ReLU()
          )
        )
      )
      (post_processor): PostProcessor()
      (pooler): ROIPooler(
        (level_poolers): ModuleList(
          (0): ROIAlign(output_size=(28, 28), spatial_scale=0.25, sampling_ratio=0, aligned=True)
          (1): ROIAlign(output_size=(28, 28), spatial_scale=0.125, sampling_ratio=0, aligned=True)
          (2): ROIAlign(output_size=(28, 28), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
          (3): ROIAlign(output_size=(28, 28), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
        )
      )
      (segmentation_criterion_loss): CrossEntropyLoss()
    )
    (embeddings): Embedding(150, 300)
    (embeddings_coco): Embedding(80, 300)
  )
)
[32m[04/17 11:26:46 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[32m[04/17 11:26:46 d2.data.build]: [0mRemoved 0 images with no usable annotations. 61070 images left.
[32m[04/17 11:26:49 d2.data.build]: [0mDistribution of instances among all 150 categories:
[36m|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
|  airplane  | 947          |   animal   | 1425         |    arm     | 6074         |
|    bag     | 4778         |   banana   | 2380         |   basket   | 1612         |
|   beach    | 2141         |    bear    | 1903         |    bed     | 2077         |
|   bench    | 3490         |    bike    | 3176         |    bird    | 2219         |
|   board    | 2548         |    boat    | 2970         |    book    | 2872         |
|    boot    | 1843         |   bottle   | 3774         |    bowl    | 2903         |
|    box     | 3173         |    boy     | 4542         |   branch   | 3882         |
|  building  | 21059        |    bus     | 3232         |  cabinet   | 2442         |
|    cap     | 2515         |    car     | 11576        |    cat     | 2228         |
|   chair    | 7875         |   child    | 1930         |   clock    | 2910         |
|    coat    | 2676         |  counter   | 2479         |    cow     | 2508         |
|    cup     | 2552         |  curtain   | 2021         |    desk    | 1654         |
|    dog     | 2790         |    door    | 8495         |   drawer   | 1547         |
|    ear     | 7759         |  elephant  | 2933         |   engine   | 1691         |
|    eye     | 3401         |    face    | 5558         |   fence    | 7742         |
|   finger   | 1795         |    flag    | 2060         |   flower   | 4870         |
|    food    | 3414         |    fork    | 1600         |   fruit    | 1188         |
|  giraffe   | 2891         |    girl    | 3943         |   glass    | 7105         |
|   glove    | 2536         |    guy     | 1150         |    hair    | 11599        |
|    hand    | 11042        |   handle   | 4574         |    hat     | 5535         |
|    head    | 13335        |   helmet   | 3908         |    hill    | 2464         |
|   horse    | 3168         |   house    | 3104         |   jacket   | 6918         |
|    jean    | 3700         |    kid     | 1000         |    kite    | 1865         |
|    lady    | 1404         |    lamp    | 2693         |   laptop   | 1939         |
|    leaf    | 8355         |    leg     | 13513        |   letter   | 3623         |
|   light    | 8820         |    logo    | 2970         |    man     | 35555        |
|    men     | 1164         | motorcycle | 2675         |  mountain  | 2837         |
|   mouth    | 2313         |    neck    | 2917         |    nose    | 3860         |
|   number   | 1948         |   orange   | 1377         |    pant    | 8514         |
|   paper    | 2780         |    paw     | 1569         |   people   | 8657         |
|   person   | 22621        |   phone    | 1636         |   pillow   | 3545         |
|   pizza    | 2001         |   plane    | 2732         |   plant    | 3857         |
|   plate    | 6811         |   player   | 2385         |    pole    | 13537        |
|    post    | 3846         |    pot     | 1633         |   racket   | 1615         |
|  railing   | 1938         |    rock    | 4721         |    roof    | 4377         |
|    room    | 1528         |   screen   | 1453         |    seat    | 2760         |
|   sheep    | 2070         |   shelf    | 3336         |   shirt    | 22841        |
|    shoe    | 7943         |   short    | 5151         |  sidewalk  | 6442         |
|    sign    | 14806        |    sink    | 1683         | skateboard | 2405         |
|    ski     | 2349         |   skier    | 1360         |  sneaker   | 1398         |
|    snow    | 5825         |    sock    | 1999         |   stand    | 1623         |
|   street   | 7315         | surfboard  | 2297         |   table    | 11740        |
|    tail    | 5665         |    tie     | 1670         |    tile    | 3388         |
|    tire    | 4064         |   toilet   | 1221         |   towel    | 1768         |
|   tower    | 1723         |   track    | 4349         |   train    | 3791         |
|    tree    | 31548        |   truck    | 2863         |   trunk    | 3377         |
|  umbrella  | 4037         |    vase    | 1660         | vegetable  | 1078         |
|  vehicle   | 2160         |    wave    | 3294         |   wheel    | 5864         |
|   window   | 28402        | windshield | 2105         |    wing    | 2648         |
|    wire    | 2540         |   woman    | 16722        |   zebra    | 2494         |
|            |              |            |              |            |              |
|   total    | 720559       |            |              |            |              |[0m
[32m[04/17 11:26:49 d2.data.build]: [0mUsing training sampler TrainingSampler
[32m[04/17 11:26:49 d2.data.common]: [0mSerializing 61070 elements to byte tensors and concatenating them all ...
[32m[04/17 11:26:57 d2.data.common]: [0mSerialized dataset takes 155.03 MiB
[5m[31mWARNING[0m [32m[04/17 11:26:57 d2.solver.build]: [0mSOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[32m[04/17 11:27:11 d2.data.datasets.coco]: [0mLoading ../datasets-real/coco/annotations/instances_train2017.json takes 4.56 seconds.
[32m[04/17 11:27:11 d2.data.datasets.coco]: [0mLoaded 25000 images in COCO format from ../datasets-real/coco/annotations/instances_train2017.json
[32m[04/17 11:27:12 d2.data.build]: [0mRemoved 0 images with no usable annotations. 25000 images left.
[32m[04/17 11:27:13 d2.data.build]: [0mDistribution of instances among all 80 categories:
[36m|   category    | #instances   |   category   | #instances   |   category    | #instances   |
|:-------------:|:-------------|:------------:|:-------------|:-------------:|:-------------|
|    person     | 55096        |   bicycle    | 1504         |      car      | 8873         |
|  motorcycle   | 1884         |   airplane   | 1054         |      bus      | 1215         |
|     train     | 976          |    truck     | 2040         |     boat      | 2259         |
| traffic light | 2631         | fire hydrant | 353          |   stop sign   | 376          |
| parking meter | 214          |    bench     | 2229         |     bird      | 2102         |
|      cat      | 1033         |     dog      | 1099         |     horse     | 1349         |
|     sheep     | 2006         |     cow      | 1634         |   elephant    | 1190         |
|     bear      | 296          |    zebra     | 1081         |    giraffe    | 1085         |
|   backpack    | 1854         |   umbrella   | 2432         |    handbag    | 2802         |
|      tie      | 1265         |   suitcase   | 1291         |    frisbee    | 573          |
|     skis      | 1431         |  snowboard   | 570          |  sports ball  | 1353         |
|     kite      | 1808         | baseball bat | 713          | baseball gl.. | 842          |
|  skateboard   | 1254         |  surfboard   | 1190         | tennis racket | 1078         |
|    bottle     | 5152         |  wine glass  | 1654         |      cup      | 4478         |
|     fork      | 1264         |    knife     | 1733         |     spoon     | 1373         |
|     bowl      | 3224         |    banana    | 2157         |     apple     | 1357         |
|   sandwich    | 1053         |    orange    | 1444         |   broccoli    | 1548         |
|    carrot     | 1539         |   hot dog    | 705          |     pizza     | 1174         |
|     donut     | 1508         |     cake     | 1299         |     chair     | 8158         |
|     couch     | 1231         | potted plant | 1855         |      bed      | 937          |
| dining table  | 3450         |    toilet    | 885          |      tv       | 1174         |
|    laptop     | 1060         |    mouse     | 441          |    remote     | 1204         |
|   keyboard    | 571          |  cell phone  | 1309         |   microwave   | 367          |
|     oven      | 698          |   toaster    | 46           |     sink      | 1258         |
| refrigerator  | 622          |     book     | 4976         |     clock     | 1336         |
|     vase      | 1423         |   scissors   | 323          |  teddy bear   | 1014         |
|  hair drier   | 40           |  toothbrush  | 400          |               |              |
|     total     | 181475       |              |              |               |              |[0m
[32m[04/17 11:27:13 d2.data.common]: [0mSerializing 25000 elements to byte tensors and concatenating them all ...
[32m[04/17 11:27:13 d2.data.common]: [0mSerialized dataset takes 96.38 MiB
[32m[04/17 11:27:14 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[32m[04/17 11:27:14 fvcore.common.checkpoint]: [0m[Checkpointer] Loading from ../output-step1-vg/resnet_pretrain_weights.pth ...
[5m[31mWARNING[0m [32m[04/17 11:27:19 fvcore.common.checkpoint]: [0mSome model parameters or buffers are not found in the checkpoint:
[34mroi_heads.embeddings.weight[0m
[34mroi_heads.embeddings_coco.weight[0m
[34mroi_heads.scenegraph_head.box_feature_extractor.fc6.{bias, weight}[0m
[34mroi_heads.scenegraph_head.box_feature_extractor.fc7.{bias, weight}[0m
[34mroi_heads.scenegraph_head.box_feature_extractor.mask_combiner.{bias, weight}[0m
[34mroi_heads.scenegraph_head.box_feature_extractor.mask_combiner_segmentation.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.decoder_rnn.input_linearity.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.decoder_rnn.obj_embed.weight[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.decoder_rnn.out_obj.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.decoder_rnn.state_linearity.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.edge_ctx_rnn.{bias_hh_l0, bias_hh_l0_reverse, bias_ih_l0, bias_ih_l0_reverse, weight_hh_l0, weight_hh_l0_reverse, weight_ih_l0, weight_ih_l0_reverse}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.lin_edge_h.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.lin_obj_h.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.obj_ctx_rnn.{bias_hh_l0, bias_hh_l0_reverse, bias_ih_l0, bias_ih_l0_reverse, weight_hh_l0, weight_hh_l0_reverse, weight_ih_l0, weight_ih_l0_reverse}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.obj_embed1.weight[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.obj_embed2.weight[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.obj_embed_segmentation.weight[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.pos_embed.0.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.pos_embed.1.{bias, running_mean, running_var, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.pos_embed.2.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.segmentation_head.deconv.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.segmentation_head.mask_fcn1.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.segmentation_head.mask_fcn2.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.segmentation_head.mask_fcn3.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.segmentation_head.mask_fcn4.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.segmentation_head.predictor.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.segmentation_reducer.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.sg_segmentation_features.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.freq_bias.obj_baseline.weight[0m
[34mroi_heads.scenegraph_head.predictor.post_cat.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.post_emb.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.rel_compress.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.up_dim.{bias, weight}[0m
[34mroi_heads.scenegraph_head.union_feature_extractor.feature_extractor.fc6.{bias, weight}[0m
[34mroi_heads.scenegraph_head.union_feature_extractor.feature_extractor.fc7.{bias, weight}[0m
[34mroi_heads.scenegraph_head.union_feature_extractor.feature_extractor.mask_combiner.{bias, weight}[0m
[34mroi_heads.scenegraph_head.union_feature_extractor.variance_net.{bias, weight}[0m
[5m[31mWARNING[0m [32m[04/17 11:27:19 fvcore.common.checkpoint]: [0mThe checkpoint state_dict contains keys that are not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
[32m[04/17 11:27:19 d2.engine.train_loop]: [0mStarting training from iteration 0
[32m[04/17 11:27:59 d2.utils.events]: [0m eta: 4:08:17  iter: 19  total_loss: 5.363  loss_rel: 0.2603  loss_refine_obj: 4.879  loss_mask_segmentation: 0.2207  time: 1.8786  data_time: 0.3149  lr: 0.00026069  max_mem: 14280M
[32m[04/17 11:28:38 d2.utils.events]: [0m eta: 4:07:37  iter: 39  total_loss: 4.221  loss_rel: 0.2139  loss_refine_obj: 3.694  loss_mask_segmentation: 0.2306  time: 1.8923  data_time: 0.2205  lr: 0.00027194  max_mem: 14280M
[32m[04/17 11:29:15 d2.utils.events]: [0m eta: 4:09:32  iter: 59  total_loss: 3.196  loss_rel: 0.237  loss_refine_obj: 2.716  loss_mask_segmentation: 0.2328  time: 1.8881  data_time: 0.2031  lr: 0.00028319  max_mem: 14280M
[32m[04/17 11:29:53 d2.utils.events]: [0m eta: 4:05:56  iter: 79  total_loss: 3.063  loss_rel: 0.1953  loss_refine_obj: 2.659  loss_mask_segmentation: 0.2238  time: 1.8872  data_time: 0.2012  lr: 0.00029444  max_mem: 14280M
[32m[04/17 11:30:32 d2.utils.events]: [0m eta: 4:08:03  iter: 99  total_loss: 3.054  loss_rel: 0.2114  loss_refine_obj: 2.653  loss_mask_segmentation: 0.2333  time: 1.8971  data_time: 0.2351  lr: 0.00030569  max_mem: 14280M
[32m[04/17 11:31:10 d2.utils.events]: [0m eta: 4:09:00  iter: 119  total_loss: 3.121  loss_rel: 0.2521  loss_refine_obj: 2.636  loss_mask_segmentation: 0.2393  time: 1.9045  data_time: 0.2240  lr: 0.00031694  max_mem: 14281M
[32m[04/17 11:31:48 d2.utils.events]: [0m eta: 4:08:22  iter: 139  total_loss: 2.887  loss_rel: 0.2007  loss_refine_obj: 2.485  loss_mask_segmentation: 0.2269  time: 1.9036  data_time: 0.2049  lr: 0.00032819  max_mem: 14281M
[32m[04/17 11:32:27 d2.utils.events]: [0m eta: 4:08:52  iter: 159  total_loss: 2.951  loss_rel: 0.2358  loss_refine_obj: 2.491  loss_mask_segmentation: 0.2261  time: 1.9073  data_time: 0.2078  lr: 0.00033944  max_mem: 14281M
[32m[04/17 11:33:05 d2.utils.events]: [0m eta: 4:08:33  iter: 179  total_loss: 2.8  loss_rel: 0.1933  loss_refine_obj: 2.257  loss_mask_segmentation: 0.2277  time: 1.9076  data_time: 0.1927  lr: 0.00035069  max_mem: 14281M
[32m[04/17 11:33:43 d2.utils.events]: [0m eta: 4:07:55  iter: 199  total_loss: 2.722  loss_rel: 0.2075  loss_refine_obj: 2.296  loss_mask_segmentation: 0.221  time: 1.9072  data_time: 0.1989  lr: 0.00036194  max_mem: 14281M
[32m[04/17 11:34:21 d2.utils.events]: [0m eta: 4:06:58  iter: 219  total_loss: 2.614  loss_rel: 0.2235  loss_refine_obj: 2.193  loss_mask_segmentation: 0.2189  time: 1.9064  data_time: 0.2161  lr: 0.00037319  max_mem: 14281M
[32m[04/17 11:35:08 d2.utils.events]: [0m eta: 4:07:42  iter: 239  total_loss: 2.619  loss_rel: 0.2207  loss_refine_obj: 2.149  loss_mask_segmentation: 0.2453  time: 1.9427  data_time: 0.4506  lr: 0.00038444  max_mem: 14744M
[32m[04/17 11:35:55 d2.utils.events]: [0m eta: 4:09:31  iter: 259  total_loss: 2.679  loss_rel: 0.247  loss_refine_obj: 2.19  loss_mask_segmentation: 0.2361  time: 1.9745  data_time: 0.6634  lr: 0.00039569  max_mem: 14744M
[32m[04/17 11:36:35 d2.utils.events]: [0m eta: 4:09:23  iter: 279  total_loss: 2.679  loss_rel: 0.2353  loss_refine_obj: 2.263  loss_mask_segmentation: 0.2319  time: 1.9746  data_time: 0.2656  lr: 0.00040694  max_mem: 14744M
[32m[04/17 11:37:13 d2.utils.events]: [0m eta: 4:08:04  iter: 299  total_loss: 2.575  loss_rel: 0.2527  loss_refine_obj: 2.164  loss_mask_segmentation: 0.2133  time: 1.9674  data_time: 0.1822  lr: 0.00041819  max_mem: 14744M
[32m[04/17 11:37:50 d2.utils.events]: [0m eta: 4:05:57  iter: 319  total_loss: 2.462  loss_rel: 0.2039  loss_refine_obj: 2.05  loss_mask_segmentation: 0.2255  time: 1.9599  data_time: 0.1950  lr: 0.00042944  max_mem: 14744M
[32m[04/17 11:38:27 d2.utils.events]: [0m eta: 4:04:32  iter: 339  total_loss: 2.542  loss_rel: 0.2468  loss_refine_obj: 2.071  loss_mask_segmentation: 0.2407  time: 1.9550  data_time: 0.1796  lr: 0.00044069  max_mem: 14744M
[32m[04/17 11:39:04 d2.utils.events]: [0m eta: 4:02:49  iter: 359  total_loss: 2.611  loss_rel: 0.2097  loss_refine_obj: 2.141  loss_mask_segmentation: 0.2288  time: 1.9498  data_time: 0.1936  lr: 0.00045194  max_mem: 14744M
[32m[04/17 11:39:42 d2.utils.events]: [0m eta: 4:01:53  iter: 379  total_loss: 2.467  loss_rel: 0.1751  loss_refine_obj: 2.047  loss_mask_segmentation: 0.2239  time: 1.9455  data_time: 0.1885  lr: 0.00046319  max_mem: 14744M
[32m[04/17 11:40:20 d2.utils.events]: [0m eta: 4:01:14  iter: 399  total_loss: 2.718  loss_rel: 0.2407  loss_refine_obj: 2.261  loss_mask_segmentation: 0.2249  time: 1.9435  data_time: 0.2382  lr: 0.00047444  max_mem: 14744M
[32m[04/17 11:40:57 d2.utils.events]: [0m eta: 4:00:10  iter: 419  total_loss: 2.482  loss_rel: 0.176  loss_refine_obj: 2.095  loss_mask_segmentation: 0.2328  time: 1.9402  data_time: 0.2192  lr: 0.00048569  max_mem: 14744M
[32m[04/17 11:41:35 d2.utils.events]: [0m eta: 3:59:32  iter: 439  total_loss: 2.479  loss_rel: 0.2172  loss_refine_obj: 2.015  loss_mask_segmentation: 0.2345  time: 1.9382  data_time: 0.2213  lr: 0.00049694  max_mem: 14744M
[32m[04/17 11:42:13 d2.utils.events]: [0m eta: 3:58:33  iter: 459  total_loss: 2.356  loss_rel: 0.1714  loss_refine_obj: 1.952  loss_mask_segmentation: 0.2313  time: 1.9352  data_time: 0.1995  lr: 0.00050819  max_mem: 14744M
[32m[04/17 11:42:51 d2.utils.events]: [0m eta: 3:58:08  iter: 479  total_loss: 2.471  loss_rel: 0.2232  loss_refine_obj: 2.014  loss_mask_segmentation: 0.2324  time: 1.9336  data_time: 0.1919  lr: 0.00051944  max_mem: 14744M
[32m[04/17 11:43:29 d2.utils.events]: [0m eta: 3:57:30  iter: 499  total_loss: 2.536  loss_rel: 0.1935  loss_refine_obj: 2.062  loss_mask_segmentation: 0.2289  time: 1.9325  data_time: 0.2049  lr: 0.00053069  max_mem: 14744M
[32m[04/17 11:44:07 d2.utils.events]: [0m eta: 3:56:52  iter: 519  total_loss: 2.38  loss_rel: 0.1997  loss_refine_obj: 1.924  loss_mask_segmentation: 0.2214  time: 1.9306  data_time: 0.1821  lr: 0.00054194  max_mem: 14744M
[32m[04/17 11:44:45 d2.utils.events]: [0m eta: 3:56:02  iter: 539  total_loss: 2.332  loss_rel: 0.213  loss_refine_obj: 1.805  loss_mask_segmentation: 0.2379  time: 1.9298  data_time: 0.1873  lr: 0.00055319  max_mem: 14744M
[32m[04/17 11:45:24 d2.utils.events]: [0m eta: 3:55:24  iter: 559  total_loss: 2.253  loss_rel: 0.199  loss_refine_obj: 1.844  loss_mask_segmentation: 0.2292  time: 1.9305  data_time: 0.2596  lr: 0.00056444  max_mem: 14744M
[32m[04/17 11:46:01 d2.utils.events]: [0m eta: 3:54:46  iter: 579  total_loss: 2.261  loss_rel: 0.2263  loss_refine_obj: 1.768  loss_mask_segmentation: 0.2265  time: 1.9288  data_time: 0.2264  lr: 0.00057569  max_mem: 14744M
[32m[04/17 11:46:41 d2.utils.events]: [0m eta: 3:54:20  iter: 599  total_loss: 2.324  loss_rel: 0.1939  loss_refine_obj: 1.869  loss_mask_segmentation: 0.2123  time: 1.9306  data_time: 0.2034  lr: 0.00058694  max_mem: 14744M
[32m[04/17 11:47:18 d2.utils.events]: [0m eta: 3:53:17  iter: 619  total_loss: 2.246  loss_rel: 0.2276  loss_refine_obj: 1.742  loss_mask_segmentation: 0.2429  time: 1.9279  data_time: 0.1722  lr: 0.00059819  max_mem: 14744M
[32m[04/17 11:47:56 d2.utils.events]: [0m eta: 3:52:34  iter: 639  total_loss: 2.101  loss_rel: 0.2043  loss_refine_obj: 1.698  loss_mask_segmentation: 0.2395  time: 1.9267  data_time: 0.2047  lr: 0.00060944  max_mem: 14744M
[32m[04/17 11:48:34 d2.utils.events]: [0m eta: 3:52:02  iter: 659  total_loss: 2.166  loss_rel: 0.2155  loss_refine_obj: 1.712  loss_mask_segmentation: 0.2234  time: 1.9265  data_time: 0.2168  lr: 0.00062069  max_mem: 14744M
[32m[04/17 11:49:12 d2.utils.events]: [0m eta: 3:51:05  iter: 679  total_loss: 2.257  loss_rel: 0.2024  loss_refine_obj: 1.711  loss_mask_segmentation: 0.2347  time: 1.9252  data_time: 0.1907  lr: 0.00063194  max_mem: 14744M
[32m[04/17 11:49:49 d2.utils.events]: [0m eta: 3:49:59  iter: 699  total_loss: 2.029  loss_rel: 0.2373  loss_refine_obj: 1.585  loss_mask_segmentation: 0.2188  time: 1.9230  data_time: 0.1848  lr: 0.00064319  max_mem: 14744M
[32m[04/17 11:50:27 d2.utils.events]: [0m eta: 3:49:22  iter: 719  total_loss: 2.213  loss_rel: 0.2387  loss_refine_obj: 1.678  loss_mask_segmentation: 0.2324  time: 1.9220  data_time: 0.2144  lr: 0.00065444  max_mem: 14744M
[32m[04/17 11:51:05 d2.utils.events]: [0m eta: 3:48:44  iter: 739  total_loss: 2.028  loss_rel: 0.2309  loss_refine_obj: 1.619  loss_mask_segmentation: 0.2209  time: 1.9215  data_time: 0.2241  lr: 0.00066569  max_mem: 14744M
[32m[04/17 11:51:42 d2.utils.events]: [0m eta: 3:48:06  iter: 759  total_loss: 2.066  loss_rel: 0.2096  loss_refine_obj: 1.675  loss_mask_segmentation: 0.2204  time: 1.9198  data_time: 0.1950  lr: 0.00067694  max_mem: 14744M
[32m[04/17 11:52:20 d2.utils.events]: [0m eta: 3:47:29  iter: 779  total_loss: 2.084  loss_rel: 0.2005  loss_refine_obj: 1.638  loss_mask_segmentation: 0.221  time: 1.9192  data_time: 0.1927  lr: 0.00068819  max_mem: 14744M
[32m[04/17 11:52:58 d2.utils.events]: [0m eta: 3:47:18  iter: 799  total_loss: 2.091  loss_rel: 0.2097  loss_refine_obj: 1.648  loss_mask_segmentation: 0.212  time: 1.9188  data_time: 0.1865  lr: 0.00069944  max_mem: 14744M
[32m[04/17 11:53:35 d2.utils.events]: [0m eta: 3:46:13  iter: 819  total_loss: 1.994  loss_rel: 0.2167  loss_refine_obj: 1.491  loss_mask_segmentation: 0.2214  time: 1.9170  data_time: 0.1933  lr: 0.00071069  max_mem: 14744M
[32m[04/17 11:54:12 d2.utils.events]: [0m eta: 3:45:34  iter: 839  total_loss: 1.99  loss_rel: 0.1819  loss_refine_obj: 1.553  loss_mask_segmentation: 0.2415  time: 1.9159  data_time: 0.1738  lr: 0.00072194  max_mem: 14744M
[32m[04/17 11:54:51 d2.utils.events]: [0m eta: 3:44:57  iter: 859  total_loss: 2.02  loss_rel: 0.2372  loss_refine_obj: 1.586  loss_mask_segmentation: 0.2378  time: 1.9158  data_time: 0.2062  lr: 0.00073319  max_mem: 14744M
[32m[04/17 11:55:29 d2.utils.events]: [0m eta: 3:44:19  iter: 879  total_loss: 1.972  loss_rel: 0.201  loss_refine_obj: 1.555  loss_mask_segmentation: 0.2322  time: 1.9152  data_time: 0.2240  lr: 0.00074444  max_mem: 14744M
[32m[04/17 11:56:07 d2.utils.events]: [0m eta: 3:43:44  iter: 899  total_loss: 1.96  loss_rel: 0.2368  loss_refine_obj: 1.536  loss_mask_segmentation: 0.2236  time: 1.9152  data_time: 0.2022  lr: 0.00075569  max_mem: 14744M
[32m[04/17 11:56:45 d2.utils.events]: [0m eta: 3:43:06  iter: 919  total_loss: 1.921  loss_rel: 0.2012  loss_refine_obj: 1.561  loss_mask_segmentation: 0.2136  time: 1.9147  data_time: 0.1974  lr: 0.00076694  max_mem: 14744M
[32m[04/17 11:57:23 d2.utils.events]: [0m eta: 3:42:22  iter: 939  total_loss: 1.912  loss_rel: 0.1846  loss_refine_obj: 1.514  loss_mask_segmentation: 0.2353  time: 1.9145  data_time: 0.1846  lr: 0.00077819  max_mem: 14744M
[32m[04/17 11:58:00 d2.utils.events]: [0m eta: 3:41:40  iter: 959  total_loss: 1.85  loss_rel: 0.1932  loss_refine_obj: 1.437  loss_mask_segmentation: 0.2191  time: 1.9132  data_time: 0.1917  lr: 0.00078944  max_mem: 14744M
[32m[04/17 11:58:37 d2.utils.events]: [0m eta: 3:41:01  iter: 979  total_loss: 1.939  loss_rel: 0.2091  loss_refine_obj: 1.494  loss_mask_segmentation: 0.2184  time: 1.9118  data_time: 0.2016  lr: 0.00080069  max_mem: 14744M
[32m[04/17 11:59:14 d2.utils.events]: [0m eta: 3:40:11  iter: 999  total_loss: 1.893  loss_rel: 0.2201  loss_refine_obj: 1.398  loss_mask_segmentation: 0.2326  time: 1.9105  data_time: 0.1882  lr: 0.00081194  max_mem: 14744M
[32m[04/17 11:59:51 d2.utils.events]: [0m eta: 3:39:39  iter: 1019  total_loss: 1.839  loss_rel: 0.2087  loss_refine_obj: 1.408  loss_mask_segmentation: 0.2193  time: 1.9096  data_time: 0.2042  lr: 0.00082319  max_mem: 14744M
[32m[04/17 12:00:29 d2.utils.events]: [0m eta: 3:39:01  iter: 1039  total_loss: 1.789  loss_rel: 0.1998  loss_refine_obj: 1.36  loss_mask_segmentation: 0.227  time: 1.9093  data_time: 0.2166  lr: 0.00083444  max_mem: 14744M
[32m[04/17 12:01:07 d2.utils.events]: [0m eta: 3:38:24  iter: 1059  total_loss: 1.86  loss_rel: 0.2172  loss_refine_obj: 1.396  loss_mask_segmentation: 0.2297  time: 1.9094  data_time: 0.2018  lr: 0.00084569  max_mem: 14744M
[32m[04/17 12:01:45 d2.utils.events]: [0m eta: 3:37:55  iter: 1079  total_loss: 1.832  loss_rel: 0.1668  loss_refine_obj: 1.386  loss_mask_segmentation: 0.2397  time: 1.9089  data_time: 0.1980  lr: 0.00085694  max_mem: 14744M
[32m[04/17 12:02:22 d2.utils.events]: [0m eta: 3:37:15  iter: 1099  total_loss: 1.729  loss_rel: 0.2067  loss_refine_obj: 1.301  loss_mask_segmentation: 0.2187  time: 1.9081  data_time: 0.1849  lr: 0.00086819  max_mem: 14744M
[32m[04/17 12:03:00 d2.utils.events]: [0m eta: 3:36:21  iter: 1119  total_loss: 1.913  loss_rel: 0.2165  loss_refine_obj: 1.421  loss_mask_segmentation: 0.2477  time: 1.9080  data_time: 0.1941  lr: 0.00087944  max_mem: 14744M
[32m[04/17 12:03:38 d2.utils.events]: [0m eta: 3:35:43  iter: 1139  total_loss: 1.762  loss_rel: 0.2121  loss_refine_obj: 1.352  loss_mask_segmentation: 0.2258  time: 1.9076  data_time: 0.1992  lr: 0.00089069  max_mem: 14744M
[32m[04/17 12:04:16 d2.utils.events]: [0m eta: 3:34:54  iter: 1159  total_loss: 1.754  loss_rel: 0.2034  loss_refine_obj: 1.31  loss_mask_segmentation: 0.2249  time: 1.9071  data_time: 0.1903  lr: 0.00090194  max_mem: 14744M
[32m[04/17 12:04:53 d2.utils.events]: [0m eta: 3:34:04  iter: 1179  total_loss: 1.865  loss_rel: 0.218  loss_refine_obj: 1.362  loss_mask_segmentation: 0.2315  time: 1.9061  data_time: 0.1762  lr: 0.00091319  max_mem: 14744M
[32m[04/17 12:05:31 d2.utils.events]: [0m eta: 3:33:27  iter: 1199  total_loss: 1.788  loss_rel: 0.2197  loss_refine_obj: 1.337  loss_mask_segmentation: 0.2299  time: 1.9061  data_time: 0.2357  lr: 0.00092444  max_mem: 14744M
[32m[04/17 12:06:08 d2.utils.events]: [0m eta: 3:32:45  iter: 1219  total_loss: 1.738  loss_rel: 0.2227  loss_refine_obj: 1.339  loss_mask_segmentation: 0.2307  time: 1.9051  data_time: 0.1897  lr: 0.00093569  max_mem: 14744M
[32m[04/17 12:06:44 d2.utils.events]: [0m eta: 3:31:47  iter: 1239  total_loss: 1.672  loss_rel: 0.2311  loss_refine_obj: 1.207  loss_mask_segmentation: 0.2218  time: 1.9039  data_time: 0.1898  lr: 0.00094694  max_mem: 14744M
[32m[04/17 12:07:22 d2.utils.events]: [0m eta: 3:30:52  iter: 1259  total_loss: 1.687  loss_rel: 0.1937  loss_refine_obj: 1.262  loss_mask_segmentation: 0.2309  time: 1.9038  data_time: 0.1920  lr: 0.00095819  max_mem: 14744M
[32m[04/17 12:08:00 d2.utils.events]: [0m eta: 3:30:10  iter: 1279  total_loss: 1.728  loss_rel: 0.1757  loss_refine_obj: 1.293  loss_mask_segmentation: 0.2172  time: 1.9036  data_time: 0.1996  lr: 0.00096944  max_mem: 14744M
[32m[04/17 12:08:39 d2.utils.events]: [0m eta: 3:29:38  iter: 1299  total_loss: 1.658  loss_rel: 0.2371  loss_refine_obj: 1.2  loss_mask_segmentation: 0.226  time: 1.9044  data_time: 0.1967  lr: 0.00098069  max_mem: 14744M
[32m[04/17 12:09:16 d2.utils.events]: [0m eta: 3:28:59  iter: 1319  total_loss: 1.618  loss_rel: 0.2245  loss_refine_obj: 1.204  loss_mask_segmentation: 0.2202  time: 1.9034  data_time: 0.1927  lr: 0.00099194  max_mem: 14744M
[32m[04/17 12:09:53 d2.utils.events]: [0m eta: 3:28:26  iter: 1339  total_loss: 1.859  loss_rel: 0.2538  loss_refine_obj: 1.331  loss_mask_segmentation: 0.233  time: 1.9028  data_time: 0.1765  lr: 0.0010032  max_mem: 14744M
[32m[04/17 12:10:31 d2.utils.events]: [0m eta: 3:27:51  iter: 1359  total_loss: 1.818  loss_rel: 0.1998  loss_refine_obj: 1.408  loss_mask_segmentation: 0.2148  time: 1.9026  data_time: 0.2145  lr: 0.0010144  max_mem: 14744M
[32m[04/17 12:11:09 d2.utils.events]: [0m eta: 3:27:24  iter: 1379  total_loss: 1.678  loss_rel: 0.2145  loss_refine_obj: 1.244  loss_mask_segmentation: 0.2348  time: 1.9025  data_time: 0.2095  lr: 0.0010257  max_mem: 14744M
[32m[04/17 12:11:47 d2.utils.events]: [0m eta: 3:26:41  iter: 1399  total_loss: 1.694  loss_rel: 0.2017  loss_refine_obj: 1.187  loss_mask_segmentation: 0.2295  time: 1.9021  data_time: 0.1968  lr: 0.0010369  max_mem: 14744M
[32m[04/17 12:12:24 d2.utils.events]: [0m eta: 3:26:14  iter: 1419  total_loss: 1.729  loss_rel: 0.1703  loss_refine_obj: 1.31  loss_mask_segmentation: 0.2266  time: 1.9015  data_time: 0.1962  lr: 0.0010482  max_mem: 14744M
[32m[04/17 12:13:01 d2.utils.events]: [0m eta: 3:25:36  iter: 1439  total_loss: 1.654  loss_rel: 0.2035  loss_refine_obj: 1.215  loss_mask_segmentation: 0.2247  time: 1.9009  data_time: 0.1955  lr: 0.0010594  max_mem: 14744M
[32m[04/17 12:13:38 d2.utils.events]: [0m eta: 3:24:54  iter: 1459  total_loss: 1.572  loss_rel: 0.1901  loss_refine_obj: 1.204  loss_mask_segmentation: 0.2276  time: 1.9003  data_time: 0.1830  lr: 0.0010707  max_mem: 14744M
[32m[04/17 12:14:16 d2.utils.events]: [0m eta: 3:24:06  iter: 1479  total_loss: 1.726  loss_rel: 0.2065  loss_refine_obj: 1.32  loss_mask_segmentation: 0.2382  time: 1.8998  data_time: 0.1957  lr: 0.0010819  max_mem: 14744M
[32m[04/17 12:14:53 d2.utils.events]: [0m eta: 3:23:22  iter: 1499  total_loss: 1.553  loss_rel: 0.1952  loss_refine_obj: 1.111  loss_mask_segmentation: 0.2277  time: 1.8995  data_time: 0.1897  lr: 0.0010932  max_mem: 14744M
[32m[04/17 12:15:31 d2.utils.events]: [0m eta: 3:22:45  iter: 1519  total_loss: 1.505  loss_rel: 0.2044  loss_refine_obj: 1.067  loss_mask_segmentation: 0.2235  time: 1.8993  data_time: 0.2021  lr: 0.0011044  max_mem: 14744M
[32m[04/17 12:16:08 d2.utils.events]: [0m eta: 3:22:10  iter: 1539  total_loss: 1.667  loss_rel: 0.2303  loss_refine_obj: 1.189  loss_mask_segmentation: 0.2434  time: 1.8990  data_time: 0.1947  lr: 0.0011157  max_mem: 14744M
[32m[04/17 12:16:46 d2.utils.events]: [0m eta: 3:21:29  iter: 1559  total_loss: 1.694  loss_rel: 0.212  loss_refine_obj: 1.227  loss_mask_segmentation: 0.2229  time: 1.8986  data_time: 0.1910  lr: 0.0011269  max_mem: 14744M
[32m[04/17 12:17:24 d2.utils.events]: [0m eta: 3:20:51  iter: 1579  total_loss: 1.552  loss_rel: 0.1909  loss_refine_obj: 1.048  loss_mask_segmentation: 0.2366  time: 1.8989  data_time: 0.1995  lr: 0.0011382  max_mem: 14744M
[32m[04/17 12:18:01 d2.utils.events]: [0m eta: 3:19:53  iter: 1599  total_loss: 1.645  loss_rel: 0.1886  loss_refine_obj: 1.199  loss_mask_segmentation: 0.2188  time: 1.8979  data_time: 0.1676  lr: 0.0011494  max_mem: 14744M
[32m[04/17 12:18:39 d2.utils.events]: [0m eta: 3:19:31  iter: 1619  total_loss: 1.627  loss_rel: 0.2205  loss_refine_obj: 1.196  loss_mask_segmentation: 0.2289  time: 1.8982  data_time: 0.2180  lr: 0.0011607  max_mem: 14744M
[32m[04/17 12:19:16 d2.utils.events]: [0m eta: 3:18:58  iter: 1639  total_loss: 1.477  loss_rel: 0.2009  loss_refine_obj: 1.085  loss_mask_segmentation: 0.2368  time: 1.8976  data_time: 0.1856  lr: 0.0011719  max_mem: 14744M
[32m[04/17 12:19:56 d2.utils.events]: [0m eta: 3:18:03  iter: 1659  total_loss: 1.578  loss_rel: 0.1767  loss_refine_obj: 1.152  loss_mask_segmentation: 0.2271  time: 1.8988  data_time: 0.1815  lr: 0.0011832  max_mem: 14744M
[32m[04/17 12:20:34 d2.utils.events]: [0m eta: 3:17:23  iter: 1679  total_loss: 1.578  loss_rel: 0.213  loss_refine_obj: 1.138  loss_mask_segmentation: 0.2373  time: 1.8988  data_time: 0.2131  lr: 0.0011944  max_mem: 14744M
[32m[04/17 12:21:11 d2.utils.events]: [0m eta: 3:16:44  iter: 1699  total_loss: 1.475  loss_rel: 0.1868  loss_refine_obj: 1.06  loss_mask_segmentation: 0.2267  time: 1.8984  data_time: 0.1909  lr: 0.0012057  max_mem: 14744M
[32m[04/17 12:21:49 d2.utils.events]: [0m eta: 3:15:57  iter: 1719  total_loss: 1.485  loss_rel: 0.192  loss_refine_obj: 1.074  loss_mask_segmentation: 0.2179  time: 1.8979  data_time: 0.1848  lr: 0.0012169  max_mem: 14744M
[32m[04/17 12:22:26 d2.utils.events]: [0m eta: 3:15:18  iter: 1739  total_loss: 1.584  loss_rel: 0.205  loss_refine_obj: 1.14  loss_mask_segmentation: 0.2242  time: 1.8975  data_time: 0.2060  lr: 0.0012282  max_mem: 14744M
[32m[04/17 12:23:03 d2.utils.events]: [0m eta: 3:14:39  iter: 1759  total_loss: 1.666  loss_rel: 0.2166  loss_refine_obj: 1.176  loss_mask_segmentation: 0.2262  time: 1.8972  data_time: 0.1967  lr: 0.0012394  max_mem: 14744M
[32m[04/17 12:23:40 d2.utils.events]: [0m eta: 3:13:55  iter: 1779  total_loss: 1.597  loss_rel: 0.2145  loss_refine_obj: 1.178  loss_mask_segmentation: 0.2232  time: 1.8965  data_time: 0.1790  lr: 0.0012507  max_mem: 14744M
[32m[04/17 12:24:17 d2.utils.events]: [0m eta: 3:13:03  iter: 1799  total_loss: 1.495  loss_rel: 0.1785  loss_refine_obj: 1.158  loss_mask_segmentation: 0.2247  time: 1.8960  data_time: 0.1799  lr: 0.0012619  max_mem: 14744M
[32m[04/17 12:24:54 d2.utils.events]: [0m eta: 3:12:29  iter: 1819  total_loss: 1.611  loss_rel: 0.1895  loss_refine_obj: 1.195  loss_mask_segmentation: 0.2278  time: 1.8955  data_time: 0.1882  lr: 0.0012732  max_mem: 14744M
[32m[04/17 12:25:32 d2.utils.events]: [0m eta: 3:11:48  iter: 1839  total_loss: 1.545  loss_rel: 0.1857  loss_refine_obj: 1.134  loss_mask_segmentation: 0.2136  time: 1.8956  data_time: 0.2193  lr: 0.0012844  max_mem: 14744M
[32m[04/17 12:26:10 d2.utils.events]: [0m eta: 3:11:11  iter: 1859  total_loss: 1.531  loss_rel: 0.1859  loss_refine_obj: 1.094  loss_mask_segmentation: 0.2206  time: 1.8955  data_time: 0.2107  lr: 0.0012957  max_mem: 14744M
[32m[04/17 12:26:47 d2.utils.events]: [0m eta: 3:10:39  iter: 1879  total_loss: 1.487  loss_rel: 0.1999  loss_refine_obj: 1.126  loss_mask_segmentation: 0.2339  time: 1.8952  data_time: 0.1624  lr: 0.0013069  max_mem: 14744M
[32m[04/17 12:27:26 d2.utils.events]: [0m eta: 3:10:10  iter: 1899  total_loss: 1.585  loss_rel: 0.2634  loss_refine_obj: 1.059  loss_mask_segmentation: 0.2286  time: 1.8958  data_time: 0.1928  lr: 0.0013182  max_mem: 14744M
[32m[04/17 12:28:04 d2.utils.events]: [0m eta: 3:09:32  iter: 1919  total_loss: 1.566  loss_rel: 0.2161  loss_refine_obj: 1.119  loss_mask_segmentation: 0.2108  time: 1.8957  data_time: 0.2141  lr: 0.0013294  max_mem: 14744M
[32m[04/17 12:28:42 d2.utils.events]: [0m eta: 3:09:02  iter: 1939  total_loss: 1.574  loss_rel: 0.1831  loss_refine_obj: 1.146  loss_mask_segmentation: 0.2272  time: 1.8955  data_time: 0.1754  lr: 0.0013407  max_mem: 14744M
[32m[04/17 12:29:19 d2.utils.events]: [0m eta: 3:08:25  iter: 1959  total_loss: 1.546  loss_rel: 0.211  loss_refine_obj: 1.096  loss_mask_segmentation: 0.2399  time: 1.8953  data_time: 0.1799  lr: 0.0013519  max_mem: 14744M
[32m[04/17 12:29:57 d2.utils.events]: [0m eta: 3:07:47  iter: 1979  total_loss: 1.436  loss_rel: 0.2194  loss_refine_obj: 0.9664  loss_mask_segmentation: 0.2259  time: 1.8950  data_time: 0.1879  lr: 0.0013632  max_mem: 14744M
[32m[04/17 12:30:35 fvcore.common.checkpoint]: [0mSaving checkpoint to ../output-step3-motif-short-vg/model_0001999.pth
[32m[04/17 12:31:03 d2.utils.events]: [0m eta: 3:07:18  iter: 1999  total_loss: 1.47  loss_rel: 0.202  loss_refine_obj: 1.047  loss_mask_segmentation: 0.2258  time: 1.8951  data_time: 0.2219  lr: 0.0013744  max_mem: 14744M
[32m[04/17 12:31:41 d2.utils.events]: [0m eta: 3:06:41  iter: 2019  total_loss: 1.558  loss_rel: 0.1774  loss_refine_obj: 1.166  loss_mask_segmentation: 0.2361  time: 1.8953  data_time: 0.2127  lr: 0.0013857  max_mem: 14744M
[32m[04/17 12:32:20 d2.utils.events]: [0m eta: 3:05:57  iter: 2039  total_loss: 1.509  loss_rel: 0.2293  loss_refine_obj: 1.024  loss_mask_segmentation: 0.2441  time: 1.8959  data_time: 0.1922  lr: 0.0013969  max_mem: 14744M
[32m[04/17 12:33:00 d2.utils.events]: [0m eta: 3:05:23  iter: 2059  total_loss: 1.501  loss_rel: 0.2045  loss_refine_obj: 1.111  loss_mask_segmentation: 0.2203  time: 1.8966  data_time: 0.2163  lr: 0.0014082  max_mem: 14744M
[32m[04/17 12:33:37 d2.utils.events]: [0m eta: 3:04:41  iter: 2079  total_loss: 1.545  loss_rel: 0.1972  loss_refine_obj: 1.13  loss_mask_segmentation: 0.2277  time: 1.8961  data_time: 0.1835  lr: 0.0014194  max_mem: 14744M
[32m[04/17 12:34:14 d2.utils.events]: [0m eta: 3:04:04  iter: 2099  total_loss: 1.531  loss_rel: 0.2054  loss_refine_obj: 1.06  loss_mask_segmentation: 0.2187  time: 1.8956  data_time: 0.1957  lr: 0.0014307  max_mem: 14744M
[32m[04/17 12:34:51 d2.utils.events]: [0m eta: 3:03:26  iter: 2119  total_loss: 1.6  loss_rel: 0.2268  loss_refine_obj: 1.097  loss_mask_segmentation: 0.2265  time: 1.8954  data_time: 0.2035  lr: 0.0014419  max_mem: 14744M
[32m[04/17 12:35:29 d2.utils.events]: [0m eta: 3:02:46  iter: 2139  total_loss: 1.598  loss_rel: 0.2308  loss_refine_obj: 1.126  loss_mask_segmentation: 0.2289  time: 1.8952  data_time: 0.2089  lr: 0.0014532  max_mem: 14744M
[32m[04/17 12:36:07 d2.utils.events]: [0m eta: 3:02:08  iter: 2159  total_loss: 1.565  loss_rel: 0.2224  loss_refine_obj: 1.094  loss_mask_segmentation: 0.2285  time: 1.8952  data_time: 0.2208  lr: 0.0014644  max_mem: 14744M
[32m[04/17 12:36:43 d2.utils.events]: [0m eta: 3:01:32  iter: 2179  total_loss: 1.538  loss_rel: 0.2068  loss_refine_obj: 1.108  loss_mask_segmentation: 0.2219  time: 1.8946  data_time: 0.1800  lr: 0.0014757  max_mem: 14744M
[32m[04/17 12:37:21 d2.utils.events]: [0m eta: 3:00:47  iter: 2199  total_loss: 1.566  loss_rel: 0.2315  loss_refine_obj: 1.132  loss_mask_segmentation: 0.2258  time: 1.8945  data_time: 0.2106  lr: 0.0014869  max_mem: 14744M
[32m[04/17 12:37:58 d2.utils.events]: [0m eta: 3:00:08  iter: 2219  total_loss: 1.434  loss_rel: 0.2064  loss_refine_obj: 1.04  loss_mask_segmentation: 0.2171  time: 1.8940  data_time: 0.1769  lr: 0.0014982  max_mem: 14744M
[32m[04/17 12:38:35 d2.utils.events]: [0m eta: 2:59:36  iter: 2239  total_loss: 1.607  loss_rel: 0.1993  loss_refine_obj: 1.074  loss_mask_segmentation: 0.2282  time: 1.8936  data_time: 0.1879  lr: 0.0015094  max_mem: 14744M
[32m[04/17 12:39:12 d2.utils.events]: [0m eta: 2:58:56  iter: 2259  total_loss: 1.514  loss_rel: 0.1991  loss_refine_obj: 1.049  loss_mask_segmentation: 0.2208  time: 1.8932  data_time: 0.1817  lr: 0.0015207  max_mem: 14744M
[32m[04/17 12:39:49 d2.utils.events]: [0m eta: 2:58:16  iter: 2279  total_loss: 1.506  loss_rel: 0.2302  loss_refine_obj: 1.027  loss_mask_segmentation: 0.2204  time: 1.8929  data_time: 0.2077  lr: 0.0015319  max_mem: 14744M
[32m[04/17 12:40:26 d2.utils.events]: [0m eta: 2:57:36  iter: 2299  total_loss: 1.535  loss_rel: 0.2025  loss_refine_obj: 1.132  loss_mask_segmentation: 0.2341  time: 1.8927  data_time: 0.2160  lr: 0.0015432  max_mem: 14744M
[32m[04/17 12:41:04 d2.utils.events]: [0m eta: 2:57:08  iter: 2319  total_loss: 1.496  loss_rel: 0.2014  loss_refine_obj: 1.044  loss_mask_segmentation: 0.2238  time: 1.8928  data_time: 0.2275  lr: 0.0015544  max_mem: 14744M
[32m[04/17 12:41:42 d2.utils.events]: [0m eta: 2:56:30  iter: 2339  total_loss: 1.527  loss_rel: 0.1913  loss_refine_obj: 1.092  loss_mask_segmentation: 0.2369  time: 1.8928  data_time: 0.1906  lr: 0.0015657  max_mem: 14744M
[32m[04/17 12:42:20 d2.utils.events]: [0m eta: 2:55:53  iter: 2359  total_loss: 1.505  loss_rel: 0.2437  loss_refine_obj: 1.058  loss_mask_segmentation: 0.2373  time: 1.8926  data_time: 0.2034  lr: 0.0015769  max_mem: 14744M
[32m[04/17 12:42:57 d2.utils.events]: [0m eta: 2:55:04  iter: 2379  total_loss: 1.607  loss_rel: 0.2064  loss_refine_obj: 1.149  loss_mask_segmentation: 0.2283  time: 1.8922  data_time: 0.1840  lr: 0.0015882  max_mem: 14744M
[32m[04/17 12:43:36 d2.utils.events]: [0m eta: 2:54:26  iter: 2399  total_loss: 1.458  loss_rel: 0.1761  loss_refine_obj: 1.057  loss_mask_segmentation: 0.2233  time: 1.8926  data_time: 0.1937  lr: 0.0015994  max_mem: 14744M
[32m[04/17 12:44:14 d2.utils.events]: [0m eta: 2:53:59  iter: 2419  total_loss: 1.505  loss_rel: 0.2  loss_refine_obj: 1.101  loss_mask_segmentation: 0.2323  time: 1.8927  data_time: 0.1983  lr: 0.0016107  max_mem: 14744M
[32m[04/17 12:44:50 d2.utils.events]: [0m eta: 2:53:18  iter: 2439  total_loss: 1.477  loss_rel: 0.1853  loss_refine_obj: 1.066  loss_mask_segmentation: 0.2195  time: 1.8922  data_time: 0.1845  lr: 0.0016219  max_mem: 14744M
[32m[04/17 12:45:27 d2.utils.events]: [0m eta: 2:52:42  iter: 2459  total_loss: 1.558  loss_rel: 0.1695  loss_refine_obj: 1.148  loss_mask_segmentation: 0.2194  time: 1.8919  data_time: 0.1989  lr: 0.0016332  max_mem: 14744M
[32m[04/17 12:46:05 d2.utils.events]: [0m eta: 2:52:03  iter: 2479  total_loss: 1.496  loss_rel: 0.1897  loss_refine_obj: 1.109  loss_mask_segmentation: 0.225  time: 1.8917  data_time: 0.2161  lr: 0.0016444  max_mem: 14744M
[32m[04/17 12:46:42 d2.utils.events]: [0m eta: 2:51:27  iter: 2499  total_loss: 1.5  loss_rel: 0.1831  loss_refine_obj: 1.053  loss_mask_segmentation: 0.2314  time: 1.8915  data_time: 0.1803  lr: 0.0016557  max_mem: 14744M
[32m[04/17 12:47:19 d2.utils.events]: [0m eta: 2:50:36  iter: 2519  total_loss: 1.482  loss_rel: 0.1793  loss_refine_obj: 1.043  loss_mask_segmentation: 0.2198  time: 1.8911  data_time: 0.1874  lr: 0.0016669  max_mem: 14744M
[32m[04/17 12:47:56 d2.utils.events]: [0m eta: 2:49:58  iter: 2539  total_loss: 1.507  loss_rel: 0.1797  loss_refine_obj: 1.047  loss_mask_segmentation: 0.2147  time: 1.8907  data_time: 0.1747  lr: 0.0016782  max_mem: 14744M
[32m[04/17 12:48:33 d2.utils.events]: [0m eta: 2:49:21  iter: 2559  total_loss: 1.53  loss_rel: 0.1864  loss_refine_obj: 1.114  loss_mask_segmentation: 0.2241  time: 1.8905  data_time: 0.1809  lr: 0.0016894  max_mem: 14744M
[32m[04/17 12:49:11 d2.utils.events]: [0m eta: 2:48:43  iter: 2579  total_loss: 1.621  loss_rel: 0.2552  loss_refine_obj: 1.127  loss_mask_segmentation: 0.2356  time: 1.8906  data_time: 0.1893  lr: 0.0017007  max_mem: 14744M
[32m[04/17 12:49:49 d2.utils.events]: [0m eta: 2:48:12  iter: 2599  total_loss: 1.599  loss_rel: 0.1818  loss_refine_obj: 1.092  loss_mask_segmentation: 0.2311  time: 1.8905  data_time: 0.1774  lr: 0.0017119  max_mem: 14744M
[32m[04/17 12:50:26 d2.utils.events]: [0m eta: 2:47:29  iter: 2619  total_loss: 1.519  loss_rel: 0.2274  loss_refine_obj: 1.06  loss_mask_segmentation: 0.23  time: 1.8903  data_time: 0.1991  lr: 0.0017232  max_mem: 14744M
[32m[04/17 12:51:04 d2.utils.events]: [0m eta: 2:46:55  iter: 2639  total_loss: 1.556  loss_rel: 0.1881  loss_refine_obj: 1.122  loss_mask_segmentation: 0.2262  time: 1.8905  data_time: 0.2219  lr: 0.0017344  max_mem: 14744M
[32m[04/17 12:51:42 d2.utils.events]: [0m eta: 2:46:22  iter: 2659  total_loss: 1.617  loss_rel: 0.2104  loss_refine_obj: 1.15  loss_mask_segmentation: 0.2241  time: 1.8902  data_time: 0.1875  lr: 0.0017457  max_mem: 14744M
[32m[04/17 12:52:19 d2.utils.events]: [0m eta: 2:45:49  iter: 2679  total_loss: 1.59  loss_rel: 0.1888  loss_refine_obj: 1.133  loss_mask_segmentation: 0.2247  time: 1.8902  data_time: 0.2024  lr: 0.0017569  max_mem: 14744M
[32m[04/17 12:52:57 d2.utils.events]: [0m eta: 2:45:17  iter: 2699  total_loss: 1.492  loss_rel: 0.1815  loss_refine_obj: 1.073  loss_mask_segmentation: 0.2324  time: 1.8902  data_time: 0.1777  lr: 0.0017682  max_mem: 14744M
[32m[04/17 12:53:35 d2.utils.events]: [0m eta: 2:44:41  iter: 2719  total_loss: 1.425  loss_rel: 0.1834  loss_refine_obj: 1.024  loss_mask_segmentation: 0.2334  time: 1.8900  data_time: 0.1904  lr: 0.0017794  max_mem: 14744M
[32m[04/17 12:54:12 d2.utils.events]: [0m eta: 2:44:05  iter: 2739  total_loss: 1.482  loss_rel: 0.1616  loss_refine_obj: 1.083  loss_mask_segmentation: 0.2339  time: 1.8900  data_time: 0.1786  lr: 0.0017907  max_mem: 14744M
[32m[04/17 12:54:51 d2.utils.events]: [0m eta: 2:43:28  iter: 2759  total_loss: 1.48  loss_rel: 0.2092  loss_refine_obj: 1.053  loss_mask_segmentation: 0.2297  time: 1.8905  data_time: 0.1894  lr: 0.0018019  max_mem: 14744M
[32m[04/17 12:55:29 d2.utils.events]: [0m eta: 2:42:57  iter: 2779  total_loss: 1.439  loss_rel: 0.2131  loss_refine_obj: 0.9801  loss_mask_segmentation: 0.2117  time: 1.8904  data_time: 0.2329  lr: 0.0018132  max_mem: 14744M
[32m[04/17 12:56:07 d2.utils.events]: [0m eta: 2:42:21  iter: 2799  total_loss: 1.638  loss_rel: 0.2128  loss_refine_obj: 1.19  loss_mask_segmentation: 0.2268  time: 1.8903  data_time: 0.2005  lr: 0.0018244  max_mem: 14744M
[32m[04/17 12:56:44 d2.utils.events]: [0m eta: 2:41:48  iter: 2819  total_loss: 1.396  loss_rel: 0.2079  loss_refine_obj: 0.9913  loss_mask_segmentation: 0.2267  time: 1.8902  data_time: 0.1906  lr: 0.0018357  max_mem: 14744M
[32m[04/17 12:57:21 d2.utils.events]: [0m eta: 2:41:05  iter: 2839  total_loss: 1.488  loss_rel: 0.1868  loss_refine_obj: 1.077  loss_mask_segmentation: 0.2394  time: 1.8899  data_time: 0.1902  lr: 0.0018469  max_mem: 14744M
[32m[04/17 12:57:59 d2.utils.events]: [0m eta: 2:40:27  iter: 2859  total_loss: 1.484  loss_rel: 0.1888  loss_refine_obj: 1.076  loss_mask_segmentation: 0.2367  time: 1.8898  data_time: 0.1906  lr: 0.0018582  max_mem: 14744M
[32m[04/17 12:58:36 d2.utils.events]: [0m eta: 2:39:42  iter: 2879  total_loss: 1.474  loss_rel: 0.172  loss_refine_obj: 1.06  loss_mask_segmentation: 0.2204  time: 1.8896  data_time: 0.1835  lr: 0.0018694  max_mem: 14744M
[32m[04/17 12:59:13 d2.utils.events]: [0m eta: 2:38:48  iter: 2899  total_loss: 1.426  loss_rel: 0.2208  loss_refine_obj: 1.007  loss_mask_segmentation: 0.2322  time: 1.8892  data_time: 0.1784  lr: 0.0018807  max_mem: 14744M
[32m[04/17 12:59:50 d2.utils.events]: [0m eta: 2:38:12  iter: 2919  total_loss: 1.528  loss_rel: 0.1987  loss_refine_obj: 1.063  loss_mask_segmentation: 0.2291  time: 1.8891  data_time: 0.1894  lr: 0.0018919  max_mem: 14744M
[32m[04/17 13:00:28 d2.utils.events]: [0m eta: 2:37:34  iter: 2939  total_loss: 1.547  loss_rel: 0.2056  loss_refine_obj: 1.076  loss_mask_segmentation: 0.2384  time: 1.8891  data_time: 0.1991  lr: 0.0019032  max_mem: 14744M
[32m[04/17 13:01:05 d2.utils.events]: [0m eta: 2:36:59  iter: 2959  total_loss: 1.415  loss_rel: 0.1916  loss_refine_obj: 0.9165  loss_mask_segmentation: 0.2246  time: 1.8889  data_time: 0.1925  lr: 0.0019144  max_mem: 14744M
[32m[04/17 13:01:43 d2.utils.events]: [0m eta: 2:36:26  iter: 2979  total_loss: 1.49  loss_rel: 0.1962  loss_refine_obj: 1.096  loss_mask_segmentation: 0.2356  time: 1.8889  data_time: 0.2122  lr: 0.0019257  max_mem: 14744M
[32m[04/17 13:02:20 d2.utils.events]: [0m eta: 2:35:42  iter: 2999  total_loss: 1.549  loss_rel: 0.1929  loss_refine_obj: 1.144  loss_mask_segmentation: 0.22  time: 1.8888  data_time: 0.1942  lr: 0.0019369  max_mem: 14744M
[32m[04/17 13:02:58 d2.utils.events]: [0m eta: 2:35:01  iter: 3019  total_loss: 1.504  loss_rel: 0.1998  loss_refine_obj: 1.07  loss_mask_segmentation: 0.2347  time: 1.8886  data_time: 0.1841  lr: 0.0019482  max_mem: 14744M
[32m[04/17 13:03:35 d2.utils.events]: [0m eta: 2:34:24  iter: 3039  total_loss: 1.475  loss_rel: 0.1971  loss_refine_obj: 1.045  loss_mask_segmentation: 0.2182  time: 1.8885  data_time: 0.1939  lr: 0.0019594  max_mem: 14809M
[32m[04/17 13:04:12 d2.utils.events]: [0m eta: 2:33:30  iter: 3059  total_loss: 1.48  loss_rel: 0.172  loss_refine_obj: 1.03  loss_mask_segmentation: 0.2382  time: 1.8884  data_time: 0.1928  lr: 0.0019707  max_mem: 14809M
[32m[04/17 13:04:50 d2.utils.events]: [0m eta: 2:32:55  iter: 3079  total_loss: 1.548  loss_rel: 0.2182  loss_refine_obj: 1.1  loss_mask_segmentation: 0.2367  time: 1.8883  data_time: 0.1870  lr: 0.0019819  max_mem: 14809M
[32m[04/17 13:05:28 d2.utils.events]: [0m eta: 2:32:21  iter: 3099  total_loss: 1.479  loss_rel: 0.215  loss_refine_obj: 0.9912  loss_mask_segmentation: 0.2334  time: 1.8884  data_time: 0.2114  lr: 0.0019932  max_mem: 14809M
[32m[04/17 13:06:07 d2.utils.events]: [0m eta: 2:31:43  iter: 3119  total_loss: 1.568  loss_rel: 0.2182  loss_refine_obj: 1.07  loss_mask_segmentation: 0.2248  time: 1.8889  data_time: 0.2182  lr: 0.0020044  max_mem: 14809M
[32m[04/17 13:06:44 d2.utils.events]: [0m eta: 2:31:03  iter: 3139  total_loss: 1.461  loss_rel: 0.1909  loss_refine_obj: 1.067  loss_mask_segmentation: 0.2426  time: 1.8885  data_time: 0.1575  lr: 0.0020157  max_mem: 14809M
[32m[04/17 13:07:21 d2.utils.events]: [0m eta: 2:30:20  iter: 3159  total_loss: 1.496  loss_rel: 0.2454  loss_refine_obj: 0.9864  loss_mask_segmentation: 0.2238  time: 1.8881  data_time: 0.1639  lr: 0.0020269  max_mem: 14809M
[32m[04/17 13:07:58 d2.utils.events]: [0m eta: 2:29:40  iter: 3179  total_loss: 1.508  loss_rel: 0.2063  loss_refine_obj: 1.026  loss_mask_segmentation: 0.2241  time: 1.8879  data_time: 0.1615  lr: 0.0020382  max_mem: 14809M
[32m[04/17 13:08:35 d2.utils.events]: [0m eta: 2:29:08  iter: 3199  total_loss: 1.474  loss_rel: 0.1982  loss_refine_obj: 1.004  loss_mask_segmentation: 0.2293  time: 1.8878  data_time: 0.1614  lr: 0.0020494  max_mem: 14809M
[32m[04/17 13:09:12 d2.utils.events]: [0m eta: 2:28:31  iter: 3219  total_loss: 1.486  loss_rel: 0.1874  loss_refine_obj: 1.021  loss_mask_segmentation: 0.2241  time: 1.8876  data_time: 0.1687  lr: 0.0020607  max_mem: 14809M
[32m[04/17 13:09:49 d2.utils.events]: [0m eta: 2:27:49  iter: 3239  total_loss: 1.536  loss_rel: 0.2063  loss_refine_obj: 1.096  loss_mask_segmentation: 0.2253  time: 1.8873  data_time: 0.1709  lr: 0.0020719  max_mem: 14809M
[32m[04/17 13:10:26 d2.utils.events]: [0m eta: 2:27:13  iter: 3259  total_loss: 1.517  loss_rel: 0.2114  loss_refine_obj: 1.075  loss_mask_segmentation: 0.2342  time: 1.8872  data_time: 0.1981  lr: 0.0020832  max_mem: 14809M
[32m[04/17 13:11:03 d2.utils.events]: [0m eta: 2:26:32  iter: 3279  total_loss: 1.513  loss_rel: 0.1977  loss_refine_obj: 1.018  loss_mask_segmentation: 0.2256  time: 1.8868  data_time: 0.1789  lr: 0.0020944  max_mem: 14809M
[32m[04/17 13:11:40 d2.utils.events]: [0m eta: 2:25:55  iter: 3299  total_loss: 1.577  loss_rel: 0.2193  loss_refine_obj: 1.133  loss_mask_segmentation: 0.2191  time: 1.8866  data_time: 0.1681  lr: 0.0021057  max_mem: 14809M
[32m[04/17 13:12:17 d2.utils.events]: [0m eta: 2:25:17  iter: 3319  total_loss: 1.495  loss_rel: 0.1918  loss_refine_obj: 1.08  loss_mask_segmentation: 0.2165  time: 1.8864  data_time: 0.1791  lr: 0.0021169  max_mem: 14809M
[32m[04/17 13:12:54 d2.utils.events]: [0m eta: 2:24:33  iter: 3339  total_loss: 1.501  loss_rel: 0.2082  loss_refine_obj: 1.044  loss_mask_segmentation: 0.2344  time: 1.8860  data_time: 0.1496  lr: 0.0021282  max_mem: 14809M
[32m[04/17 13:13:30 d2.utils.events]: [0m eta: 2:23:56  iter: 3359  total_loss: 1.428  loss_rel: 0.1998  loss_refine_obj: 1.009  loss_mask_segmentation: 0.2182  time: 1.8857  data_time: 0.1698  lr: 0.0021394  max_mem: 14809M
[32m[04/17 13:14:08 d2.utils.events]: [0m eta: 2:23:24  iter: 3379  total_loss: 1.485  loss_rel: 0.1879  loss_refine_obj: 1.019  loss_mask_segmentation: 0.2282  time: 1.8856  data_time: 0.1649  lr: 0.0021507  max_mem: 14809M
[32m[04/17 13:14:45 d2.utils.events]: [0m eta: 2:22:48  iter: 3399  total_loss: 1.476  loss_rel: 0.2156  loss_refine_obj: 1.008  loss_mask_segmentation: 0.2263  time: 1.8854  data_time: 0.1746  lr: 0.0021619  max_mem: 14809M
[32m[04/17 13:15:23 d2.utils.events]: [0m eta: 2:22:09  iter: 3419  total_loss: 1.456  loss_rel: 0.1816  loss_refine_obj: 1.036  loss_mask_segmentation: 0.2296  time: 1.8855  data_time: 0.1844  lr: 0.0021732  max_mem: 14809M
[32m[04/17 13:16:00 d2.utils.events]: [0m eta: 2:21:32  iter: 3439  total_loss: 1.49  loss_rel: 0.2201  loss_refine_obj: 1.074  loss_mask_segmentation: 0.2225  time: 1.8854  data_time: 0.1823  lr: 0.0021844  max_mem: 14809M
[32m[04/17 13:16:40 d2.utils.events]: [0m eta: 2:21:00  iter: 3459  total_loss: 1.546  loss_rel: 0.1992  loss_refine_obj: 1.067  loss_mask_segmentation: 0.2265  time: 1.8860  data_time: 0.1648  lr: 0.0021957  max_mem: 14809M
[32m[04/17 13:17:18 d2.utils.events]: [0m eta: 2:20:28  iter: 3479  total_loss: 1.501  loss_rel: 0.2084  loss_refine_obj: 1.082  loss_mask_segmentation: 0.2196  time: 1.8859  data_time: 0.1710  lr: 0.0022069  max_mem: 14809M
[32m[04/17 13:17:56 d2.utils.events]: [0m eta: 2:19:57  iter: 3499  total_loss: 1.531  loss_rel: 0.2057  loss_refine_obj: 1.054  loss_mask_segmentation: 0.2452  time: 1.8861  data_time: 0.1745  lr: 0.0022182  max_mem: 14809M
[32m[04/17 13:18:33 d2.utils.events]: [0m eta: 2:19:22  iter: 3519  total_loss: 1.43  loss_rel: 0.1952  loss_refine_obj: 1.028  loss_mask_segmentation: 0.2236  time: 1.8860  data_time: 0.1712  lr: 0.0022294  max_mem: 14809M
[32m[04/17 13:19:11 d2.utils.events]: [0m eta: 2:18:39  iter: 3539  total_loss: 1.482  loss_rel: 0.2036  loss_refine_obj: 1.087  loss_mask_segmentation: 0.2062  time: 1.8859  data_time: 0.1696  lr: 0.0022407  max_mem: 14809M
[32m[04/17 13:19:49 d2.utils.events]: [0m eta: 2:18:07  iter: 3559  total_loss: 1.474  loss_rel: 0.192  loss_refine_obj: 1.063  loss_mask_segmentation: 0.2324  time: 1.8859  data_time: 0.1685  lr: 0.0022519  max_mem: 14809M
[32m[04/17 13:20:26 d2.utils.events]: [0m eta: 2:17:30  iter: 3579  total_loss: 1.535  loss_rel: 0.2121  loss_refine_obj: 1.058  loss_mask_segmentation: 0.2359  time: 1.8858  data_time: 0.1789  lr: 0.0022632  max_mem: 14809M
[32m[04/17 13:21:03 d2.utils.events]: [0m eta: 2:16:47  iter: 3599  total_loss: 1.457  loss_rel: 0.2125  loss_refine_obj: 0.9829  loss_mask_segmentation: 0.2196  time: 1.8855  data_time: 0.1763  lr: 0.0022744  max_mem: 14809M
[32m[04/17 13:21:40 d2.utils.events]: [0m eta: 2:16:09  iter: 3619  total_loss: 1.505  loss_rel: 0.2049  loss_refine_obj: 1.079  loss_mask_segmentation: 0.2229  time: 1.8853  data_time: 0.1771  lr: 0.0022857  max_mem: 14809M
[32m[04/17 13:22:17 d2.utils.events]: [0m eta: 2:15:31  iter: 3639  total_loss: 1.473  loss_rel: 0.2116  loss_refine_obj: 1.062  loss_mask_segmentation: 0.2285  time: 1.8853  data_time: 0.1620  lr: 0.0022969  max_mem: 14809M
[32m[04/17 13:22:54 d2.utils.events]: [0m eta: 2:14:53  iter: 3659  total_loss: 1.454  loss_rel: 0.1911  loss_refine_obj: 1.078  loss_mask_segmentation: 0.2181  time: 1.8851  data_time: 0.1577  lr: 0.0023082  max_mem: 14809M
[32m[04/17 13:23:31 d2.utils.events]: [0m eta: 2:14:13  iter: 3679  total_loss: 1.4  loss_rel: 0.2004  loss_refine_obj: 1.011  loss_mask_segmentation: 0.2101  time: 1.8850  data_time: 0.1712  lr: 0.0023194  max_mem: 14809M
[32m[04/17 13:24:09 d2.utils.events]: [0m eta: 2:13:37  iter: 3699  total_loss: 1.503  loss_rel: 0.2017  loss_refine_obj: 1.094  loss_mask_segmentation: 0.2388  time: 1.8850  data_time: 0.1553  lr: 0.0023307  max_mem: 14809M
[32m[04/17 13:24:47 d2.utils.events]: [0m eta: 2:12:57  iter: 3719  total_loss: 1.617  loss_rel: 0.1916  loss_refine_obj: 1.11  loss_mask_segmentation: 0.2425  time: 1.8849  data_time: 0.1756  lr: 0.0023419  max_mem: 14809M
[32m[04/17 13:25:24 d2.utils.events]: [0m eta: 2:12:21  iter: 3739  total_loss: 1.506  loss_rel: 0.2053  loss_refine_obj: 1.133  loss_mask_segmentation: 0.2153  time: 1.8849  data_time: 0.1766  lr: 0.0023532  max_mem: 14809M
[32m[04/17 13:26:02 d2.utils.events]: [0m eta: 2:11:44  iter: 3759  total_loss: 1.439  loss_rel: 0.2005  loss_refine_obj: 1.023  loss_mask_segmentation: 0.2341  time: 1.8849  data_time: 0.1727  lr: 0.0023644  max_mem: 14809M
[32m[04/17 13:26:40 d2.utils.events]: [0m eta: 2:11:07  iter: 3779  total_loss: 1.525  loss_rel: 0.2086  loss_refine_obj: 1.044  loss_mask_segmentation: 0.2333  time: 1.8849  data_time: 0.1706  lr: 0.0023757  max_mem: 14809M
[32m[04/17 13:27:16 d2.utils.events]: [0m eta: 2:10:27  iter: 3799  total_loss: 1.45  loss_rel: 0.1777  loss_refine_obj: 0.9727  loss_mask_segmentation: 0.2314  time: 1.8845  data_time: 0.1547  lr: 0.0023869  max_mem: 14809M
[32m[04/17 13:27:54 d2.utils.events]: [0m eta: 2:09:52  iter: 3819  total_loss: 1.57  loss_rel: 0.2213  loss_refine_obj: 1.093  loss_mask_segmentation: 0.2225  time: 1.8845  data_time: 0.1747  lr: 0.0023982  max_mem: 14809M
[32m[04/17 13:28:33 d2.utils.events]: [0m eta: 2:09:17  iter: 3839  total_loss: 1.412  loss_rel: 0.1967  loss_refine_obj: 1.015  loss_mask_segmentation: 0.2178  time: 1.8848  data_time: 0.1726  lr: 0.0024094  max_mem: 14809M
[32m[04/17 13:29:10 d2.utils.events]: [0m eta: 2:08:38  iter: 3859  total_loss: 1.532  loss_rel: 0.2069  loss_refine_obj: 1.093  loss_mask_segmentation: 0.2347  time: 1.8846  data_time: 0.1577  lr: 0.0024207  max_mem: 14809M
[32m[04/17 13:29:46 d2.utils.events]: [0m eta: 2:08:01  iter: 3879  total_loss: 1.516  loss_rel: 0.2102  loss_refine_obj: 1.139  loss_mask_segmentation: 0.2241  time: 1.8843  data_time: 0.1792  lr: 0.0024319  max_mem: 14809M
[32m[04/17 13:30:24 d2.utils.events]: [0m eta: 2:07:26  iter: 3899  total_loss: 1.402  loss_rel: 0.2163  loss_refine_obj: 0.9389  loss_mask_segmentation: 0.2277  time: 1.8843  data_time: 0.1797  lr: 0.0024432  max_mem: 14809M
[32m[04/17 13:31:01 d2.utils.events]: [0m eta: 2:06:51  iter: 3919  total_loss: 1.496  loss_rel: 0.1731  loss_refine_obj: 1.058  loss_mask_segmentation: 0.2428  time: 1.8842  data_time: 0.1671  lr: 0.0024544  max_mem: 14809M
[32m[04/17 13:31:38 d2.utils.events]: [0m eta: 2:06:06  iter: 3939  total_loss: 1.491  loss_rel: 0.2217  loss_refine_obj: 0.9814  loss_mask_segmentation: 0.2263  time: 1.8840  data_time: 0.1542  lr: 0.0024657  max_mem: 14809M
[32m[04/17 13:32:15 d2.utils.events]: [0m eta: 2:05:28  iter: 3959  total_loss: 1.498  loss_rel: 0.1927  loss_refine_obj: 1.065  loss_mask_segmentation: 0.2455  time: 1.8838  data_time: 0.1714  lr: 0.0024769  max_mem: 14809M
[32m[04/17 13:32:53 d2.utils.events]: [0m eta: 2:04:52  iter: 3979  total_loss: 1.429  loss_rel: 0.2511  loss_refine_obj: 0.9319  loss_mask_segmentation: 0.2404  time: 1.8838  data_time: 0.1646  lr: 0.0024882  max_mem: 14809M
[32m[04/17 13:33:30 fvcore.common.checkpoint]: [0mSaving checkpoint to ../output-step3-motif-short-vg/model_0003999.pth
[32m[04/17 13:33:56 d2.utils.events]: [0m eta: 2:04:17  iter: 3999  total_loss: 1.443  loss_rel: 0.1904  loss_refine_obj: 1.035  loss_mask_segmentation: 0.2335  time: 1.8838  data_time: 0.1729  lr: 0.0024994  max_mem: 14809M
[32m[04/17 13:34:33 d2.utils.events]: [0m eta: 2:03:38  iter: 4019  total_loss: 1.512  loss_rel: 0.2025  loss_refine_obj: 1.02  loss_mask_segmentation: 0.2361  time: 1.8836  data_time: 0.1680  lr: 0.0025  max_mem: 14809M
[32m[04/17 13:35:11 d2.utils.events]: [0m eta: 2:03:07  iter: 4039  total_loss: 1.394  loss_rel: 0.2223  loss_refine_obj: 0.9686  loss_mask_segmentation: 0.2415  time: 1.8835  data_time: 0.1576  lr: 0.0025  max_mem: 14809M
[32m[04/17 13:35:48 d2.utils.events]: [0m eta: 2:02:31  iter: 4059  total_loss: 1.474  loss_rel: 0.1936  loss_refine_obj: 1.064  loss_mask_segmentation: 0.2291  time: 1.8835  data_time: 0.2028  lr: 0.0025  max_mem: 14809M
[32m[04/17 13:36:26 d2.utils.events]: [0m eta: 2:01:56  iter: 4079  total_loss: 1.474  loss_rel: 0.218  loss_refine_obj: 0.9866  loss_mask_segmentation: 0.2385  time: 1.8836  data_time: 0.1647  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:37:03 d2.utils.events]: [0m eta: 2:01:13  iter: 4099  total_loss: 1.5  loss_rel: 0.2331  loss_refine_obj: 1.039  loss_mask_segmentation: 0.2352  time: 1.8834  data_time: 0.1685  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:37:40 d2.utils.events]: [0m eta: 2:00:28  iter: 4119  total_loss: 1.478  loss_rel: 0.1901  loss_refine_obj: 1.065  loss_mask_segmentation: 0.2297  time: 1.8831  data_time: 0.1558  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:38:16 d2.utils.events]: [0m eta: 1:59:52  iter: 4139  total_loss: 1.469  loss_rel: 0.1979  loss_refine_obj: 1.047  loss_mask_segmentation: 0.2411  time: 1.8828  data_time: 0.1586  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:38:53 d2.utils.events]: [0m eta: 1:59:15  iter: 4159  total_loss: 1.461  loss_rel: 0.2087  loss_refine_obj: 0.9852  loss_mask_segmentation: 0.2259  time: 1.8826  data_time: 0.1587  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:39:30 d2.utils.events]: [0m eta: 1:58:39  iter: 4179  total_loss: 1.41  loss_rel: 0.1745  loss_refine_obj: 0.986  loss_mask_segmentation: 0.2387  time: 1.8825  data_time: 0.1680  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:40:09 d2.utils.events]: [0m eta: 1:58:00  iter: 4199  total_loss: 1.598  loss_rel: 0.1963  loss_refine_obj: 1.079  loss_mask_segmentation: 0.2391  time: 1.8829  data_time: 0.1701  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:40:46 d2.utils.events]: [0m eta: 1:57:24  iter: 4219  total_loss: 1.56  loss_rel: 0.1859  loss_refine_obj: 1.084  loss_mask_segmentation: 0.2378  time: 1.8827  data_time: 0.1791  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:41:22 d2.utils.events]: [0m eta: 1:56:46  iter: 4239  total_loss: 1.447  loss_rel: 0.2127  loss_refine_obj: 1.066  loss_mask_segmentation: 0.2248  time: 1.8823  data_time: 0.1539  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:42:00 d2.utils.events]: [0m eta: 1:56:09  iter: 4259  total_loss: 1.455  loss_rel: 0.1504  loss_refine_obj: 1.069  loss_mask_segmentation: 0.2292  time: 1.8822  data_time: 0.1683  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:42:36 d2.utils.events]: [0m eta: 1:55:26  iter: 4279  total_loss: 1.436  loss_rel: 0.217  loss_refine_obj: 1.011  loss_mask_segmentation: 0.2192  time: 1.8819  data_time: 0.1626  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:43:13 d2.utils.events]: [0m eta: 1:54:54  iter: 4299  total_loss: 1.538  loss_rel: 0.189  loss_refine_obj: 1.071  loss_mask_segmentation: 0.2363  time: 1.8817  data_time: 0.1569  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:43:50 d2.utils.events]: [0m eta: 1:54:09  iter: 4319  total_loss: 1.507  loss_rel: 0.1947  loss_refine_obj: 1.092  loss_mask_segmentation: 0.2225  time: 1.8815  data_time: 0.1552  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:44:26 d2.utils.events]: [0m eta: 1:53:37  iter: 4339  total_loss: 1.518  loss_rel: 0.183  loss_refine_obj: 1.049  loss_mask_segmentation: 0.2242  time: 1.8812  data_time: 0.1609  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:45:03 d2.utils.events]: [0m eta: 1:52:53  iter: 4359  total_loss: 1.558  loss_rel: 0.2153  loss_refine_obj: 1.064  loss_mask_segmentation: 0.2458  time: 1.8810  data_time: 0.1509  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:45:41 d2.utils.events]: [0m eta: 1:52:16  iter: 4379  total_loss: 1.446  loss_rel: 0.1918  loss_refine_obj: 1.059  loss_mask_segmentation: 0.2295  time: 1.8810  data_time: 0.1842  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:46:21 d2.utils.events]: [0m eta: 1:51:40  iter: 4399  total_loss: 1.373  loss_rel: 0.212  loss_refine_obj: 1.025  loss_mask_segmentation: 0.2181  time: 1.8816  data_time: 0.3568  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:46:57 d2.utils.events]: [0m eta: 1:50:59  iter: 4419  total_loss: 1.447  loss_rel: 0.2124  loss_refine_obj: 0.9955  loss_mask_segmentation: 0.218  time: 1.8813  data_time: 0.1696  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:47:33 d2.utils.events]: [0m eta: 1:50:19  iter: 4439  total_loss: 1.492  loss_rel: 0.1747  loss_refine_obj: 1.053  loss_mask_segmentation: 0.2226  time: 1.8810  data_time: 0.1686  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:48:11 d2.utils.events]: [0m eta: 1:49:35  iter: 4459  total_loss: 1.59  loss_rel: 0.244  loss_refine_obj: 1.077  loss_mask_segmentation: 0.2262  time: 1.8810  data_time: 0.1692  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:48:51 d2.utils.events]: [0m eta: 1:49:01  iter: 4479  total_loss: 1.435  loss_rel: 0.1907  loss_refine_obj: 0.9763  loss_mask_segmentation: 0.2305  time: 1.8816  data_time: 0.3130  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:49:28 d2.utils.events]: [0m eta: 1:48:13  iter: 4499  total_loss: 1.351  loss_rel: 0.1711  loss_refine_obj: 0.9367  loss_mask_segmentation: 0.2172  time: 1.8814  data_time: 0.1613  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:50:05 d2.utils.events]: [0m eta: 1:47:36  iter: 4519  total_loss: 1.395  loss_rel: 0.1993  loss_refine_obj: 0.9716  loss_mask_segmentation: 0.2259  time: 1.8812  data_time: 0.1762  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:50:41 d2.utils.events]: [0m eta: 1:46:49  iter: 4539  total_loss: 1.458  loss_rel: 0.209  loss_refine_obj: 1.089  loss_mask_segmentation: 0.2326  time: 1.8809  data_time: 0.1595  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:51:20 d2.utils.events]: [0m eta: 1:46:10  iter: 4559  total_loss: 1.488  loss_rel: 0.2011  loss_refine_obj: 1.077  loss_mask_segmentation: 0.2125  time: 1.8812  data_time: 0.1857  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:51:57 d2.utils.events]: [0m eta: 1:45:31  iter: 4579  total_loss: 1.471  loss_rel: 0.17  loss_refine_obj: 1.091  loss_mask_segmentation: 0.224  time: 1.8810  data_time: 0.1670  lr: 0.0025  max_mem: 15004M
[32m[04/17 13:52:35 d2.utils.events]: [0m eta: 1:44:56  iter: 4599  total_loss: 1.479  loss_rel: 0.1834  loss_refine_obj: 1.028  loss_mask_segmentation: 0.2466  time: 1.8811  data_time: 0.1689  lr: 0.0025  max_mem: 15054M
[32m[04/17 13:53:12 d2.utils.events]: [0m eta: 1:44:17  iter: 4619  total_loss: 1.48  loss_rel: 0.1954  loss_refine_obj: 1.046  loss_mask_segmentation: 0.2268  time: 1.8809  data_time: 0.1463  lr: 0.0025  max_mem: 15054M
[32m[04/17 13:53:48 d2.utils.events]: [0m eta: 1:43:38  iter: 4639  total_loss: 1.529  loss_rel: 0.207  loss_refine_obj: 1.047  loss_mask_segmentation: 0.2315  time: 1.8806  data_time: 0.1463  lr: 0.0025  max_mem: 15054M
[32m[04/17 13:54:25 d2.utils.events]: [0m eta: 1:42:53  iter: 4659  total_loss: 1.504  loss_rel: 0.2221  loss_refine_obj: 1.055  loss_mask_segmentation: 0.2111  time: 1.8803  data_time: 0.1579  lr: 0.0025  max_mem: 15054M
[32m[04/17 13:55:01 d2.utils.events]: [0m eta: 1:42:20  iter: 4679  total_loss: 1.526  loss_rel: 0.2196  loss_refine_obj: 1.089  loss_mask_segmentation: 0.2251  time: 1.8802  data_time: 0.1701  lr: 0.0025  max_mem: 15054M
[32m[04/17 13:55:39 d2.utils.events]: [0m eta: 1:41:46  iter: 4699  total_loss: 1.509  loss_rel: 0.2284  loss_refine_obj: 1.057  loss_mask_segmentation: 0.2247  time: 1.8801  data_time: 0.1797  lr: 0.0025  max_mem: 15054M
[32m[04/17 13:56:16 d2.utils.events]: [0m eta: 1:41:10  iter: 4719  total_loss: 1.505  loss_rel: 0.1725  loss_refine_obj: 1.043  loss_mask_segmentation: 0.224  time: 1.8800  data_time: 0.1684  lr: 0.0025  max_mem: 15054M
[32m[04/17 13:56:53 d2.utils.events]: [0m eta: 1:40:25  iter: 4739  total_loss: 1.425  loss_rel: 0.1768  loss_refine_obj: 1.041  loss_mask_segmentation: 0.2271  time: 1.8799  data_time: 0.1575  lr: 0.0025  max_mem: 15054M
[32m[04/17 13:57:29 d2.utils.events]: [0m eta: 1:39:43  iter: 4759  total_loss: 1.539  loss_rel: 0.2109  loss_refine_obj: 1.155  loss_mask_segmentation: 0.2338  time: 1.8796  data_time: 0.1614  lr: 0.0025  max_mem: 15054M
[32m[04/17 13:58:06 d2.utils.events]: [0m eta: 1:39:02  iter: 4779  total_loss: 1.422  loss_rel: 0.1873  loss_refine_obj: 1.055  loss_mask_segmentation: 0.2247  time: 1.8795  data_time: 0.1704  lr: 0.0025  max_mem: 15054M
[32m[04/17 13:58:43 d2.utils.events]: [0m eta: 1:38:27  iter: 4799  total_loss: 1.401  loss_rel: 0.1965  loss_refine_obj: 0.9848  loss_mask_segmentation: 0.2262  time: 1.8794  data_time: 0.1677  lr: 0.0025  max_mem: 15054M
[32m[04/17 13:59:21 d2.utils.events]: [0m eta: 1:37:49  iter: 4819  total_loss: 1.388  loss_rel: 0.2014  loss_refine_obj: 0.9452  loss_mask_segmentation: 0.2222  time: 1.8793  data_time: 0.1526  lr: 0.0025  max_mem: 15054M
[32m[04/17 13:59:57 d2.utils.events]: [0m eta: 1:37:09  iter: 4839  total_loss: 1.421  loss_rel: 0.1783  loss_refine_obj: 0.9914  loss_mask_segmentation: 0.2242  time: 1.8791  data_time: 0.1576  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:00:34 d2.utils.events]: [0m eta: 1:36:33  iter: 4859  total_loss: 1.516  loss_rel: 0.194  loss_refine_obj: 1.024  loss_mask_segmentation: 0.2369  time: 1.8789  data_time: 0.1764  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:01:10 d2.utils.events]: [0m eta: 1:35:55  iter: 4879  total_loss: 1.455  loss_rel: 0.2041  loss_refine_obj: 1.065  loss_mask_segmentation: 0.2194  time: 1.8787  data_time: 0.1549  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:01:47 d2.utils.events]: [0m eta: 1:35:16  iter: 4899  total_loss: 1.397  loss_rel: 0.2007  loss_refine_obj: 0.9373  loss_mask_segmentation: 0.2104  time: 1.8785  data_time: 0.1669  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:02:26 d2.utils.events]: [0m eta: 1:34:39  iter: 4919  total_loss: 1.333  loss_rel: 0.1855  loss_refine_obj: 0.9178  loss_mask_segmentation: 0.2229  time: 1.8788  data_time: 0.1681  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:03:03 d2.utils.events]: [0m eta: 1:34:02  iter: 4939  total_loss: 1.421  loss_rel: 0.2166  loss_refine_obj: 0.9786  loss_mask_segmentation: 0.231  time: 1.8786  data_time: 0.1513  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:03:40 d2.utils.events]: [0m eta: 1:33:26  iter: 4959  total_loss: 1.442  loss_rel: 0.1979  loss_refine_obj: 1.024  loss_mask_segmentation: 0.2327  time: 1.8785  data_time: 0.1613  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:04:17 d2.utils.events]: [0m eta: 1:32:48  iter: 4979  total_loss: 1.409  loss_rel: 0.1651  loss_refine_obj: 0.9843  loss_mask_segmentation: 0.2393  time: 1.8785  data_time: 0.1677  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:04:54 d2.utils.events]: [0m eta: 1:32:04  iter: 4999  total_loss: 1.432  loss_rel: 0.2098  loss_refine_obj: 1.012  loss_mask_segmentation: 0.2258  time: 1.8784  data_time: 0.1507  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:05:31 d2.utils.events]: [0m eta: 1:31:26  iter: 5019  total_loss: 1.432  loss_rel: 0.1673  loss_refine_obj: 1.008  loss_mask_segmentation: 0.2271  time: 1.8783  data_time: 0.1548  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:06:09 d2.utils.events]: [0m eta: 1:30:45  iter: 5039  total_loss: 1.493  loss_rel: 0.1895  loss_refine_obj: 1.062  loss_mask_segmentation: 0.227  time: 1.8782  data_time: 0.1598  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:06:45 d2.utils.events]: [0m eta: 1:30:00  iter: 5059  total_loss: 1.389  loss_rel: 0.1662  loss_refine_obj: 0.9628  loss_mask_segmentation: 0.2229  time: 1.8779  data_time: 0.1469  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:07:22 d2.utils.events]: [0m eta: 1:29:21  iter: 5079  total_loss: 1.348  loss_rel: 0.1974  loss_refine_obj: 0.904  loss_mask_segmentation: 0.2144  time: 1.8777  data_time: 0.1378  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:07:59 d2.utils.events]: [0m eta: 1:28:45  iter: 5099  total_loss: 1.356  loss_rel: 0.1852  loss_refine_obj: 0.9823  loss_mask_segmentation: 0.2291  time: 1.8777  data_time: 0.1738  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:08:36 d2.utils.events]: [0m eta: 1:28:14  iter: 5119  total_loss: 1.401  loss_rel: 0.169  loss_refine_obj: 0.9954  loss_mask_segmentation: 0.2127  time: 1.8776  data_time: 0.1556  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:09:12 d2.utils.events]: [0m eta: 1:27:32  iter: 5139  total_loss: 1.466  loss_rel: 0.1719  loss_refine_obj: 1.03  loss_mask_segmentation: 0.225  time: 1.8774  data_time: 0.1649  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:09:49 d2.utils.events]: [0m eta: 1:26:55  iter: 5159  total_loss: 1.465  loss_rel: 0.1946  loss_refine_obj: 1.046  loss_mask_segmentation: 0.2332  time: 1.8772  data_time: 0.1685  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:10:27 d2.utils.events]: [0m eta: 1:26:17  iter: 5179  total_loss: 1.484  loss_rel: 0.194  loss_refine_obj: 1.072  loss_mask_segmentation: 0.2323  time: 1.8773  data_time: 0.1777  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:11:04 d2.utils.events]: [0m eta: 1:25:40  iter: 5199  total_loss: 1.536  loss_rel: 0.2086  loss_refine_obj: 1.076  loss_mask_segmentation: 0.2445  time: 1.8772  data_time: 0.1468  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:11:42 d2.utils.events]: [0m eta: 1:25:04  iter: 5219  total_loss: 1.493  loss_rel: 0.1521  loss_refine_obj: 1.069  loss_mask_segmentation: 0.2295  time: 1.8772  data_time: 0.1625  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:12:18 d2.utils.events]: [0m eta: 1:24:28  iter: 5239  total_loss: 1.428  loss_rel: 0.19  loss_refine_obj: 1.011  loss_mask_segmentation: 0.2251  time: 1.8770  data_time: 0.1527  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:12:56 d2.utils.events]: [0m eta: 1:23:54  iter: 5259  total_loss: 1.519  loss_rel: 0.2113  loss_refine_obj: 1.053  loss_mask_segmentation: 0.2373  time: 1.8770  data_time: 0.1609  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:13:36 d2.utils.events]: [0m eta: 1:23:26  iter: 5279  total_loss: 1.375  loss_rel: 0.1856  loss_refine_obj: 0.9504  loss_mask_segmentation: 0.2336  time: 1.8775  data_time: 0.1751  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:14:13 d2.utils.events]: [0m eta: 1:22:46  iter: 5299  total_loss: 1.545  loss_rel: 0.2136  loss_refine_obj: 1.034  loss_mask_segmentation: 0.2337  time: 1.8773  data_time: 0.1697  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:14:50 d2.utils.events]: [0m eta: 1:22:09  iter: 5319  total_loss: 1.453  loss_rel: 0.1567  loss_refine_obj: 1.061  loss_mask_segmentation: 0.2415  time: 1.8772  data_time: 0.1694  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:15:27 d2.utils.events]: [0m eta: 1:21:32  iter: 5339  total_loss: 1.365  loss_rel: 0.1807  loss_refine_obj: 0.9528  loss_mask_segmentation: 0.2084  time: 1.8771  data_time: 0.1668  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:16:04 d2.utils.events]: [0m eta: 1:20:56  iter: 5359  total_loss: 1.538  loss_rel: 0.1939  loss_refine_obj: 1.101  loss_mask_segmentation: 0.2325  time: 1.8770  data_time: 0.1643  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:16:41 d2.utils.events]: [0m eta: 1:20:16  iter: 5379  total_loss: 1.554  loss_rel: 0.2068  loss_refine_obj: 1.116  loss_mask_segmentation: 0.2303  time: 1.8769  data_time: 0.1531  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:17:18 d2.utils.events]: [0m eta: 1:19:36  iter: 5399  total_loss: 1.379  loss_rel: 0.181  loss_refine_obj: 0.962  loss_mask_segmentation: 0.2237  time: 1.8768  data_time: 0.1679  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:17:55 d2.utils.events]: [0m eta: 1:19:00  iter: 5419  total_loss: 1.517  loss_rel: 0.2353  loss_refine_obj: 1.067  loss_mask_segmentation: 0.217  time: 1.8767  data_time: 0.1558  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:18:31 d2.utils.events]: [0m eta: 1:18:26  iter: 5439  total_loss: 1.383  loss_rel: 0.2009  loss_refine_obj: 0.9861  loss_mask_segmentation: 0.2269  time: 1.8766  data_time: 0.1524  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:19:09 d2.utils.events]: [0m eta: 1:17:47  iter: 5459  total_loss: 1.392  loss_rel: 0.1961  loss_refine_obj: 0.9574  loss_mask_segmentation: 0.2291  time: 1.8766  data_time: 0.1576  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:19:46 d2.utils.events]: [0m eta: 1:17:07  iter: 5479  total_loss: 1.541  loss_rel: 0.2039  loss_refine_obj: 1.111  loss_mask_segmentation: 0.2292  time: 1.8765  data_time: 0.1577  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:20:23 d2.utils.events]: [0m eta: 1:16:32  iter: 5499  total_loss: 1.452  loss_rel: 0.2319  loss_refine_obj: 1.007  loss_mask_segmentation: 0.2307  time: 1.8764  data_time: 0.1770  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:21:00 d2.utils.events]: [0m eta: 1:15:55  iter: 5519  total_loss: 1.47  loss_rel: 0.1858  loss_refine_obj: 1.002  loss_mask_segmentation: 0.2226  time: 1.8762  data_time: 0.1472  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:21:37 d2.utils.events]: [0m eta: 1:15:24  iter: 5539  total_loss: 1.499  loss_rel: 0.1825  loss_refine_obj: 1.083  loss_mask_segmentation: 0.2223  time: 1.8761  data_time: 0.1524  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:22:14 d2.utils.events]: [0m eta: 1:14:48  iter: 5559  total_loss: 1.553  loss_rel: 0.1873  loss_refine_obj: 1.108  loss_mask_segmentation: 0.2256  time: 1.8760  data_time: 0.1629  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:22:50 d2.utils.events]: [0m eta: 1:14:11  iter: 5579  total_loss: 1.343  loss_rel: 0.1813  loss_refine_obj: 0.9309  loss_mask_segmentation: 0.2345  time: 1.8758  data_time: 0.1603  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:23:27 d2.utils.events]: [0m eta: 1:13:28  iter: 5599  total_loss: 1.377  loss_rel: 0.188  loss_refine_obj: 0.932  loss_mask_segmentation: 0.2256  time: 1.8757  data_time: 0.1612  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:24:04 d2.utils.events]: [0m eta: 1:12:51  iter: 5619  total_loss: 1.405  loss_rel: 0.1914  loss_refine_obj: 0.9741  loss_mask_segmentation: 0.2142  time: 1.8756  data_time: 0.1549  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:24:42 d2.utils.events]: [0m eta: 1:12:15  iter: 5639  total_loss: 1.377  loss_rel: 0.1947  loss_refine_obj: 0.9967  loss_mask_segmentation: 0.2286  time: 1.8757  data_time: 0.1433  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:25:19 d2.utils.events]: [0m eta: 1:11:44  iter: 5659  total_loss: 1.493  loss_rel: 0.2227  loss_refine_obj: 1.059  loss_mask_segmentation: 0.2368  time: 1.8756  data_time: 0.1536  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:25:56 d2.utils.events]: [0m eta: 1:11:01  iter: 5679  total_loss: 1.411  loss_rel: 0.1673  loss_refine_obj: 1.044  loss_mask_segmentation: 0.2311  time: 1.8754  data_time: 0.1562  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:26:31 d2.utils.events]: [0m eta: 1:10:19  iter: 5699  total_loss: 1.483  loss_rel: 0.19  loss_refine_obj: 1.008  loss_mask_segmentation: 0.2342  time: 1.8751  data_time: 0.1535  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:27:09 d2.utils.events]: [0m eta: 1:09:44  iter: 5719  total_loss: 1.451  loss_rel: 0.187  loss_refine_obj: 1.023  loss_mask_segmentation: 0.2295  time: 1.8751  data_time: 0.1645  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:27:46 d2.utils.events]: [0m eta: 1:09:08  iter: 5739  total_loss: 1.446  loss_rel: 0.2006  loss_refine_obj: 1.035  loss_mask_segmentation: 0.2171  time: 1.8749  data_time: 0.1506  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:28:22 d2.utils.events]: [0m eta: 1:08:33  iter: 5759  total_loss: 1.421  loss_rel: 0.2016  loss_refine_obj: 0.9482  loss_mask_segmentation: 0.232  time: 1.8748  data_time: 0.1424  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:28:59 d2.utils.events]: [0m eta: 1:07:56  iter: 5779  total_loss: 1.452  loss_rel: 0.2043  loss_refine_obj: 1.047  loss_mask_segmentation: 0.2154  time: 1.8746  data_time: 0.1581  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:29:35 d2.utils.events]: [0m eta: 1:07:17  iter: 5799  total_loss: 1.424  loss_rel: 0.1876  loss_refine_obj: 0.9653  loss_mask_segmentation: 0.241  time: 1.8744  data_time: 0.1485  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:30:12 d2.utils.events]: [0m eta: 1:06:38  iter: 5819  total_loss: 1.46  loss_rel: 0.168  loss_refine_obj: 0.9779  loss_mask_segmentation: 0.2194  time: 1.8743  data_time: 0.1751  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:30:49 d2.utils.events]: [0m eta: 1:06:02  iter: 5839  total_loss: 1.368  loss_rel: 0.2088  loss_refine_obj: 0.941  loss_mask_segmentation: 0.2272  time: 1.8743  data_time: 0.1921  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:31:27 d2.utils.events]: [0m eta: 1:05:29  iter: 5859  total_loss: 1.388  loss_rel: 0.1915  loss_refine_obj: 0.985  loss_mask_segmentation: 0.2291  time: 1.8743  data_time: 0.1682  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:32:04 d2.utils.events]: [0m eta: 1:04:52  iter: 5879  total_loss: 1.421  loss_rel: 0.2083  loss_refine_obj: 1.019  loss_mask_segmentation: 0.2227  time: 1.8742  data_time: 0.1598  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:32:40 d2.utils.events]: [0m eta: 1:04:14  iter: 5899  total_loss: 1.48  loss_rel: 0.1984  loss_refine_obj: 1.093  loss_mask_segmentation: 0.228  time: 1.8740  data_time: 0.1728  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:33:17 d2.utils.events]: [0m eta: 1:03:36  iter: 5919  total_loss: 1.365  loss_rel: 0.2031  loss_refine_obj: 0.9105  loss_mask_segmentation: 0.2276  time: 1.8739  data_time: 0.1360  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:33:53 d2.utils.events]: [0m eta: 1:02:59  iter: 5939  total_loss: 1.357  loss_rel: 0.1895  loss_refine_obj: 0.916  loss_mask_segmentation: 0.2167  time: 1.8737  data_time: 0.1401  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:34:30 d2.utils.events]: [0m eta: 1:02:22  iter: 5959  total_loss: 1.398  loss_rel: 0.1916  loss_refine_obj: 0.9741  loss_mask_segmentation: 0.2204  time: 1.8736  data_time: 0.1727  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:35:07 d2.utils.events]: [0m eta: 1:01:46  iter: 5979  total_loss: 1.374  loss_rel: 0.1966  loss_refine_obj: 0.9359  loss_mask_segmentation: 0.2319  time: 1.8735  data_time: 0.1359  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:35:47 fvcore.common.checkpoint]: [0mSaving checkpoint to ../output-step3-motif-short-vg/model_0005999.pth
[32m[04/17 14:36:10 d2.utils.events]: [0m eta: 1:01:11  iter: 5999  total_loss: 1.449  loss_rel: 0.2108  loss_refine_obj: 0.9849  loss_mask_segmentation: 0.228  time: 1.8738  data_time: 0.1754  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:36:47 d2.utils.events]: [0m eta: 1:00:34  iter: 6019  total_loss: 1.374  loss_rel: 0.1969  loss_refine_obj: 0.9284  loss_mask_segmentation: 0.2361  time: 1.8737  data_time: 0.1563  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:37:23 d2.utils.events]: [0m eta: 0:59:58  iter: 6039  total_loss: 1.422  loss_rel: 0.1982  loss_refine_obj: 0.9832  loss_mask_segmentation: 0.2212  time: 1.8736  data_time: 0.1626  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:38:00 d2.utils.events]: [0m eta: 0:59:22  iter: 6059  total_loss: 1.462  loss_rel: 0.2029  loss_refine_obj: 1.041  loss_mask_segmentation: 0.2341  time: 1.8735  data_time: 0.1583  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:38:37 d2.utils.events]: [0m eta: 0:58:44  iter: 6079  total_loss: 1.498  loss_rel: 0.206  loss_refine_obj: 1.05  loss_mask_segmentation: 0.2124  time: 1.8734  data_time: 0.1711  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:39:13 d2.utils.events]: [0m eta: 0:58:09  iter: 6099  total_loss: 1.392  loss_rel: 0.1903  loss_refine_obj: 0.9468  loss_mask_segmentation: 0.2357  time: 1.8732  data_time: 0.1505  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:39:51 d2.utils.events]: [0m eta: 0:57:33  iter: 6119  total_loss: 1.401  loss_rel: 0.1601  loss_refine_obj: 0.9557  loss_mask_segmentation: 0.2303  time: 1.8732  data_time: 0.1708  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:40:27 d2.utils.events]: [0m eta: 0:56:57  iter: 6139  total_loss: 1.457  loss_rel: 0.206  loss_refine_obj: 0.9983  loss_mask_segmentation: 0.2276  time: 1.8731  data_time: 0.1645  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:41:04 d2.utils.events]: [0m eta: 0:56:19  iter: 6159  total_loss: 1.45  loss_rel: 0.2205  loss_refine_obj: 1.007  loss_mask_segmentation: 0.2185  time: 1.8728  data_time: 0.1481  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:41:40 d2.utils.events]: [0m eta: 0:55:44  iter: 6179  total_loss: 1.342  loss_rel: 0.1944  loss_refine_obj: 0.9095  loss_mask_segmentation: 0.2467  time: 1.8727  data_time: 0.1717  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:42:17 d2.utils.events]: [0m eta: 0:55:05  iter: 6199  total_loss: 1.342  loss_rel: 0.1719  loss_refine_obj: 0.9264  loss_mask_segmentation: 0.2332  time: 1.8726  data_time: 0.1481  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:42:53 d2.utils.events]: [0m eta: 0:54:24  iter: 6219  total_loss: 1.351  loss_rel: 0.1753  loss_refine_obj: 0.9543  loss_mask_segmentation: 0.2282  time: 1.8724  data_time: 0.1639  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:43:30 d2.utils.events]: [0m eta: 0:53:47  iter: 6239  total_loss: 1.387  loss_rel: 0.2033  loss_refine_obj: 0.9315  loss_mask_segmentation: 0.2334  time: 1.8722  data_time: 0.1531  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:44:07 d2.utils.events]: [0m eta: 0:53:09  iter: 6259  total_loss: 1.448  loss_rel: 0.2312  loss_refine_obj: 1.008  loss_mask_segmentation: 0.2376  time: 1.8721  data_time: 0.1529  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:44:42 d2.utils.events]: [0m eta: 0:52:30  iter: 6279  total_loss: 1.388  loss_rel: 0.2196  loss_refine_obj: 0.9763  loss_mask_segmentation: 0.2332  time: 1.8719  data_time: 0.1392  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:45:19 d2.utils.events]: [0m eta: 0:51:54  iter: 6299  total_loss: 1.432  loss_rel: 0.2094  loss_refine_obj: 0.9583  loss_mask_segmentation: 0.2269  time: 1.8718  data_time: 0.1597  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:45:57 d2.utils.events]: [0m eta: 0:51:18  iter: 6319  total_loss: 1.352  loss_rel: 0.2107  loss_refine_obj: 0.9639  loss_mask_segmentation: 0.2228  time: 1.8718  data_time: 0.1596  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:46:33 d2.utils.events]: [0m eta: 0:50:41  iter: 6339  total_loss: 1.369  loss_rel: 0.1822  loss_refine_obj: 0.9624  loss_mask_segmentation: 0.2247  time: 1.8716  data_time: 0.1558  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:47:12 d2.utils.events]: [0m eta: 0:50:04  iter: 6359  total_loss: 1.382  loss_rel: 0.1968  loss_refine_obj: 0.9619  loss_mask_segmentation: 0.2343  time: 1.8718  data_time: 0.1642  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:47:48 d2.utils.events]: [0m eta: 0:49:27  iter: 6379  total_loss: 1.398  loss_rel: 0.1766  loss_refine_obj: 0.979  loss_mask_segmentation: 0.2201  time: 1.8716  data_time: 0.1587  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:48:24 d2.utils.events]: [0m eta: 0:48:50  iter: 6399  total_loss: 1.475  loss_rel: 0.1806  loss_refine_obj: 1.056  loss_mask_segmentation: 0.2175  time: 1.8714  data_time: 0.1485  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:49:01 d2.utils.events]: [0m eta: 0:48:13  iter: 6419  total_loss: 1.476  loss_rel: 0.1864  loss_refine_obj: 1.043  loss_mask_segmentation: 0.2239  time: 1.8713  data_time: 0.1560  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:49:38 d2.utils.events]: [0m eta: 0:47:37  iter: 6439  total_loss: 1.385  loss_rel: 0.1777  loss_refine_obj: 0.9653  loss_mask_segmentation: 0.2279  time: 1.8712  data_time: 0.1606  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:50:14 d2.utils.events]: [0m eta: 0:46:59  iter: 6459  total_loss: 1.47  loss_rel: 0.1829  loss_refine_obj: 1.054  loss_mask_segmentation: 0.2354  time: 1.8711  data_time: 0.1561  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:50:51 d2.utils.events]: [0m eta: 0:46:22  iter: 6479  total_loss: 1.433  loss_rel: 0.2099  loss_refine_obj: 0.9452  loss_mask_segmentation: 0.2461  time: 1.8710  data_time: 0.1826  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:51:28 d2.utils.events]: [0m eta: 0:45:45  iter: 6499  total_loss: 1.538  loss_rel: 0.216  loss_refine_obj: 1.007  loss_mask_segmentation: 0.2468  time: 1.8709  data_time: 0.1577  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:52:05 d2.utils.events]: [0m eta: 0:45:09  iter: 6519  total_loss: 1.335  loss_rel: 0.2009  loss_refine_obj: 0.9192  loss_mask_segmentation: 0.2196  time: 1.8709  data_time: 0.1760  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:52:42 d2.utils.events]: [0m eta: 0:44:32  iter: 6539  total_loss: 1.46  loss_rel: 0.1922  loss_refine_obj: 1.052  loss_mask_segmentation: 0.2196  time: 1.8708  data_time: 0.1560  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:53:20 d2.utils.events]: [0m eta: 0:43:56  iter: 6559  total_loss: 1.375  loss_rel: 0.183  loss_refine_obj: 0.9706  loss_mask_segmentation: 0.2134  time: 1.8708  data_time: 0.1595  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:53:56 d2.utils.events]: [0m eta: 0:43:19  iter: 6579  total_loss: 1.451  loss_rel: 0.1889  loss_refine_obj: 1.032  loss_mask_segmentation: 0.2325  time: 1.8707  data_time: 0.1416  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:54:34 d2.utils.events]: [0m eta: 0:42:43  iter: 6599  total_loss: 1.441  loss_rel: 0.2112  loss_refine_obj: 1.003  loss_mask_segmentation: 0.2404  time: 1.8707  data_time: 0.1541  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:55:11 d2.utils.events]: [0m eta: 0:42:06  iter: 6619  total_loss: 1.333  loss_rel: 0.2171  loss_refine_obj: 0.9489  loss_mask_segmentation: 0.2276  time: 1.8707  data_time: 0.1581  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:55:48 d2.utils.events]: [0m eta: 0:41:30  iter: 6639  total_loss: 1.435  loss_rel: 0.1811  loss_refine_obj: 0.9369  loss_mask_segmentation: 0.2315  time: 1.8705  data_time: 0.1489  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:56:25 d2.utils.events]: [0m eta: 0:40:54  iter: 6659  total_loss: 1.458  loss_rel: 0.1845  loss_refine_obj: 1.01  loss_mask_segmentation: 0.2519  time: 1.8705  data_time: 0.1594  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:57:02 d2.utils.events]: [0m eta: 0:40:17  iter: 6679  total_loss: 1.509  loss_rel: 0.2081  loss_refine_obj: 1.019  loss_mask_segmentation: 0.2242  time: 1.8704  data_time: 0.1526  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:57:41 d2.utils.events]: [0m eta: 0:39:43  iter: 6699  total_loss: 1.429  loss_rel: 0.2054  loss_refine_obj: 0.9589  loss_mask_segmentation: 0.2171  time: 1.8707  data_time: 0.1737  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:58:19 d2.utils.events]: [0m eta: 0:39:04  iter: 6719  total_loss: 1.43  loss_rel: 0.1881  loss_refine_obj: 1.008  loss_mask_segmentation: 0.2146  time: 1.8707  data_time: 0.1716  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:58:55 d2.utils.events]: [0m eta: 0:38:27  iter: 6739  total_loss: 1.354  loss_rel: 0.1921  loss_refine_obj: 0.9321  loss_mask_segmentation: 0.2384  time: 1.8705  data_time: 0.1531  lr: 0.0025  max_mem: 15054M
[32m[04/17 14:59:32 d2.utils.events]: [0m eta: 0:37:51  iter: 6759  total_loss: 1.429  loss_rel: 0.1977  loss_refine_obj: 0.9916  loss_mask_segmentation: 0.2261  time: 1.8705  data_time: 0.1636  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:00:10 d2.utils.events]: [0m eta: 0:37:17  iter: 6779  total_loss: 1.435  loss_rel: 0.2089  loss_refine_obj: 1.037  loss_mask_segmentation: 0.2204  time: 1.8705  data_time: 0.1516  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:00:46 d2.utils.events]: [0m eta: 0:36:44  iter: 6799  total_loss: 1.429  loss_rel: 0.1831  loss_refine_obj: 1.023  loss_mask_segmentation: 0.2242  time: 1.8704  data_time: 0.1676  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:01:24 d2.utils.events]: [0m eta: 0:36:08  iter: 6819  total_loss: 1.317  loss_rel: 0.2011  loss_refine_obj: 0.8928  loss_mask_segmentation: 0.2321  time: 1.8704  data_time: 0.1623  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:02:00 d2.utils.events]: [0m eta: 0:35:31  iter: 6839  total_loss: 1.44  loss_rel: 0.2169  loss_refine_obj: 0.9412  loss_mask_segmentation: 0.2247  time: 1.8703  data_time: 0.1534  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:02:37 d2.utils.events]: [0m eta: 0:34:54  iter: 6859  total_loss: 1.49  loss_rel: 0.1965  loss_refine_obj: 1.035  loss_mask_segmentation: 0.2269  time: 1.8702  data_time: 0.1569  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:03:14 d2.utils.events]: [0m eta: 0:34:18  iter: 6879  total_loss: 1.445  loss_rel: 0.1964  loss_refine_obj: 1.004  loss_mask_segmentation: 0.2409  time: 1.8702  data_time: 0.1583  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:03:52 d2.utils.events]: [0m eta: 0:33:42  iter: 6899  total_loss: 1.359  loss_rel: 0.1887  loss_refine_obj: 0.96  loss_mask_segmentation: 0.2151  time: 1.8702  data_time: 0.1601  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:04:29 d2.utils.events]: [0m eta: 0:33:05  iter: 6919  total_loss: 1.362  loss_rel: 0.1764  loss_refine_obj: 0.9622  loss_mask_segmentation: 0.2263  time: 1.8701  data_time: 0.1631  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:05:07 d2.utils.events]: [0m eta: 0:32:28  iter: 6939  total_loss: 1.494  loss_rel: 0.2083  loss_refine_obj: 1.035  loss_mask_segmentation: 0.2377  time: 1.8702  data_time: 0.1643  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:05:45 d2.utils.events]: [0m eta: 0:31:52  iter: 6959  total_loss: 1.469  loss_rel: 0.2065  loss_refine_obj: 1.01  loss_mask_segmentation: 0.2098  time: 1.8703  data_time: 0.1984  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:06:22 d2.utils.events]: [0m eta: 0:31:16  iter: 6979  total_loss: 1.437  loss_rel: 0.1969  loss_refine_obj: 1.028  loss_mask_segmentation: 0.223  time: 1.8702  data_time: 0.1756  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:07:00 d2.utils.events]: [0m eta: 0:30:41  iter: 6999  total_loss: 1.533  loss_rel: 0.2337  loss_refine_obj: 1.009  loss_mask_segmentation: 0.2303  time: 1.8704  data_time: 0.1837  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:07:38 d2.utils.events]: [0m eta: 0:30:05  iter: 7019  total_loss: 1.374  loss_rel: 0.1953  loss_refine_obj: 0.9445  loss_mask_segmentation: 0.2234  time: 1.8704  data_time: 0.1752  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:08:16 d2.utils.events]: [0m eta: 0:29:29  iter: 7039  total_loss: 1.421  loss_rel: 0.231  loss_refine_obj: 0.9485  loss_mask_segmentation: 0.2177  time: 1.8705  data_time: 0.1818  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:08:54 d2.utils.events]: [0m eta: 0:28:54  iter: 7059  total_loss: 1.422  loss_rel: 0.224  loss_refine_obj: 0.919  loss_mask_segmentation: 0.239  time: 1.8706  data_time: 0.1830  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:09:33 d2.utils.events]: [0m eta: 0:28:16  iter: 7079  total_loss: 1.474  loss_rel: 0.2447  loss_refine_obj: 1.053  loss_mask_segmentation: 0.2333  time: 1.8708  data_time: 0.1648  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:10:11 d2.utils.events]: [0m eta: 0:27:40  iter: 7099  total_loss: 1.491  loss_rel: 0.1898  loss_refine_obj: 1.068  loss_mask_segmentation: 0.229  time: 1.8709  data_time: 0.1818  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:10:49 d2.utils.events]: [0m eta: 0:27:03  iter: 7119  total_loss: 1.362  loss_rel: 0.1949  loss_refine_obj: 0.9054  loss_mask_segmentation: 0.2242  time: 1.8710  data_time: 0.1616  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:11:27 d2.utils.events]: [0m eta: 0:26:27  iter: 7139  total_loss: 1.481  loss_rel: 0.1983  loss_refine_obj: 1.057  loss_mask_segmentation: 0.2303  time: 1.8710  data_time: 0.1688  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:12:04 d2.utils.events]: [0m eta: 0:25:51  iter: 7159  total_loss: 1.463  loss_rel: 0.1695  loss_refine_obj: 1.065  loss_mask_segmentation: 0.2399  time: 1.8709  data_time: 0.1552  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:12:42 d2.utils.events]: [0m eta: 0:25:14  iter: 7179  total_loss: 1.435  loss_rel: 0.1894  loss_refine_obj: 1.05  loss_mask_segmentation: 0.2235  time: 1.8710  data_time: 0.1577  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:13:19 d2.utils.events]: [0m eta: 0:24:38  iter: 7199  total_loss: 1.471  loss_rel: 0.2025  loss_refine_obj: 0.9981  loss_mask_segmentation: 0.2245  time: 1.8710  data_time: 0.1771  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:13:56 d2.utils.events]: [0m eta: 0:24:02  iter: 7219  total_loss: 1.431  loss_rel: 0.2032  loss_refine_obj: 0.9901  loss_mask_segmentation: 0.2264  time: 1.8710  data_time: 0.1656  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:14:34 d2.utils.events]: [0m eta: 0:23:26  iter: 7239  total_loss: 1.403  loss_rel: 0.2138  loss_refine_obj: 0.9792  loss_mask_segmentation: 0.2331  time: 1.8710  data_time: 0.1605  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:15:12 d2.utils.events]: [0m eta: 0:22:49  iter: 7259  total_loss: 1.362  loss_rel: 0.1987  loss_refine_obj: 0.985  loss_mask_segmentation: 0.223  time: 1.8710  data_time: 0.1677  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:15:49 d2.utils.events]: [0m eta: 0:22:14  iter: 7279  total_loss: 1.39  loss_rel: 0.178  loss_refine_obj: 1.001  loss_mask_segmentation: 0.2216  time: 1.8710  data_time: 0.1733  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:16:27 d2.utils.events]: [0m eta: 0:21:39  iter: 7299  total_loss: 1.379  loss_rel: 0.206  loss_refine_obj: 0.9664  loss_mask_segmentation: 0.2214  time: 1.8711  data_time: 0.1724  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:17:05 d2.utils.events]: [0m eta: 0:21:02  iter: 7319  total_loss: 1.37  loss_rel: 0.1756  loss_refine_obj: 0.9786  loss_mask_segmentation: 0.229  time: 1.8712  data_time: 0.1673  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:17:42 d2.utils.events]: [0m eta: 0:20:26  iter: 7339  total_loss: 1.411  loss_rel: 0.2065  loss_refine_obj: 0.9259  loss_mask_segmentation: 0.2168  time: 1.8711  data_time: 0.1463  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:18:20 d2.utils.events]: [0m eta: 0:19:49  iter: 7359  total_loss: 1.349  loss_rel: 0.1919  loss_refine_obj: 0.9445  loss_mask_segmentation: 0.2142  time: 1.8711  data_time: 0.1764  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:18:58 d2.utils.events]: [0m eta: 0:19:13  iter: 7379  total_loss: 1.395  loss_rel: 0.2011  loss_refine_obj: 0.9448  loss_mask_segmentation: 0.2131  time: 1.8712  data_time: 0.1835  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:19:36 d2.utils.events]: [0m eta: 0:18:37  iter: 7399  total_loss: 1.398  loss_rel: 0.2283  loss_refine_obj: 0.9522  loss_mask_segmentation: 0.2164  time: 1.8712  data_time: 0.1577  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:20:13 d2.utils.events]: [0m eta: 0:18:00  iter: 7419  total_loss: 1.418  loss_rel: 0.1861  loss_refine_obj: 0.9827  loss_mask_segmentation: 0.2406  time: 1.8712  data_time: 0.1497  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:20:53 d2.utils.events]: [0m eta: 0:17:24  iter: 7439  total_loss: 1.439  loss_rel: 0.1944  loss_refine_obj: 1.036  loss_mask_segmentation: 0.231  time: 1.8715  data_time: 0.1663  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:21:30 d2.utils.events]: [0m eta: 0:16:47  iter: 7459  total_loss: 1.415  loss_rel: 0.1649  loss_refine_obj: 1.026  loss_mask_segmentation: 0.2326  time: 1.8715  data_time: 0.1643  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:22:08 d2.utils.events]: [0m eta: 0:16:09  iter: 7479  total_loss: 1.46  loss_rel: 0.1945  loss_refine_obj: 1.029  loss_mask_segmentation: 0.2322  time: 1.8716  data_time: 0.1667  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:22:46 d2.utils.events]: [0m eta: 0:15:33  iter: 7499  total_loss: 1.45  loss_rel: 0.2023  loss_refine_obj: 1.003  loss_mask_segmentation: 0.2361  time: 1.8716  data_time: 0.1581  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:23:23 d2.utils.events]: [0m eta: 0:14:55  iter: 7519  total_loss: 1.492  loss_rel: 0.1791  loss_refine_obj: 1.037  loss_mask_segmentation: 0.2148  time: 1.8715  data_time: 0.1426  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:24:01 d2.utils.events]: [0m eta: 0:14:19  iter: 7539  total_loss: 1.401  loss_rel: 0.1854  loss_refine_obj: 0.9627  loss_mask_segmentation: 0.234  time: 1.8716  data_time: 0.1718  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:24:36 d2.utils.events]: [0m eta: 0:13:41  iter: 7559  total_loss: 1.455  loss_rel: 0.1871  loss_refine_obj: 1.024  loss_mask_segmentation: 0.2217  time: 1.8714  data_time: 0.1430  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:25:14 d2.utils.events]: [0m eta: 0:13:04  iter: 7579  total_loss: 1.526  loss_rel: 0.1815  loss_refine_obj: 1.128  loss_mask_segmentation: 0.2289  time: 1.8713  data_time: 0.1763  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:25:52 d2.utils.events]: [0m eta: 0:12:27  iter: 7599  total_loss: 1.529  loss_rel: 0.2238  loss_refine_obj: 1.032  loss_mask_segmentation: 0.2406  time: 1.8715  data_time: 0.2199  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:26:31 d2.utils.events]: [0m eta: 0:11:50  iter: 7619  total_loss: 1.407  loss_rel: 0.1904  loss_refine_obj: 0.988  loss_mask_segmentation: 0.232  time: 1.8716  data_time: 0.2200  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:27:08 d2.utils.events]: [0m eta: 0:11:13  iter: 7639  total_loss: 1.472  loss_rel: 0.2274  loss_refine_obj: 0.9652  loss_mask_segmentation: 0.2259  time: 1.8716  data_time: 0.1781  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:27:46 d2.utils.events]: [0m eta: 0:10:35  iter: 7659  total_loss: 1.453  loss_rel: 0.2228  loss_refine_obj: 1.014  loss_mask_segmentation: 0.2239  time: 1.8717  data_time: 0.1894  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:28:25 d2.utils.events]: [0m eta: 0:09:59  iter: 7679  total_loss: 1.444  loss_rel: 0.2177  loss_refine_obj: 0.9676  loss_mask_segmentation: 0.2363  time: 1.8718  data_time: 0.1909  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:29:02 d2.utils.events]: [0m eta: 0:09:21  iter: 7699  total_loss: 1.537  loss_rel: 0.2013  loss_refine_obj: 1.075  loss_mask_segmentation: 0.2355  time: 1.8717  data_time: 0.1495  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:29:38 d2.utils.events]: [0m eta: 0:08:43  iter: 7719  total_loss: 1.324  loss_rel: 0.1961  loss_refine_obj: 0.8954  loss_mask_segmentation: 0.2237  time: 1.8716  data_time: 0.1560  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:30:16 d2.utils.events]: [0m eta: 0:08:06  iter: 7739  total_loss: 1.391  loss_rel: 0.1679  loss_refine_obj: 1.004  loss_mask_segmentation: 0.2172  time: 1.8717  data_time: 0.1685  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:30:53 d2.utils.events]: [0m eta: 0:07:29  iter: 7759  total_loss: 1.459  loss_rel: 0.166  loss_refine_obj: 1.085  loss_mask_segmentation: 0.2385  time: 1.8716  data_time: 0.1727  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:31:30 d2.utils.events]: [0m eta: 0:06:51  iter: 7779  total_loss: 1.43  loss_rel: 0.1802  loss_refine_obj: 0.9833  loss_mask_segmentation: 0.2162  time: 1.8715  data_time: 0.1559  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:32:10 d2.utils.events]: [0m eta: 0:06:14  iter: 7799  total_loss: 1.305  loss_rel: 0.171  loss_refine_obj: 0.8967  loss_mask_segmentation: 0.2234  time: 1.8719  data_time: 0.1794  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:32:47 d2.utils.events]: [0m eta: 0:05:36  iter: 7819  total_loss: 1.403  loss_rel: 0.1969  loss_refine_obj: 0.9443  loss_mask_segmentation: 0.226  time: 1.8719  data_time: 0.1464  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:33:26 d2.utils.events]: [0m eta: 0:04:59  iter: 7839  total_loss: 1.325  loss_rel: 0.1727  loss_refine_obj: 0.9253  loss_mask_segmentation: 0.2313  time: 1.8720  data_time: 0.1706  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:34:03 d2.utils.events]: [0m eta: 0:04:22  iter: 7859  total_loss: 1.437  loss_rel: 0.1959  loss_refine_obj: 1.036  loss_mask_segmentation: 0.2019  time: 1.8719  data_time: 0.1619  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:34:40 d2.utils.events]: [0m eta: 0:03:45  iter: 7879  total_loss: 1.37  loss_rel: 0.194  loss_refine_obj: 0.9623  loss_mask_segmentation: 0.2156  time: 1.8720  data_time: 0.1578  lr: 0.0025  max_mem: 15054M
[32m[04/17 15:35:19 d2.utils.events]: [0m eta: 0:03:07  iter: 7899  total_loss: 1.398  loss_rel: 0.1694  loss_refine_obj: 1.002  loss_mask_segmentation: 0.2235  time: 1.8721  data_time: 0.1947  lr: 0.0025  max_mem: 15458M
[32m[04/17 15:35:56 d2.utils.events]: [0m eta: 0:02:30  iter: 7919  total_loss: 1.332  loss_rel: 0.1725  loss_refine_obj: 0.9159  loss_mask_segmentation: 0.2343  time: 1.8721  data_time: 0.1688  lr: 0.0025  max_mem: 15458M
[32m[04/17 15:36:33 d2.utils.events]: [0m eta: 0:01:52  iter: 7939  total_loss: 1.407  loss_rel: 0.1941  loss_refine_obj: 0.9671  loss_mask_segmentation: 0.2369  time: 1.8720  data_time: 0.1587  lr: 0.0025  max_mem: 15458M
[32m[04/17 15:37:10 d2.utils.events]: [0m eta: 0:01:14  iter: 7959  total_loss: 1.448  loss_rel: 0.2112  loss_refine_obj: 0.987  loss_mask_segmentation: 0.2303  time: 1.8720  data_time: 0.1610  lr: 0.0025  max_mem: 15458M
[32m[04/17 15:37:49 d2.utils.events]: [0m eta: 0:00:37  iter: 7979  total_loss: 1.45  loss_rel: 0.2047  loss_refine_obj: 0.9818  loss_mask_segmentation: 0.2418  time: 1.8721  data_time: 0.1487  lr: 0.0025  max_mem: 15458M
[32m[04/17 15:38:28 d2.data.datasets.coco]: [0mLoaded 5000 images in COCO format from ../datasets-real/coco/annotations/instances_val2017.json
[32m[04/17 15:38:28 d2.data.build]: [0mDistribution of instances among all 80 categories:
[36m|   category    | #instances   |   category   | #instances   |   category    | #instances   |
|:-------------:|:-------------|:------------:|:-------------|:-------------:|:-------------|
|    person     | 10777        |   bicycle    | 314          |      car      | 1918         |
|  motorcycle   | 367          |   airplane   | 143          |      bus      | 283          |
|     train     | 190          |    truck     | 414          |     boat      | 424          |
| traffic light | 634          | fire hydrant | 101          |   stop sign   | 75           |
| parking meter | 60           |    bench     | 411          |     bird      | 427          |
|      cat      | 202          |     dog      | 218          |     horse     | 272          |
|     sheep     | 354          |     cow      | 372          |   elephant    | 252          |
|     bear      | 71           |    zebra     | 266          |    giraffe    | 232          |
|   backpack    | 371          |   umbrella   | 407          |    handbag    | 540          |
|      tie      | 252          |   suitcase   | 299          |    frisbee    | 115          |
|     skis      | 241          |  snowboard   | 69           |  sports ball  | 260          |
|     kite      | 327          | baseball bat | 145          | baseball gl.. | 148          |
|  skateboard   | 179          |  surfboard   | 267          | tennis racket | 225          |
|    bottle     | 1013         |  wine glass  | 341          |      cup      | 895          |
|     fork      | 215          |    knife     | 325          |     spoon     | 253          |
|     bowl      | 623          |    banana    | 370          |     apple     | 236          |
|   sandwich    | 177          |    orange    | 285          |   broccoli    | 312          |
|    carrot     | 365          |   hot dog    | 125          |     pizza     | 284          |
|     donut     | 328          |     cake     | 310          |     chair     | 1771         |
|     couch     | 261          | potted plant | 342          |      bed      | 163          |
| dining table  | 695          |    toilet    | 179          |      tv       | 288          |
|    laptop     | 231          |    mouse     | 106          |    remote     | 283          |
|   keyboard    | 153          |  cell phone  | 262          |   microwave   | 55           |
|     oven      | 143          |   toaster    | 9            |     sink      | 225          |
| refrigerator  | 126          |     book     | 1129         |     clock     | 267          |
|     vase      | 274          |   scissors   | 36           |  teddy bear   | 190          |
|  hair drier   | 11           |  toothbrush  | 57           |               |              |
|     total     | 36335        |              |              |               |              |[0m
[32m[04/17 15:38:28 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[32m[04/17 15:38:28 d2.data.common]: [0mSerializing 5000 elements to byte tensors and concatenating them all ...
[32m[04/17 15:38:29 d2.data.common]: [0mSerialized dataset takes 19.14 MiB
[5m[31mWARNING[0m [32m[04/17 15:38:29 d2.evaluation.coco_evaluation]: [0mCOCO Evaluator instantiated using config, this is deprecated behavior. Please pass in explicit arguments instead.
[32m[04/17 15:49:46 d2.evaluation.coco_evaluation]: [0mPreparing results for COCO format ...
[32m[04/17 15:49:46 d2.evaluation.coco_evaluation]: [0mSaving results to ../output-step3-motif-short-vg/coco_instances_results.json
[32m[04/17 15:49:47 d2.evaluation.coco_evaluation]: [0mEvaluating predictions with unofficial COCO API...
Loading and preparing results...
DONE (t=0.11s)
creating index...
index created!
[32m[04/17 15:49:47 d2.evaluation.fast_eval_api]: [0mEvaluate annotation type *bbox*
[32m[04/17 15:49:59 d2.evaluation.fast_eval_api]: [0mCOCOeval_opt.evaluate() finished in 12.09 seconds.
[32m[04/17 15:50:00 d2.evaluation.fast_eval_api]: [0mAccumulating evaluation results...
[32m[04/17 15:50:01 d2.evaluation.fast_eval_api]: [0mCOCOeval_opt.accumulate() finished in 1.34 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.427
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.630
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.470
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.253
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.468
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.555
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.342
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.529
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.547
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.335
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.592
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.703
[32m[04/17 15:50:01 d2.evaluation.coco_evaluation]: [0mEvaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 42.691 | 62.994 | 47.039 | 25.305 | 46.849 | 55.509 |
[32m[04/17 15:50:01 d2.evaluation.coco_evaluation]: [0mPer-category bbox AP: 
| category      | AP     | category     | AP     | category       | AP     |
|:--------------|:-------|:-------------|:-------|:---------------|:-------|
| person        | 56.509 | bicycle      | 33.831 | car            | 46.369 |
| motorcycle    | 45.454 | airplane     | 66.509 | bus            | 66.310 |
| train         | 67.237 | truck        | 36.676 | boat           | 29.993 |
| traffic light | 27.935 | fire hydrant | 69.086 | stop sign      | 65.840 |
| parking meter | 47.390 | bench        | 27.667 | bird           | 37.850 |
| cat           | 68.779 | dog          | 63.760 | horse          | 60.263 |
| sheep         | 54.101 | cow          | 57.946 | elephant       | 64.506 |
| bear          | 71.520 | zebra        | 67.030 | giraffe        | 67.256 |
| backpack      | 16.172 | umbrella     | 42.221 | handbag        | 15.917 |
| tie           | 35.425 | suitcase     | 38.394 | frisbee        | 62.598 |
| skis          | 23.600 | snowboard    | 40.466 | sports ball    | 48.016 |
| kite          | 41.886 | baseball bat | 30.795 | baseball glove | 38.932 |
| skateboard    | 53.797 | surfboard    | 41.787 | tennis racket  | 50.497 |
| bottle        | 41.277 | wine glass   | 39.228 | cup            | 44.992 |
| fork          | 37.861 | knife        | 18.750 | spoon          | 21.591 |
| bowl          | 43.898 | banana       | 24.094 | apple          | 17.857 |
| sandwich      | 34.474 | orange       | 32.577 | broccoli       | 24.350 |
| carrot        | 21.989 | hot dog      | 33.617 | pizza          | 52.210 |
| donut         | 44.497 | cake         | 36.214 | chair          | 30.095 |
| couch         | 42.537 | potted plant | 29.634 | bed            | 43.120 |
| dining table  | 30.058 | toilet       | 60.830 | tv             | 55.632 |
| laptop        | 64.255 | mouse        | 59.559 | remote         | 32.745 |
| keyboard      | 50.321 | cell phone   | 36.843 | microwave      | 57.640 |
| oven          | 33.332 | toaster      | 35.444 | sink           | 39.221 |
| refrigerator  | 52.932 | book         | 14.574 | clock          | 50.567 |
| vase          | 39.353 | scissors     | 26.570 | teddy bear     | 48.492 |
| hair drier    | 1.164  | toothbrush   | 30.525 |                |        |
Loading and preparing results...
DONE (t=1.46s)
creating index...
index created!
[32m[04/17 15:50:05 d2.evaluation.fast_eval_api]: [0mEvaluate annotation type *segm*
[32m[04/17 15:50:21 d2.evaluation.fast_eval_api]: [0mCOCOeval_opt.evaluate() finished in 16.56 seconds.
[32m[04/17 15:50:22 d2.evaluation.fast_eval_api]: [0mAccumulating evaluation results...
[32m[04/17 15:50:23 d2.evaluation.fast_eval_api]: [0mCOCOeval_opt.accumulate() finished in 1.33 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.388
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.603
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.421
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.193
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.420
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.556
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.318
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.487
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.502
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.293
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.544
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.662
[32m[04/17 15:50:24 d2.evaluation.coco_evaluation]: [0mEvaluation results for segm: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 38.751 | 60.289 | 42.057 | 19.350 | 41.983 | 55.648 |
[32m[04/17 15:50:24 d2.evaluation.coco_evaluation]: [0mPer-category segm AP: 
| category      | AP     | category     | AP     | category       | AP     |
|:--------------|:-------|:-------------|:-------|:---------------|:-------|
| person        | 49.057 | bicycle      | 20.604 | car            | 43.412 |
| motorcycle    | 35.450 | airplane     | 51.437 | bus            | 65.149 |
| train         | 66.333 | truck        | 37.314 | boat           | 26.962 |
| traffic light | 27.518 | fire hydrant | 64.950 | stop sign      | 66.447 |
| parking meter | 49.216 | bench        | 19.952 | bird           | 32.620 |
| cat           | 68.586 | dog          | 61.776 | horse          | 44.145 |
| sheep         | 47.099 | cow          | 49.953 | elephant       | 58.979 |
| bear          | 69.471 | zebra        | 58.058 | giraffe        | 51.439 |
| backpack      | 17.005 | umbrella     | 48.126 | handbag        | 15.538 |
| tie           | 34.125 | suitcase     | 42.011 | frisbee        | 62.096 |
| skis          | 3.831  | snowboard    | 23.829 | sports ball    | 48.796 |
| kite          | 31.290 | baseball bat | 25.348 | baseball glove | 42.179 |
| skateboard    | 36.756 | surfboard    | 34.901 | tennis racket  | 54.892 |
| bottle        | 39.796 | wine glass   | 34.426 | cup            | 45.292 |
| fork          | 20.200 | knife        | 13.632 | spoon          | 13.943 |
| bowl          | 40.037 | banana       | 20.566 | apple          | 17.151 |
| sandwich      | 35.460 | orange       | 31.948 | broccoli       | 23.009 |
| carrot        | 19.873 | hot dog      | 28.294 | pizza          | 51.372 |
| donut         | 45.322 | cake         | 37.286 | chair          | 20.454 |
| couch         | 36.019 | potted plant | 24.194 | bed            | 34.571 |
| dining table  | 17.297 | toilet       | 59.460 | tv             | 57.275 |
| laptop        | 63.096 | mouse        | 60.613 | remote         | 32.242 |
| keyboard      | 51.260 | cell phone   | 36.985 | microwave      | 57.902 |
| oven          | 31.691 | toaster      | 35.951 | sink           | 36.785 |
| refrigerator  | 53.807 | book         | 10.353 | clock          | 51.558 |
| vase          | 38.390 | scissors     | 19.957 | teddy bear     | 46.362 |
| hair drier    | 0.642  | toothbrush   | 18.934 |                |        |
[32m[04/17 15:50:26 d2.evaluation.testing]: [0mcopypaste: Task: bbox
[32m[04/17 15:50:26 d2.evaluation.testing]: [0mcopypaste: AP,AP50,AP75,APs,APm,APl
[32m[04/17 15:50:26 d2.evaluation.testing]: [0mcopypaste: 42.6905,62.9937,47.0394,25.3049,46.8493,55.5094
[32m[04/17 15:50:26 d2.evaluation.testing]: [0mcopypaste: Task: segm
[32m[04/17 15:50:26 d2.evaluation.testing]: [0mcopypaste: AP,AP50,AP75,APs,APm,APl
[32m[04/17 15:50:26 d2.evaluation.testing]: [0mcopypaste: 38.7507,60.2889,42.0569,19.3496,41.9828,55.6477
[32m[04/17 15:50:26 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[32m[04/17 15:50:27 d2.data.build]: [0mDistribution of instances among all 150 categories:
[36m|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
|  airplane  | 460          |   animal   | 897          |    arm     | 3387         |
|    bag     | 1906         |   banana   | 1352         |   basket   | 645          |
|   beach    | 1090         |    bear    | 1036         |    bed     | 929          |
|   bench    | 1542         |    bike    | 1445         |    bird    | 1261         |
|   board    | 1376         |    boat    | 1407         |    book    | 1105         |
|    boot    | 749          |   bottle   | 1679         |    bowl    | 1303         |
|    box     | 1436         |    boy     | 2110         |   branch   | 1766         |
|  building  | 7373         |    bus     | 1412         |  cabinet   | 1011         |
|    cap     | 1073         |    car     | 4150         |    cat     | 1188         |
|   chair    | 2893         |   child    | 895          |   clock    | 1327         |
|    coat    | 1094         |  counter   | 1159         |    cow     | 1192         |
|    cup     | 1087         |  curtain   | 763          |    desk    | 667          |
|    dog     | 1406         |    door    | 3383         |   drawer   | 618          |
|    ear     | 3770         |  elephant  | 1353         |   engine   | 757          |
|    eye     | 1965         |    face    | 2462         |   fence    | 3079         |
|   finger   | 1034         |    flag    | 903          |   flower   | 2299         |
|    food    | 1781         |    fork    | 649          |   fruit    | 660          |
|  giraffe   | 1562         |    girl    | 1792         |   glass    | 2983         |
|   glove    | 1228         |    guy     | 544          |    hair    | 4915         |
|    hand    | 5566         |   handle   | 1931         |    hat     | 2435         |
|    head    | 7112         |   helmet   | 1792         |    hill    | 1045         |
|   horse    | 1590         |   house    | 1113         |   jacket   | 2959         |
|    jean    | 1467         |    kid     | 564          |    kite    | 995          |
|    lady    | 657          |    lamp    | 942          |   laptop   | 927          |
|    leaf    | 3971         |    leg     | 7752         |   letter   | 2399         |
|   light    | 3604         |    logo    | 1267         |    man     | 16310        |
|    men     | 485          | motorcycle | 1088         |  mountain  | 1064         |
|   mouth    | 1139         |    neck    | 1379         |    nose    | 1892         |
|   number   | 1077         |   orange   | 749          |    pant    | 3834         |
|   paper    | 1119         |    paw     | 883          |   people   | 3751         |
|   person   | 12808        |   phone    | 839          |   pillow   | 1468         |
|   pizza    | 1000         |   plane    | 1641         |   plant    | 1714         |
|   plate    | 3203         |   player   | 1314         |    pole    | 5765         |
|    post    | 1596         |    pot     | 679          |   racket   | 840          |
|  railing   | 694          |    rock    | 2095         |    roof    | 1534         |
|    room    | 633          |   screen   | 676          |    seat    | 1076         |
|   sheep    | 1201         |   shelf    | 1477         |   shirt    | 9368         |
|    shoe    | 3725         |   short    | 2229         |  sidewalk  | 2263         |
|    sign    | 6306         |    sink    | 767          | skateboard | 1190         |
|    ski     | 1063         |   skier    | 590          |  sneaker   | 658          |
|    snow    | 2994         |    sock    | 935          |   stand    | 762          |
|   street   | 3007         | surfboard  | 1285         |   table    | 5216         |
|    tail    | 2589         |    tie     | 837          |    tile    | 1841         |
|    tire    | 1727         |   toilet   | 571          |   towel    | 807          |
|   tower    | 688          |   track    | 2287         |   train    | 1932         |
|    tree    | 12679        |   truck    | 1153         |   trunk    | 1386         |
|  umbrella  | 1838         |    vase    | 841          | vegetable  | 646          |
|  vehicle   | 858          |    wave    | 1710         |   wheel    | 2840         |
|   window   | 11751        | windshield | 866          |    wing    | 1400         |
|    wire    | 1030         |   woman    | 7212         |   zebra    | 1304         |
|            |              |            |              |            |              |
|   total    | 325570       |            |              |            |              |[0m
[32m[04/17 15:50:27 d2.data.common]: [0mSerializing 26446 elements to byte tensors and concatenating them all ...
[32m[04/17 15:50:30 d2.data.common]: [0mSerialized dataset takes 69.66 MiB
[32m[04/17 15:50:30 detectron2]: [0mFollowing metrics will be use for evaluation
[32m[04/17 15:50:30 detectron2]: [0m('SGRecall', 'SGNoGraphConstraintRecall', 'SGZeroShotRecall', 'SGPairAccuracy', 'SGMeanRecall')
[5m[31mWARNING[0m [32m[04/17 15:50:30 d2.evaluation.coco_evaluation]: [0mCOCO Evaluator instantiated using config, this is deprecated behavior. Please pass in explicit arguments instead.
[32m[04/17 15:50:30 d2.evaluation.coco_evaluation]: [0mTrying to convert 'VG_test' to COCO format ...
[32m[04/17 15:50:30 d2.data.datasets.coco]: [0mConverting annotations of dataset 'VG_test' to COCO format ...)
[32m[04/17 15:50:30 d2.data.datasets.coco]: [0mConverting dataset dicts into COCO format
[32m[04/17 15:51:11 d2.data.datasets.coco]: [0mConversion finished, #images: 26446, #annotations: 325570
[32m[04/17 15:51:11 d2.data.datasets.coco]: [0mCaching COCO format annotations at '../output-step3-motif-short-vg/inference/VG_test_coco_format.json' ...
[32m[04/17 15:51:21 detectron2]: [0mLoading zero shot triplets
[4m[5m[31mERROR[0m [32m[04/17 15:51:21 d2.engine.train_loop]: [0mException during training:
Traceback (most recent call last):
  File "/home/r09521612/.local/lib/python3.8/site-packages/detectron2/engine/train_loop.py", line 150, in train
    self.after_step()
  File "/home/r09521612/.local/lib/python3.8/site-packages/detectron2/engine/train_loop.py", line 180, in after_step
    h.after_step()
  File "/home/r09521612/segmentationsg/segmentationsg/checkpoint/detection_checkpoint.py", line 37, in after_step
    results = self._do_eval()
  File "/home/r09521612/segmentationsg/segmentationsg/checkpoint/detection_checkpoint.py", line 29, in _do_eval
    results = self.eval._func()
  File "/home/r09521612/segmentationsg/segmentationsg/engine/sg_trainer.py", line 239, in test_and_save_results
    self._last_eval_results = self.test(self.cfg, self.model)
  File "/home/r09521612/segmentationsg/segmentationsg/engine/sg_trainer.py", line 320, in test
    evaluator = SceneGraphEvaluator(dataset_name, cfg, True, output_folder)
  File "/home/r09521612/segmentationsg/segmentationsg/evaluation/sg_evaluation.py", line 86, in __init__
    self._zero_shot_triplets = self._get_zero_shot_triplets() - 1
  File "/home/r09521612/segmentationsg/segmentationsg/evaluation/sg_evaluation.py", line 94, in _get_zero_shot_triplets
    return torch.load(self.cfg.MODEL.ROI_SCENEGRAPH_HEAD.ZERO_SHOT_TRIPLETS , map_location=torch.device("cpu")).long().numpy()
  File "/home/r09521612/.local/lib/python3.8/site-packages/torch/serialization.py", line 594, in load
    with _open_file_like(f, 'rb') as opened_file:
  File "/home/r09521612/.local/lib/python3.8/site-packages/torch/serialization.py", line 230, in _open_file_like
    return _open_file(name_or_buffer, mode)
  File "/home/r09521612/.local/lib/python3.8/site-packages/torch/serialization.py", line 211, in __init__
    super(_open_file, self).__init__(open(name, mode))
FileNotFoundError: [Errno 2] No such file or directory: '../evaluation/datasets/vg/zeroshot_triplet.pytorch'
[32m[04/17 15:51:22 d2.engine.hooks]: [0mOverall training speed: 7997 iterations in 4:09:33 (1.8724 s / it)
[32m[04/17 15:51:22 d2.engine.hooks]: [0mTotal training time: 4:23:56 (0:14:22 on hooks)
[32m[04/17 15:51:22 d2.utils.events]: [0m eta: 0:00:00  iter: 7999  total_loss: 1.414  loss_rel: 0.1901  loss_refine_obj: 1.007  loss_mask_segmentation: 0.2257  time: 1.8722  data_time: 0.1703  lr: 0.0025  max_mem: 15458M

============================ Messages from Goddess ============================
 * Job ended at     : Sun Apr 17 15:51:35 CST 2022
===============================================================================

