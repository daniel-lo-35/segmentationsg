[04/17 11:31:03] detectron2 INFO: Rank of current process: 0. World size: 1
[04/17 11:31:06] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Sep 23 2021, 22:44:21) [GCC 8.4.1 20200928 (Red Hat 8.4.1-1.0.1)]
numpy                   1.19.0
detectron2              0.6 @/home/r09521612/.local/lib/python3.8/site-packages/detectron2
Compiler                GCC 7.3
CUDA compiler           CUDA 10.2
detectron2 arch flags   3.7, 5.0, 5.2, 6.0, 6.1, 7.0, 7.5
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.10.0+cu102 @/home/r09521612/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   Tesla V100-SXM2-32GB (arch=7.0)
Driver version          460.73.01
CUDA_HOME               /opt/cuda-11.2
Pillow                  8.3.2
torchvision             0.11.1+cu102 @/home/r09521612/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20211023
iopath                  0.1.9
cv2                     4.5.3
----------------------  ----------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[04/17 11:31:06] detectron2 INFO: Command line arguments: Namespace(config_file='../configs/sg_dev_masktransfer.yaml', dist_url='tcp://127.0.0.1:17551', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['DATALOADER.NUM_WORKERS', '2', 'MODEL.WEIGHTS', '../output-step1-vg/resnet_pretrain_weights.pth', 'OUTPUT_DIR', '../output-step3-vctree-short-vg', 'DATASETS.VISUAL_GENOME.IMAGES', '../datasets-real/vg/images', 'DATASETS.VISUAL_GENOME.MAPPING_DICTIONARY', '../datasets-real/vg/VG-SGG-dicts-with-attri.json', 'DATASETS.VISUAL_GENOME.IMAGE_DATA', '../datasets-real/vg/image_data.json', 'DATASETS.VISUAL_GENOME.VG_ATTRIBUTE_H5', '../datasets-real/vg/VG-SGG-with-attri.h5', 'DATASETS.MSCOCO.ANNOTATIONS', '../datasets-real/coco/annotations/', 'DATASETS.MSCOCO.DATAROOT', '../datasets-real/coco/', 'MODEL.MASK_ON', 'True', 'MODEL.ROI_SCENEGRAPH_HEAD.USE_GT_BOX', 'False', 'MODEL.ROI_SCENEGRAPH_HEAD.USE_GT_OBJECT_LABEL', 'False', 'MODEL.ROI_SCENEGRAPH_HEAD.USE_MASK_ATTENTION', 'True', 'MODEL.ROI_SCENEGRAPH_HEAD.MASK_ATTENTION_TYPE', 'Weighted', 'MODEL.ROI_SCENEGRAPH_HEAD.SIGMOID_ATTENTION', 'True', 'TEST.EVAL_PERIOD', '50000', 'MODEL.ROI_RELATION_FEATURE_EXTRACTORS.MULTIPLY_LOGITS_WITH_MASKS', 'False', 'MODEL.ROI_BOX_FEATURE_EXTRACTORS.BOX_FEATURE_MASK', 'True', 'MODEL.ROI_BOX_FEATURE_EXTRACTORS.CLASS_LOGITS_WITH_MASK', 'False', 'SOLVER.IMS_PER_BATCH', '16', 'DATASETS.SEG_DATA_DIVISOR', '2', 'MODEL.ROI_SCENEGRAPH_HEAD.PREDICTOR', 'VCTreeSegmentationPredictorC', 'MODEL.ROI_HEADS.REFINE_SEG_MASKS', 'False', 'TEST.DETECTIONS_PER_IMAGE', '40', 'SOLVER.MAX_ITER', '1000', 'DATASETS.VISUAL_GENOME.NUMBER_OF_VALIDATION_IMAGES', '5000', 'MODEL.ROI_HEADS.MASK_NUM_CLASSES', '80', 'MODEL.ROI_HEADS.NUM_OUTPUT_CLASSES', '80', 'MODEL.ROI_SCENEGRAPH_HEAD.NUM_CLASSES', '50', 'SOLVER.REFERENCE_WORLD_SIZE', '4'], resume=True)
[04/17 11:31:06] detectron2 INFO: Contents of args.config_file=../configs/sg_dev_masktransfer.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mBase-RCNN-FPN.yaml[39m[38;5;186m"[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mSceneGraphSegmentationRCNN[39m[38;5;186m'[39m
[38;5;15m  [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m  [39m[38;5;197mUSE_MASK_ON_NODE[39m[38;5;15m:[39m[38;5;15m [39mFalse
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15m57.375[39m,[38;5;15m [39m[38;5;15m57.120[39m,[38;5;15m [39m[38;5;15m58.395[39m]
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39mFalse[38;5;15m  [39m[38;5;242m# this is a C2 model[39m
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m32
[38;5;15m    [39m[38;5;197mWIDTH_PER_GROUP[39m[38;5;15m:[39m[38;5;15m [39m8
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m101
[38;5;15m  [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mSGSegmentationROIHeadsMaskTransfer[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m150
[38;5;15m    [39m[38;5;197mEMBEDDINGS_PATH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m/home/r09521612/segmentationsg/segmentationsg/data/embeddings/glove_mean_vg[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mEMBEDDINGS_PATH_COCO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m/home/r09521612/segmentationsg/segmentationsg/data/embeddings/glove_mean_coco[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mROI_SCENEGRAPH_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mSceneGraphSegmentationHead[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mPREDICTOR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mMotifSegmentationPredictor[39m[38;5;186m'[39m
[38;5;15m  [39m[38;5;197mROI_MASK_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mSceneGraphMaskHeadTransfer[39m[38;5;186m'[39m
[38;5;15m  [39m[38;5;197mFREEZE_LAYERS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMETA_ARCH[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15mproposal_generator[39m,[38;5;15m [39m[38;5;15mbackbone[39m]
[38;5;15m    [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15mbox_pooler[39m,[38;5;15m [39m[38;5;15mbox_head[39m,[38;5;15m [39m[38;5;15mbox_predictor[39m,[38;5;15m [39m[38;5;15mmask_pooler[39m,[38;5;15m [39m[38;5;15mmask_head[39m,[38;5;15m [39m[38;5;15mkeypoint_pooler[39m,[38;5;15m [39m[38;5;15mkeypoint_head[39m]
[38;5;15m  [39m[38;5;197mROI_BOX_FEATURE_EXTRACTORS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mBoxFeatureSegmentationExtractor[39m[38;5;186m'[39m
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mVISUAL[39m[38;5;15m [39m[38;5;186mGENOME[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m[38;5;15m [39m('VG_train',)
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m[38;5;15m [39m('coco_val_2017','VG_test',)
[38;5;15m  [39m[38;5;197mVISUAL_GENOME[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mTRAIN_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mVAL_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mTEST_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mTRAIN_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mFILTER_EMPTY_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197mFILTER_NON_OVERLAP[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197mFILTER_DUPLICATE_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m16
[38;5;15m  [39m[38;5;197mBIAS_LR_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m0.01
[38;5;15m  [39m[38;5;197mWARMUP_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m0.0001
[38;5;15m  [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m0.9
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m[38;5;15m [39m(25000, 35000)
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m40000
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m500
[38;5;15m  [39m[38;5;197mCLIP_GRADIENTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLIP_VALUE[39m[38;5;15m:[39m[38;5;15m [39m5.0
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m5000
[38;5;197mGLOVE_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m../glove/[39m[38;5;186m'[39m

[04/17 11:31:06] detectron2 INFO: Running with full config:
[38;5;197mCUDNN_BENCHMARK[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mASPECT_RATIO_GROUPING[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mFILTER_EMPTY_ANNOTATIONS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;15m  [39m[38;5;197mREPEAT_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mSAMPLER_TRAIN[39m[38;5;15m:[39m[38;5;15m [39mTrainingSampler
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mMASK_TEST[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mcoco_val_2017
[38;5;15m  [39m[38;5;197mMASK_TRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mcoco_train_2017
[38;5;15m  [39m[38;5;197mMSCOCO[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANNOTATIONS[39m[38;5;15m:[39m[38;5;15m [39m../datasets-real/coco/annotations/
[38;5;15m    [39m[38;5;197mDATAROOT[39m[38;5;15m:[39m[38;5;15m [39m../datasets-real/coco/
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m2000
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mSEG_DATA_DIVISOR[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mcoco_val_2017
[38;5;15m  [39m-[38;5;15m [39mVG_test
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mVG_train
[38;5;15m  [39m[38;5;197mTRANSFER[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mcoco_train_2014
[38;5;15m  [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39mVISUAL GENOME
[38;5;15m  [39m[38;5;197mVISUAL_GENOME[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOX_SCALE[39m[38;5;15m:[39m[38;5;15m [39m1024
[38;5;15m    [39m[38;5;197mCLIPPED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mFILTER_DUPLICATE_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mFILTER_EMPTY_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mFILTER_NON_OVERLAP[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mIMAGES[39m[38;5;15m:[39m[38;5;15m [39m../datasets-real/vg/images
[38;5;15m    [39m[38;5;197mIMAGE_DATA[39m[38;5;15m:[39m[38;5;15m [39m../datasets-real/vg/image_data.json
[38;5;15m    [39m[38;5;197mMAPPING_DICTIONARY[39m[38;5;15m:[39m[38;5;15m [39m../datasets-real/vg/VG-SGG-dicts-with-attri.json
[38;5;15m    [39m[38;5;197mNUMBER_OF_VALIDATION_IMAGES[39m[38;5;15m:[39m[38;5;15m [39m5000
[38;5;15m    [39m[38;5;197mTEST_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mTRAIN_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mVAL_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mVG_ATTRIBUTE_H5[39m[38;5;15m:[39m[38;5;15m [39m../datasets-real/vg/VG-SGG-with-attri.h5
[38;5;197mDEV_RUN[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;197mGLOBAL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mHACK[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;197mGLOVE_DIR[39m[38;5;15m:[39m[38;5;15m [39m../glove/
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.9
[38;5;15m    [39m-[38;5;15m [39m0.9
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39mrelative_range
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39mBGR
[38;5;15m  [39m[38;5;197mMASK_FORMAT[39m[38;5;15m:[39m[38;5;15m [39mpolygon
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m1333
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m1333
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m800
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m640
[38;5;15m  [39m-[38;5;15m [39m672
[38;5;15m  [39m-[38;5;15m [39m704
[38;5;15m  [39m-[38;5;15m [39m736
[38;5;15m  [39m-[38;5;15m [39m768
[38;5;15m  [39m-[38;5;15m [39m800
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39mchoice
[38;5;15m  [39m[38;5;197mRANDOM_FLIP[39m[38;5;15m:[39m[38;5;15m [39mhorizontal
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mANCHOR_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANGLES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m-90
[38;5;15m      [39m-[38;5;15m [39m0
[38;5;15m      [39m-[38;5;15m [39m90
[38;5;15m    [39m[38;5;197mASPECT_RATIOS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m0.5
[38;5;15m      [39m-[38;5;15m [39m1.0
[38;5;15m      [39m-[38;5;15m [39m2.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mDefaultAnchorGenerator
[38;5;15m    [39m[38;5;197mOFFSET[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m    [39m[38;5;197mSIZES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m32
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m64
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m128
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m256
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m512
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFREEZE_AT[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mbuild_resnet_fpn_backbone
[38;5;15m  [39m[38;5;197mDEVICE[39m[38;5;15m:[39m[38;5;15m [39mcuda
[38;5;15m  [39m[38;5;197mFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFUSE_TYPE[39m[38;5;15m:[39m[38;5;15m [39msum
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres4
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m  [39m[38;5;197mFREEZE_LAYERS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMETA_ARCH[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mproposal_generator
[38;5;15m    [39m-[38;5;15m [39mbackbone
[38;5;15m    [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mbox_pooler
[38;5;15m    [39m-[38;5;15m [39mbox_head
[38;5;15m    [39m-[38;5;15m [39mbox_predictor
[38;5;15m    [39m-[38;5;15m [39mmask_pooler
[38;5;15m    [39m-[38;5;15m [39mmask_head
[38;5;15m    [39m-[38;5;15m [39mkeypoint_pooler
[38;5;15m    [39m-[38;5;15m [39mkeypoint_head
[38;5;15m  [39m[38;5;197mGROUP_NORM[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDIM_PER_GP[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;15m    [39m[38;5;197mEPSILON[39m[38;5;15m:[39m[38;5;15m [39m1.0e-05
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m32
[38;5;15m  [39m[38;5;197mKEYPOINT_ON[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mLOAD_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39mSceneGraphSegmentationRCNN
[38;5;15m  [39m[38;5;197mPANOPTIC_FPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMBINE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m      [39m[38;5;197mINSTANCES_CONFIDENCE_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m      [39m[38;5;197mOVERLAP_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m      [39m[38;5;197mSTUFF_AREA_LIMIT[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m103.53
[38;5;15m  [39m-[38;5;15m [39m116.28
[38;5;15m  [39m-[38;5;15m [39m123.675
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m57.375
[38;5;15m  [39m-[38;5;15m [39m57.12
[38;5;15m  [39m-[38;5;15m [39m58.395
[38;5;15m  [39m[38;5;197mPROPOSAL_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMIN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mRPN
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEFORM_MODULATED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mDEFORM_NUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mDEFORM_ON_PER_STAGE[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m101
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mFrozenBN
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m32
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres4
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mRES2_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mRES5_DILATION[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m64
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mWIDTH_PER_GROUP[39m[38;5;15m:[39m[38;5;15m [39m8
[38;5;15m  [39m[38;5;197mRETINANET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m&id002[39m
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m0.25
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m2.0
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mp3
[38;5;15m    [39m-[38;5;15m [39mp4
[38;5;15m    [39m-[38;5;15m [39mp5
[38;5;15m    [39m-[38;5;15m [39mp6
[38;5;15m    [39m-[38;5;15m [39mp7
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.4
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m80
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m0.01
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m    [39m[38;5;197mSMOOTH_L1_LOSS_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mTOPK_CANDIDATES_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mROI_BOX_CASCADE_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m[38;5;15m&id001[39m
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m5.0
[38;5;15m      [39m-[38;5;15m [39m5.0
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m20.0
[38;5;15m      [39m-[38;5;15m [39m20.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m30.0
[38;5;15m      [39m-[38;5;15m [39m30.0
[38;5;15m      [39m-[38;5;15m [39m15.0
[38;5;15m      [39m-[38;5;15m [39m15.0
[38;5;15m    [39m[38;5;197mIOUS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m-[38;5;15m [39m0.6
[38;5;15m    [39m-[38;5;15m [39m0.7
[38;5;15m  [39m[38;5;197mROI_BOX_FEATURE_EXTRACTORS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOX_FEATURE_MASK[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mCLASS_LOGITS_WITH_MASK[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mBoxFeatureSegmentationExtractor
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m28
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m  [39m[38;5;197mROI_BOX_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id001[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_BBOX_REG[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mFC_DIM[39m[38;5;15m:[39m[38;5;15m [39m1024
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mFastRCNNConvFCHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNUM_FC[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m7
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m    [39m[38;5;197mTRAIN_ON_PRED_BOXES[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mEMBEDDINGS_PATH[39m[38;5;15m:[39m[38;5;15m [39m/home/r09521612/segmentationsg/segmentationsg/data/embeddings/glove_mean_vg
[38;5;15m    [39m[38;5;197mEMBEDDINGS_PATH_COCO[39m[38;5;15m:[39m[38;5;15m [39m/home/r09521612/segmentationsg/segmentationsg/data/embeddings/glove_mean_coco
[38;5;15m    [39m[38;5;197mFG_IOU_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mp2
[38;5;15m    [39m-[38;5;15m [39mp3
[38;5;15m    [39m-[38;5;15m [39mp4
[38;5;15m    [39m-[38;5;15m [39mp5
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mLINGUAL_MATRIX_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m    [39m[38;5;197mMASK_NUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m80
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mSGSegmentationROIHeadsMaskTransfer
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m150
[38;5;15m    [39m[38;5;197mNUM_OUTPUT_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m80
[38;5;15m    [39m[38;5;197mOBJECTNESS_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.3
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m0.25
[38;5;15m    [39m[38;5;197mPROPOSAL_APPEND_GT[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mREFINE_SEG_MASKS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m    [39m[38;5;197mSEGMENTATION_STEP_MASK_REFINE[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mROI_KEYPOINT_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mMIN_KEYPOINTS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mKRCNNConvDeconvUpsampleHead
[38;5;15m    [39m[38;5;197mNORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mNUM_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m17
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m  [39m[38;5;197mROI_MASK_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_MASK[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mSceneGraphMaskHeadTransfer
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m  [39m[38;5;197mROI_RELATION_FEATURE_EXTRACTORS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMULTIPLY_LOGITS_WITH_MASKS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mRelationFeatureExtractor
[38;5;15m    [39m[38;5;197mUSE_MASK_COMBINER[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mROI_SCENEGRAPH_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mADD_GTBOX_TO_PROPOSAL_IN_TRAIN[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m64
[38;5;15m    [39m[38;5;197mCONTEXT_DROPOUT_RATE[39m[38;5;15m:[39m[38;5;15m [39m0.2
[38;5;15m    [39m[38;5;197mCONTEXT_HIDDEN_DIM[39m[38;5;15m:[39m[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mCONTEXT_OBJ_LAYER[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mCONTEXT_POOLING_DIM[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mCONTEXT_REL_LAYER[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mEMBED_DIM[39m[38;5;15m:[39m[38;5;15m [39m200
[38;5;15m    [39m[38;5;197mLABEL_SMOOTHING_LOSS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mMASK_ATTENTION_TYPE[39m[38;5;15m:[39m[38;5;15m [39mWeighted
[38;5;15m    [39m[38;5;197mMODE[39m[38;5;15m:[39m[38;5;15m [39mpredcls
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mSceneGraphSegmentationHead
[38;5;15m    [39m[38;5;197mNMS_FILTER_DUPLICATES[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m50
[38;5;15m    [39m[38;5;197mNUM_SAMPLE_PER_GT_REL[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m0.25
[38;5;15m    [39m[38;5;197mPREDICTOR[39m[38;5;15m:[39m[38;5;15m [39mVCTreeSegmentationPredictorC
[38;5;15m    [39m[38;5;197mPREDICT_USE_BIAS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mPREDICT_USE_VISION[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mREL_PROP[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.01858
[38;5;15m    [39m-[38;5;15m [39m0.00057
[38;5;15m    [39m-[38;5;15m [39m0.00051
[38;5;15m    [39m-[38;5;15m [39m0.00109
[38;5;15m    [39m-[38;5;15m [39m0.0015
[38;5;15m    [39m-[38;5;15m [39m0.00489
[38;5;15m    [39m-[38;5;15m [39m0.00432
[38;5;15m    [39m-[38;5;15m [39m0.02913
[38;5;15m    [39m-[38;5;15m [39m0.00245
[38;5;15m    [39m-[38;5;15m [39m0.00121
[38;5;15m    [39m-[38;5;15m [39m0.00404
[38;5;15m    [39m-[38;5;15m [39m0.0011
[38;5;15m    [39m-[38;5;15m [39m0.00132
[38;5;15m    [39m-[38;5;15m [39m0.00172
[38;5;15m    [39m-[38;5;15m [39m5.0e-05
[38;5;15m    [39m-[38;5;15m [39m0.00242
[38;5;15m    [39m-[38;5;15m [39m0.0005
[38;5;15m    [39m-[38;5;15m [39m0.00048
[38;5;15m    [39m-[38;5;15m [39m0.00208
[38;5;15m    [39m-[38;5;15m [39m0.15608
[38;5;15m    [39m-[38;5;15m [39m0.0265
[38;5;15m    [39m-[38;5;15m [39m0.06091
[38;5;15m    [39m-[38;5;15m [39m0.009
[38;5;15m    [39m-[38;5;15m [39m0.00183
[38;5;15m    [39m-[38;5;15m [39m0.00225
[38;5;15m    [39m-[38;5;15m [39m0.0009
[38;5;15m    [39m-[38;5;15m [39m0.00028
[38;5;15m    [39m-[38;5;15m [39m0.00077
[38;5;15m    [39m-[38;5;15m [39m0.04844
[38;5;15m    [39m-[38;5;15m [39m0.08645
[38;5;15m    [39m-[38;5;15m [39m0.31621
[38;5;15m    [39m-[38;5;15m [39m0.00088
[38;5;15m    [39m-[38;5;15m [39m0.00301
[38;5;15m    [39m-[38;5;15m [39m0.00042
[38;5;15m    [39m-[38;5;15m [39m0.00186
[38;5;15m    [39m-[38;5;15m [39m0.001
[38;5;15m    [39m-[38;5;15m [39m0.00027
[38;5;15m    [39m-[38;5;15m [39m0.01012
[38;5;15m    [39m-[38;5;15m [39m0.0001
[38;5;15m    [39m-[38;5;15m [39m0.01286
[38;5;15m    [39m-[38;5;15m [39m0.00647
[38;5;15m    [39m-[38;5;15m [39m0.00084
[38;5;15m    [39m-[38;5;15m [39m0.01077
[38;5;15m    [39m-[38;5;15m [39m0.00132
[38;5;15m    [39m-[38;5;15m [39m0.00069
[38;5;15m    [39m-[38;5;15m [39m0.00376
[38;5;15m    [39m-[38;5;15m [39m0.00214
[38;5;15m    [39m-[38;5;15m [39m0.11424
[38;5;15m    [39m-[38;5;15m [39m0.01205
[38;5;15m    [39m-[38;5;15m [39m0.02958
[38;5;15m    [39m[38;5;197mREQUIRE_BOX_OVERLAP[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mRETURN_SEG_ANNOS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mRETURN_SEG_MASKS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mSEG_BBOX_LOSS_MULTIPLIER[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mSIGMOID_ATTENTION[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mTRANSFORMER[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mDROPOUT_RATE[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m      [39m[38;5;197mINNER_DIM[39m[38;5;15m:[39m[38;5;15m [39m2048
[38;5;15m      [39m[38;5;197mKEY_DIM[39m[38;5;15m:[39m[38;5;15m [39m64
[38;5;15m      [39m[38;5;197mNUM_HEAD[39m[38;5;15m:[39m[38;5;15m [39m8
[38;5;15m      [39m[38;5;197mOBJ_LAYER[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m      [39m[38;5;197mREL_LAYER[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;15m      [39m[38;5;197mVAL_DIM[39m[38;5;15m:[39m[38;5;15m [39m64
[38;5;15m    [39m[38;5;197mUSE_GT_BOX[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mUSE_GT_OBJECT_LABEL[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mUSE_MASK_ATTENTION[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mUSE_ONLY_FG_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mZERO_SHOT_TRIPLETS[39m[38;5;15m:[39m[38;5;15m [39m../evaluation/datasets/vg/zeroshot_triplet.pytorch
[38;5;15m  [39m[38;5;197mRPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id002[39m
[38;5;15m    [39m[38;5;197mBOUNDARY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m[38;5;197mHEAD_NAME[39m[38;5;15m:[39m[38;5;15m [39mStandardRPNHead
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mp2
[38;5;15m    [39m-[38;5;15m [39mp3
[38;5;15m    [39m-[38;5;15m [39mp4
[38;5;15m    [39m-[38;5;15m [39mp5
[38;5;15m    [39m-[38;5;15m [39mp6
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.3
[38;5;15m    [39m-[38;5;15m [39m0.7
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mNMS_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.7
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m2000
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mSCENEGRAPH_ON[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m128
[38;5;15m    [39m[38;5;197mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m255
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mp2
[38;5;15m    [39m-[38;5;15m [39mp3
[38;5;15m    [39m-[38;5;15m [39mp4
[38;5;15m    [39m-[38;5;15m [39mp5
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mSemSegFPNHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mGN
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m54
[38;5;15m  [39m[38;5;197mUSE_MASK_ON_NODE[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m../output-step1-vg/resnet_pretrain_weights.pth
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m../output-step3-vctree-short-vg
[38;5;197mSEED[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAMP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m0.01
[38;5;15m  [39m[38;5;197mBIAS_LR_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m500
[38;5;15m  [39m[38;5;197mCLIP_GRADIENTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLIP_TYPE[39m[38;5;15m:[39m[38;5;15m [39mvalue
[38;5;15m    [39m[38;5;197mCLIP_VALUE[39m[38;5;15m:[39m[38;5;15m [39m5.0
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNORM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m2.0
[38;5;15m  [39m[38;5;197mGAMMA[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m16
[38;5;15m  [39m[38;5;197mLR_SCHEDULER_NAME[39m[38;5;15m:[39m[38;5;15m [39mWarmupMultiStepLR
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m0.9
[38;5;15m  [39m[38;5;197mNESTEROV[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mREFERENCE_WORLD_SIZE[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m25000
[38;5;15m  [39m-[38;5;15m [39m35000
[38;5;15m  [39m[38;5;197mWARMUP_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m  [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39mlinear
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m0.0001
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_BIAS[39m[38;5;15m:[39m[38;5;15m [39mnull
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_NORM[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mFLIP[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mMAX_SIZE[39m[38;5;15m:[39m[38;5;15m [39m4000
[38;5;15m    [39m[38;5;197mMIN_SIZES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m400
[38;5;15m    [39m-[38;5;15m [39m500
[38;5;15m    [39m-[38;5;15m [39m600
[38;5;15m    [39m-[38;5;15m [39m700
[38;5;15m    [39m-[38;5;15m [39m800
[38;5;15m    [39m-[38;5;15m [39m900
[38;5;15m    [39m-[38;5;15m [39m1000
[38;5;15m    [39m-[38;5;15m [39m1100
[38;5;15m    [39m-[38;5;15m [39m1200
[38;5;15m  [39m[38;5;197mDETECTIONS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m40
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m50000
[38;5;15m  [39m[38;5;197mEXPECTED_RESULTS[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mKEYPOINT_OKS_SIGMAS[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mPRECISE_BN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNUM_ITER[39m[38;5;15m:[39m[38;5;15m [39m200
[38;5;15m  [39m[38;5;197mRELATION[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mLATER_NMS_PREDICTION_THRES[39m[38;5;15m:[39m[38;5;15m [39m0.3
[38;5;15m    [39m[38;5;197mMULTIPLE_PREDS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mREQUIRE_OVERLAP[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;197mVERSION[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;197mVIS_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m0

[04/17 11:31:06] detectron2 INFO: Full config saved to ../output-step3-vctree-short-vg/config.yaml
[04/17 11:31:06] d2.utils.env INFO: Using a generated random seed 7230622
[04/17 11:31:06] d2.engine.defaults INFO: Auto-scaling the config to batch_size=4, learning_rate=0.0025, max_iter=4000, warmup=4000.
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: box_head.fc1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: box_head.fc1.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: box_head.fc2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: box_head.fc2.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: box_predictor.cls_score.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: box_predictor.cls_score.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: box_predictor.bbox_pred.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: box_predictor.bbox_pred.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: box_predictor.transfer_cls_score.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: box_predictor.transfer_cls_score.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: box_predictor.transfer_bbox_pred.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: box_predictor.transfer_bbox_pred.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: mask_head.mask_fcn1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: mask_head.mask_fcn1.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: mask_head.mask_fcn2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: mask_head.mask_fcn2.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: mask_head.mask_fcn3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: mask_head.mask_fcn3.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: mask_head.mask_fcn4.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: mask_head.mask_fcn4.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: mask_head.deconv.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: mask_head.deconv.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: mask_head.predictor.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: mask_head.predictor.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.fpn_lateral2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.fpn_lateral2.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.fpn_output2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.fpn_output2.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.fpn_lateral3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.fpn_lateral3.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.fpn_output3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.fpn_output3.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.fpn_lateral4.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.fpn_lateral4.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.fpn_output4.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.fpn_output4.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.fpn_lateral5.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.fpn_lateral5.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.fpn_output5.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.fpn_output5.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.stem.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res2.0.shortcut.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res2.0.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res2.0.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res2.0.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res2.1.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res2.1.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res2.1.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res2.2.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res2.2.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res2.2.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.0.shortcut.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.0.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.0.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.0.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.1.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.1.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.1.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.2.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.2.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.2.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.3.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.3.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.3.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.0.shortcut.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.0.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.0.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.0.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.1.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.1.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.1.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.2.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.2.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.2.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.3.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.3.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.3.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.4.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.4.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.4.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.5.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.5.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.5.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.6.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.6.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.6.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.7.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.7.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.7.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.8.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.8.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.8.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.9.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.9.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.9.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.10.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.10.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.10.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.11.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.11.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.11.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.12.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.12.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.12.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.13.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.13.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.13.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.14.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.14.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.14.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.15.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.15.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.15.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.16.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.16.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.16.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.17.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.17.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.17.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.18.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.18.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.18.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.19.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.19.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.19.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.20.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.20.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.20.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.21.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.21.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.21.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.22.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.22.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.22.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res5.0.shortcut.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res5.0.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res5.0.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res5.0.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res5.1.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res5.1.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res5.1.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res5.2.conv1.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res5.2.conv2.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res5.2.conv3.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: proposal_generator.rpn_head.conv.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: proposal_generator.rpn_head.conv.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: proposal_generator.rpn_head.objectness_logits.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: proposal_generator.rpn_head.objectness_logits.bias
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: proposal_generator.rpn_head.anchor_deltas.weight
[04/17 11:31:29] detectron2 WARNING: Freezed Layer: proposal_generator.rpn_head.anchor_deltas.bias
[04/17 11:31:29] d2.engine.defaults INFO: Model:
SceneGraphSegmentationRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv2): Conv2d(
            2048, 2048, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv3): Conv2d(
            2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv2): Conv2d(
            2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv3): Conv2d(
            2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv2): Conv2d(
            2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv3): Conv2d(
            2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): SGSegmentationROIHeadsMaskTransfer(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayersSGMaskTransfer(
      (cls_score): Linear(in_features=1024, out_features=81, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=320, bias=True)
      (transfer_cls_score): Linear(in_features=1024, out_features=151, bias=True)
      (transfer_bbox_pred): Linear(in_features=1024, out_features=600, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): SceneGraphMaskHeadTransfer(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 80, kernel_size=(1, 1), stride=(1, 1))
    )
    (scenegraph_head): SceneGraphSegmentationHead(
      (box_feature_extractor): BoxFeatureSegmentationExtractor(
        (mask_combiner): Conv2d(406, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (mask_combiner_segmentation): Conv2d(336, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (pooler): ROIPooler(
          (level_poolers): ModuleList(
            (0): ROIAlign(output_size=(28, 28), spatial_scale=0.25, sampling_ratio=0, aligned=True)
            (1): ROIAlign(output_size=(28, 28), spatial_scale=0.125, sampling_ratio=0, aligned=True)
            (2): ROIAlign(output_size=(28, 28), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
            (3): ROIAlign(output_size=(28, 28), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
          )
        )
        (fc6): Linear(in_features=200704, out_features=1024, bias=True)
        (fc7): Linear(in_features=1024, out_features=1024, bias=True)
      )
      (union_feature_extractor): RelationFeatureExtractor(
        (feature_extractor): BoxFeatureExtractor(
          (mask_combiner): Conv2d(406, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (pooler): ROIPooler(
            (level_poolers): ModuleList(
              (0): ROIAlign(output_size=(28, 28), spatial_scale=0.25, sampling_ratio=0, aligned=True)
              (1): ROIAlign(output_size=(28, 28), spatial_scale=0.125, sampling_ratio=0, aligned=True)
              (2): ROIAlign(output_size=(28, 28), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
              (3): ROIAlign(output_size=(28, 28), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
            )
          )
          (fc6): Linear(in_features=200704, out_features=1024, bias=True)
          (fc7): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (variance_net): Linear(in_features=302, out_features=6, bias=True)
      )
      (predictor): VCTreeSegmentationPredictorC(
        (post_emb): Linear(in_features=512, out_features=1024, bias=True)
        (post_cat): Linear(in_features=1024, out_features=4096, bias=True)
        (ctx_compress): Linear(in_features=4096, out_features=51, bias=True)
        (up_dim): Linear(in_features=1024, out_features=4096, bias=True)
        (freq_bias): FrequencyBias(
          (obj_baseline): Embedding(22801, 51)
        )
        (context_layer): VCTreeLSTMSegmentationContextC(
          (obj_embed1): Embedding(151, 200)
          (obj_embed2): Embedding(151, 200)
          (pos_embed): Sequential(
            (0): Linear(in_features=9, out_features=32, bias=True)
            (1): BatchNorm1d(32, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
            (2): Linear(in_features=32, out_features=128, bias=True)
            (3): ReLU(inplace=True)
          )
          (overlap_embed): Sequential(
            (0): Linear(in_features=6, out_features=128, bias=True)
            (1): BatchNorm1d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (box_embed): Sequential(
            (0): Linear(in_features=9, out_features=128, bias=True)
            (1): BatchNorm1d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (bi_freq_prior): Linear(in_features=22801, out_features=1, bias=False)
          (obj_reduce): Linear(in_features=1024, out_features=128, bias=True)
          (emb_reduce): Linear(in_features=200, out_features=128, bias=True)
          (score_pre): Linear(in_features=512, out_features=512, bias=True)
          (score_sub): Linear(in_features=512, out_features=512, bias=True)
          (score_obj): Linear(in_features=512, out_features=512, bias=True)
          (vision_prior): Linear(in_features=1537, out_features=1, bias=True)
          (obj_ctx_rnn): MultiLayer_BTreeLSTM(
            (multi_layer_lstm): ModuleList(
              (0): BidirectionalTreeLSTM(
                (treeLSTM_foreward): OneDirectionalTreeLSTM(
                  (treeLSTM): BiTreeLSTM_Foreward(
                    (px): Linear(in_features=1352, out_features=256, bias=True)
                    (ioffux): Linear(in_features=1352, out_features=1536, bias=True)
                    (ioffuh_left): Linear(in_features=256, out_features=1536, bias=True)
                    (ioffuh_right): Linear(in_features=256, out_features=1536, bias=True)
                  )
                )
                (treeLSTM_backward): OneDirectionalTreeLSTM(
                  (treeLSTM): BiTreeLSTM_Backward(
                    (px): Linear(in_features=1352, out_features=256, bias=True)
                    (iofux): Linear(in_features=1352, out_features=1280, bias=True)
                    (iofuh): Linear(in_features=256, out_features=1280, bias=True)
                  )
                )
              )
            )
          )
          (edge_ctx_rnn): MultiLayer_BTreeLSTM(
            (multi_layer_lstm): ModuleList(
              (0): BidirectionalTreeLSTM(
                (treeLSTM_foreward): OneDirectionalTreeLSTM(
                  (treeLSTM): BiTreeLSTM_Foreward(
                    (px): Linear(in_features=1736, out_features=256, bias=True)
                    (ioffux): Linear(in_features=1736, out_features=1536, bias=True)
                    (ioffuh_left): Linear(in_features=256, out_features=1536, bias=True)
                    (ioffuh_right): Linear(in_features=256, out_features=1536, bias=True)
                  )
                )
                (treeLSTM_backward): OneDirectionalTreeLSTM(
                  (treeLSTM): BiTreeLSTM_Backward(
                    (px): Linear(in_features=1736, out_features=256, bias=True)
                    (iofux): Linear(in_features=1736, out_features=1280, bias=True)
                    (iofuh): Linear(in_features=256, out_features=1280, bias=True)
                  )
                )
              )
            )
          )
          (decoder_rnn): DecoderTreeLSTM(
            (obj_embed): Embedding(152, 200)
            (out): Linear(in_features=512, out_features=151, bias=True)
            (decoderLSTM): BiTreeLSTM_Backward(
              (embed_layer): Embedding(152, 200)
              (embed_out_layer): Linear(in_features=512, out_features=151, bias=True)
              (px): Linear(in_features=2064, out_features=512, bias=True)
              (iofux): Linear(in_features=2064, out_features=2560, bias=True)
              (iofuh): Linear(in_features=512, out_features=2560, bias=True)
            )
          )
          (sg_segmentation_features): Linear(in_features=1864, out_features=256, bias=True)
          (segmentation_head): SGSceneGraphMaskHead(
            (mask_fcn1): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
              (activation): ReLU()
            )
            (mask_fcn2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
              (activation): ReLU()
            )
            (mask_fcn3): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
              (activation): ReLU()
            )
            (mask_fcn4): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
              (activation): ReLU()
            )
            (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
            (deconv_relu): ReLU()
            (predictor): Conv2d(256, 80, kernel_size=(1, 1), stride=(1, 1))
          )
          (obj_embed_segmentation): Embedding(81, 200)
          (segmentation_reducer): Conv2d(
            512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)
            (activation): ReLU()
          )
        )
      )
      (post_processor): PostProcessor()
      (pooler): ROIPooler(
        (level_poolers): ModuleList(
          (0): ROIAlign(output_size=(28, 28), spatial_scale=0.25, sampling_ratio=0, aligned=True)
          (1): ROIAlign(output_size=(28, 28), spatial_scale=0.125, sampling_ratio=0, aligned=True)
          (2): ROIAlign(output_size=(28, 28), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
          (3): ROIAlign(output_size=(28, 28), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
        )
      )
      (segmentation_criterion_loss): CrossEntropyLoss()
    )
    (embeddings): Embedding(150, 300)
    (embeddings_coco): Embedding(80, 300)
  )
)
[04/17 11:31:29] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[04/17 11:31:30] d2.data.build INFO: Removed 0 images with no usable annotations. 61070 images left.
[04/17 11:31:32] d2.data.build INFO: Distribution of instances among all 150 categories:
[36m|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
|  airplane  | 947          |   animal   | 1425         |    arm     | 6074         |
|    bag     | 4778         |   banana   | 2380         |   basket   | 1612         |
|   beach    | 2141         |    bear    | 1903         |    bed     | 2077         |
|   bench    | 3490         |    bike    | 3176         |    bird    | 2219         |
|   board    | 2548         |    boat    | 2970         |    book    | 2872         |
|    boot    | 1843         |   bottle   | 3774         |    bowl    | 2903         |
|    box     | 3173         |    boy     | 4542         |   branch   | 3882         |
|  building  | 21059        |    bus     | 3232         |  cabinet   | 2442         |
|    cap     | 2515         |    car     | 11576        |    cat     | 2228         |
|   chair    | 7875         |   child    | 1930         |   clock    | 2910         |
|    coat    | 2676         |  counter   | 2479         |    cow     | 2508         |
|    cup     | 2552         |  curtain   | 2021         |    desk    | 1654         |
|    dog     | 2790         |    door    | 8495         |   drawer   | 1547         |
|    ear     | 7759         |  elephant  | 2933         |   engine   | 1691         |
|    eye     | 3401         |    face    | 5558         |   fence    | 7742         |
|   finger   | 1795         |    flag    | 2060         |   flower   | 4870         |
|    food    | 3414         |    fork    | 1600         |   fruit    | 1188         |
|  giraffe   | 2891         |    girl    | 3943         |   glass    | 7105         |
|   glove    | 2536         |    guy     | 1150         |    hair    | 11599        |
|    hand    | 11042        |   handle   | 4574         |    hat     | 5535         |
|    head    | 13335        |   helmet   | 3908         |    hill    | 2464         |
|   horse    | 3168         |   house    | 3104         |   jacket   | 6918         |
|    jean    | 3700         |    kid     | 1000         |    kite    | 1865         |
|    lady    | 1404         |    lamp    | 2693         |   laptop   | 1939         |
|    leaf    | 8355         |    leg     | 13513        |   letter   | 3623         |
|   light    | 8820         |    logo    | 2970         |    man     | 35555        |
|    men     | 1164         | motorcycle | 2675         |  mountain  | 2837         |
|   mouth    | 2313         |    neck    | 2917         |    nose    | 3860         |
|   number   | 1948         |   orange   | 1377         |    pant    | 8514         |
|   paper    | 2780         |    paw     | 1569         |   people   | 8657         |
|   person   | 22621        |   phone    | 1636         |   pillow   | 3545         |
|   pizza    | 2001         |   plane    | 2732         |   plant    | 3857         |
|   plate    | 6811         |   player   | 2385         |    pole    | 13537        |
|    post    | 3846         |    pot     | 1633         |   racket   | 1615         |
|  railing   | 1938         |    rock    | 4721         |    roof    | 4377         |
|    room    | 1528         |   screen   | 1453         |    seat    | 2760         |
|   sheep    | 2070         |   shelf    | 3336         |   shirt    | 22841        |
|    shoe    | 7943         |   short    | 5151         |  sidewalk  | 6442         |
|    sign    | 14806        |    sink    | 1683         | skateboard | 2405         |
|    ski     | 2349         |   skier    | 1360         |  sneaker   | 1398         |
|    snow    | 5825         |    sock    | 1999         |   stand    | 1623         |
|   street   | 7315         | surfboard  | 2297         |   table    | 11740        |
|    tail    | 5665         |    tie     | 1670         |    tile    | 3388         |
|    tire    | 4064         |   toilet   | 1221         |   towel    | 1768         |
|   tower    | 1723         |   track    | 4349         |   train    | 3791         |
|    tree    | 31548        |   truck    | 2863         |   trunk    | 3377         |
|  umbrella  | 4037         |    vase    | 1660         | vegetable  | 1078         |
|  vehicle   | 2160         |    wave    | 3294         |   wheel    | 5864         |
|   window   | 28402        | windshield | 2105         |    wing    | 2648         |
|    wire    | 2540         |   woman    | 16722        |   zebra    | 2494         |
|            |              |            |              |            |              |
|   total    | 720559       |            |              |            |              |[0m
[04/17 11:31:32] d2.data.build INFO: Using training sampler TrainingSampler
[04/17 11:31:32] d2.data.common INFO: Serializing 61070 elements to byte tensors and concatenating them all ...
[04/17 11:31:40] d2.data.common INFO: Serialized dataset takes 155.03 MiB
[04/17 11:31:40] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[04/17 11:31:54] d2.data.datasets.coco INFO: Loading ../datasets-real/coco/annotations/instances_train2017.json takes 4.50 seconds.
[04/17 11:31:54] d2.data.datasets.coco INFO: Loaded 25000 images in COCO format from ../datasets-real/coco/annotations/instances_train2017.json
[04/17 11:31:55] d2.data.build INFO: Removed 0 images with no usable annotations. 25000 images left.
[04/17 11:31:56] d2.data.build INFO: Distribution of instances among all 80 categories:
[36m|   category    | #instances   |   category   | #instances   |   category    | #instances   |
|:-------------:|:-------------|:------------:|:-------------|:-------------:|:-------------|
|    person     | 55096        |   bicycle    | 1504         |      car      | 8873         |
|  motorcycle   | 1884         |   airplane   | 1054         |      bus      | 1215         |
|     train     | 976          |    truck     | 2040         |     boat      | 2259         |
| traffic light | 2631         | fire hydrant | 353          |   stop sign   | 376          |
| parking meter | 214          |    bench     | 2229         |     bird      | 2102         |
|      cat      | 1033         |     dog      | 1099         |     horse     | 1349         |
|     sheep     | 2006         |     cow      | 1634         |   elephant    | 1190         |
|     bear      | 296          |    zebra     | 1081         |    giraffe    | 1085         |
|   backpack    | 1854         |   umbrella   | 2432         |    handbag    | 2802         |
|      tie      | 1265         |   suitcase   | 1291         |    frisbee    | 573          |
|     skis      | 1431         |  snowboard   | 570          |  sports ball  | 1353         |
|     kite      | 1808         | baseball bat | 713          | baseball gl.. | 842          |
|  skateboard   | 1254         |  surfboard   | 1190         | tennis racket | 1078         |
|    bottle     | 5152         |  wine glass  | 1654         |      cup      | 4478         |
|     fork      | 1264         |    knife     | 1733         |     spoon     | 1373         |
|     bowl      | 3224         |    banana    | 2157         |     apple     | 1357         |
|   sandwich    | 1053         |    orange    | 1444         |   broccoli    | 1548         |
|    carrot     | 1539         |   hot dog    | 705          |     pizza     | 1174         |
|     donut     | 1508         |     cake     | 1299         |     chair     | 8158         |
|     couch     | 1231         | potted plant | 1855         |      bed      | 937          |
| dining table  | 3450         |    toilet    | 885          |      tv       | 1174         |
|    laptop     | 1060         |    mouse     | 441          |    remote     | 1204         |
|   keyboard    | 571          |  cell phone  | 1309         |   microwave   | 367          |
|     oven      | 698          |   toaster    | 46           |     sink      | 1258         |
| refrigerator  | 622          |     book     | 4976         |     clock     | 1336         |
|     vase      | 1423         |   scissors   | 323          |  teddy bear   | 1014         |
|  hair drier   | 40           |  toothbrush  | 400          |               |              |
|     total     | 181475       |              |              |               |              |[0m
[04/17 11:31:56] d2.data.common INFO: Serializing 25000 elements to byte tensors and concatenating them all ...
[04/17 11:31:57] d2.data.common INFO: Serialized dataset takes 96.38 MiB
[04/17 11:31:57] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[04/17 11:31:57] fvcore.common.checkpoint INFO: [Checkpointer] Loading from ../output-step1-vg/resnet_pretrain_weights.pth ...
[04/17 11:31:57] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mroi_heads.embeddings.weight[0m
[34mroi_heads.embeddings_coco.weight[0m
[34mroi_heads.scenegraph_head.box_feature_extractor.fc6.{bias, weight}[0m
[34mroi_heads.scenegraph_head.box_feature_extractor.fc7.{bias, weight}[0m
[34mroi_heads.scenegraph_head.box_feature_extractor.mask_combiner.{bias, weight}[0m
[34mroi_heads.scenegraph_head.box_feature_extractor.mask_combiner_segmentation.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.bi_freq_prior.weight[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.box_embed.0.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.box_embed.1.{bias, running_mean, running_var, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.decoder_rnn.decoderLSTM.embed_layer.weight[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.decoder_rnn.decoderLSTM.embed_out_layer.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.decoder_rnn.decoderLSTM.iofuh.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.decoder_rnn.decoderLSTM.iofux.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.decoder_rnn.decoderLSTM.px.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.decoder_rnn.obj_embed.weight[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.decoder_rnn.out.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.edge_ctx_rnn.multi_layer_lstm.0.treeLSTM_backward.treeLSTM.iofuh.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.edge_ctx_rnn.multi_layer_lstm.0.treeLSTM_backward.treeLSTM.iofux.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.edge_ctx_rnn.multi_layer_lstm.0.treeLSTM_backward.treeLSTM.px.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.edge_ctx_rnn.multi_layer_lstm.0.treeLSTM_foreward.treeLSTM.ioffuh_left.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.edge_ctx_rnn.multi_layer_lstm.0.treeLSTM_foreward.treeLSTM.ioffuh_right.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.edge_ctx_rnn.multi_layer_lstm.0.treeLSTM_foreward.treeLSTM.ioffux.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.edge_ctx_rnn.multi_layer_lstm.0.treeLSTM_foreward.treeLSTM.px.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.emb_reduce.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.obj_ctx_rnn.multi_layer_lstm.0.treeLSTM_backward.treeLSTM.iofuh.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.obj_ctx_rnn.multi_layer_lstm.0.treeLSTM_backward.treeLSTM.iofux.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.obj_ctx_rnn.multi_layer_lstm.0.treeLSTM_backward.treeLSTM.px.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.obj_ctx_rnn.multi_layer_lstm.0.treeLSTM_foreward.treeLSTM.ioffuh_left.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.obj_ctx_rnn.multi_layer_lstm.0.treeLSTM_foreward.treeLSTM.ioffuh_right.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.obj_ctx_rnn.multi_layer_lstm.0.treeLSTM_foreward.treeLSTM.ioffux.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.obj_ctx_rnn.multi_layer_lstm.0.treeLSTM_foreward.treeLSTM.px.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.obj_embed1.weight[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.obj_embed2.weight[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.obj_embed_segmentation.weight[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.obj_reduce.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.overlap_embed.0.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.overlap_embed.1.{bias, running_mean, running_var, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.pos_embed.0.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.pos_embed.1.{bias, running_mean, running_var, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.pos_embed.2.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.score_obj.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.score_pre.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.score_sub.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.segmentation_head.deconv.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.segmentation_head.mask_fcn1.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.segmentation_head.mask_fcn2.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.segmentation_head.mask_fcn3.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.segmentation_head.mask_fcn4.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.segmentation_head.predictor.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.segmentation_reducer.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.sg_segmentation_features.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.context_layer.vision_prior.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.ctx_compress.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.freq_bias.obj_baseline.weight[0m
[34mroi_heads.scenegraph_head.predictor.post_cat.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.post_emb.{bias, weight}[0m
[34mroi_heads.scenegraph_head.predictor.up_dim.{bias, weight}[0m
[34mroi_heads.scenegraph_head.union_feature_extractor.feature_extractor.fc6.{bias, weight}[0m
[34mroi_heads.scenegraph_head.union_feature_extractor.feature_extractor.fc7.{bias, weight}[0m
[34mroi_heads.scenegraph_head.union_feature_extractor.feature_extractor.mask_combiner.{bias, weight}[0m
[34mroi_heads.scenegraph_head.union_feature_extractor.variance_net.{bias, weight}[0m
[04/17 11:31:57] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
[04/17 11:31:57] d2.engine.train_loop INFO: Starting training from iteration 0
[04/17 11:33:18] d2.utils.events INFO:  eta: 4:11:24  iter: 19  total_loss: 6.137  loss_rel: 0.4173  loss_refine_obj: 4.693  binary_loss: 0.6928  loss_mask_segmentation: 0.2243  time: 3.9570  data_time: 0.3032  lr: 0.00026069  max_mem: 13263M
[04/17 11:34:38] d2.utils.events INFO:  eta: 4:14:56  iter: 39  total_loss: 4.436  loss_rel: 0.3828  loss_refine_obj: 2.966  binary_loss: 0.6931  loss_mask_segmentation: 0.2359  time: 3.9841  data_time: 0.2634  lr: 0.00027194  max_mem: 13787M
[04/17 11:36:10] d2.utils.events INFO:  eta: 4:26:17  iter: 59  total_loss: 3.959  loss_rel: 0.3279  loss_refine_obj: 2.677  binary_loss: 0.6931  loss_mask_segmentation: 0.2244  time: 4.1854  data_time: 0.5713  lr: 0.00028319  max_mem: 13787M
[04/17 11:37:30] d2.utils.events INFO:  eta: 4:20:12  iter: 79  total_loss: 3.768  loss_rel: 0.3486  loss_refine_obj: 2.453  binary_loss: 0.6931  loss_mask_segmentation: 0.2315  time: 4.1469  data_time: 0.2053  lr: 0.00029444  max_mem: 13787M
[04/17 11:38:48] d2.utils.events INFO:  eta: 4:18:52  iter: 99  total_loss: 3.416  loss_rel: 0.3435  loss_refine_obj: 2.174  binary_loss: 0.6931  loss_mask_segmentation: 0.2051  time: 4.0939  data_time: 0.1967  lr: 0.00030569  max_mem: 13975M
[04/17 11:40:10] d2.utils.events INFO:  eta: 4:17:23  iter: 119  total_loss: 3.435  loss_rel: 0.3406  loss_refine_obj: 2.22  binary_loss: 0.6931  loss_mask_segmentation: 0.2418  time: 4.0929  data_time: 0.2238  lr: 0.00031694  max_mem: 13975M
[04/17 11:41:29] d2.utils.events INFO:  eta: 4:14:51  iter: 139  total_loss: 3.426  loss_rel: 0.3406  loss_refine_obj: 2.138  binary_loss: 0.6931  loss_mask_segmentation: 0.2164  time: 4.0708  data_time: 0.2281  lr: 0.00032819  max_mem: 14482M
[04/17 11:42:51] d2.utils.events INFO:  eta: 4:13:32  iter: 159  total_loss: 3.311  loss_rel: 0.2805  loss_refine_obj: 2.106  binary_loss: 0.6931  loss_mask_segmentation: 0.2326  time: 4.0769  data_time: 0.2274  lr: 0.00033944  max_mem: 14482M
[04/17 11:44:08] d2.utils.events INFO:  eta: 4:09:27  iter: 179  total_loss: 3.239  loss_rel: 0.2702  loss_refine_obj: 2.046  binary_loss: 0.6931  loss_mask_segmentation: 0.2231  time: 4.0486  data_time: 0.2002  lr: 0.00035069  max_mem: 14482M
[04/17 11:45:30] d2.utils.events INFO:  eta: 4:08:09  iter: 199  total_loss: 3.15  loss_rel: 0.3157  loss_refine_obj: 1.947  binary_loss: 0.6931  loss_mask_segmentation: 0.2254  time: 4.0554  data_time: 0.2388  lr: 0.00036194  max_mem: 14482M
[04/17 11:46:50] d2.utils.events INFO:  eta: 4:07:11  iter: 219  total_loss: 3.235  loss_rel: 0.3554  loss_refine_obj: 2.011  binary_loss: 0.6931  loss_mask_segmentation: 0.2316  time: 4.0517  data_time: 0.2170  lr: 0.00037319  max_mem: 14482M
[04/17 11:48:08] d2.utils.events INFO:  eta: 4:05:13  iter: 239  total_loss: 3.261  loss_rel: 0.3186  loss_refine_obj: 1.954  binary_loss: 0.6931  loss_mask_segmentation: 0.2213  time: 4.0377  data_time: 0.1872  lr: 0.00038444  max_mem: 14482M
[04/17 11:49:28] d2.utils.events INFO:  eta: 4:03:30  iter: 259  total_loss: 3.138  loss_rel: 0.2643  loss_refine_obj: 1.947  binary_loss: 0.6931  loss_mask_segmentation: 0.2173  time: 4.0343  data_time: 0.1966  lr: 0.00039569  max_mem: 14482M
[04/17 11:50:49] d2.utils.events INFO:  eta: 4:02:21  iter: 279  total_loss: 3.372  loss_rel: 0.3461  loss_refine_obj: 2.071  binary_loss: 0.6931  loss_mask_segmentation: 0.2158  time: 4.0335  data_time: 0.2185  lr: 0.00040694  max_mem: 14482M
[04/17 11:52:10] d2.utils.events INFO:  eta: 4:00:54  iter: 299  total_loss: 3.23  loss_rel: 0.256  loss_refine_obj: 1.897  binary_loss: 0.6931  loss_mask_segmentation: 0.2363  time: 4.0367  data_time: 0.2045  lr: 0.00041819  max_mem: 14482M
[04/17 11:53:27] d2.utils.events INFO:  eta: 3:59:36  iter: 319  total_loss: 3.275  loss_rel: 0.2773  loss_refine_obj: 2.035  binary_loss: 0.6931  loss_mask_segmentation: 0.2307  time: 4.0238  data_time: 0.1972  lr: 0.00042944  max_mem: 14482M
[04/17 11:54:47] d2.utils.events INFO:  eta: 3:57:55  iter: 339  total_loss: 3.054  loss_rel: 0.2804  loss_refine_obj: 1.81  binary_loss: 0.6931  loss_mask_segmentation: 0.2314  time: 4.0217  data_time: 0.1984  lr: 0.00044069  max_mem: 14482M
[04/17 11:56:12] d2.utils.events INFO:  eta: 3:56:57  iter: 359  total_loss: 3.234  loss_rel: 0.2331  loss_refine_obj: 1.931  binary_loss: 0.6931  loss_mask_segmentation: 0.2318  time: 4.0349  data_time: 0.2231  lr: 0.00045194  max_mem: 14482M
[04/17 11:57:28] d2.utils.events INFO:  eta: 3:55:13  iter: 379  total_loss: 3.214  loss_rel: 0.3164  loss_refine_obj: 1.965  binary_loss: 0.6931  loss_mask_segmentation: 0.228  time: 4.0231  data_time: 0.2053  lr: 0.00046319  max_mem: 14482M
[04/17 11:58:51] d2.utils.events INFO:  eta: 3:53:50  iter: 399  total_loss: 3.066  loss_rel: 0.2816  loss_refine_obj: 1.833  binary_loss: 0.6931  loss_mask_segmentation: 0.2305  time: 4.0288  data_time: 0.2030  lr: 0.00047444  max_mem: 14528M
[04/17 12:00:13] d2.utils.events INFO:  eta: 3:52:32  iter: 419  total_loss: 3.083  loss_rel: 0.3426  loss_refine_obj: 1.883  binary_loss: 0.6931  loss_mask_segmentation: 0.2235  time: 4.0314  data_time: 0.2214  lr: 0.00048569  max_mem: 14528M
[04/17 12:01:36] d2.utils.events INFO:  eta: 3:51:33  iter: 439  total_loss: 2.924  loss_rel: 0.28  loss_refine_obj: 1.729  binary_loss: 0.6931  loss_mask_segmentation: 0.2339  time: 4.0369  data_time: 0.2255  lr: 0.00049694  max_mem: 14528M
[04/17 12:02:56] d2.utils.events INFO:  eta: 3:50:38  iter: 459  total_loss: 2.934  loss_rel: 0.298  loss_refine_obj: 1.733  binary_loss: 0.6931  loss_mask_segmentation: 0.2281  time: 4.0355  data_time: 0.2070  lr: 0.00050819  max_mem: 14528M
[04/17 12:04:15] d2.utils.events INFO:  eta: 3:49:13  iter: 479  total_loss: 2.949  loss_rel: 0.2622  loss_refine_obj: 1.72  binary_loss: 0.6931  loss_mask_segmentation: 0.2299  time: 4.0324  data_time: 0.2107  lr: 0.00051944  max_mem: 14528M
[04/17 12:05:35] d2.utils.events INFO:  eta: 3:47:55  iter: 499  total_loss: 2.738  loss_rel: 0.2468  loss_refine_obj: 1.563  binary_loss: 0.6931  loss_mask_segmentation: 0.2133  time: 4.0309  data_time: 0.2095  lr: 0.00053069  max_mem: 14528M
[04/17 12:06:59] d2.utils.events INFO:  eta: 3:46:37  iter: 519  total_loss: 2.997  loss_rel: 0.2979  loss_refine_obj: 1.668  binary_loss: 0.6931  loss_mask_segmentation: 0.2393  time: 4.0364  data_time: 0.2243  lr: 0.00054194  max_mem: 14528M
[04/17 12:08:16] d2.utils.events INFO:  eta: 3:45:16  iter: 539  total_loss: 2.839  loss_rel: 0.2687  loss_refine_obj: 1.644  binary_loss: 0.6931  loss_mask_segmentation: 0.2328  time: 4.0301  data_time: 0.2109  lr: 0.00055319  max_mem: 14528M
[04/17 12:09:37] d2.utils.events INFO:  eta: 3:43:56  iter: 559  total_loss: 2.847  loss_rel: 0.2849  loss_refine_obj: 1.674  binary_loss: 0.6931  loss_mask_segmentation: 0.2234  time: 4.0310  data_time: 0.1957  lr: 0.00056444  max_mem: 14528M
[04/17 12:11:02] d2.utils.events INFO:  eta: 3:43:03  iter: 579  total_loss: 2.899  loss_rel: 0.2995  loss_refine_obj: 1.682  binary_loss: 0.6931  loss_mask_segmentation: 0.2427  time: 4.0382  data_time: 0.2426  lr: 0.00057569  max_mem: 14528M
[04/17 12:12:19] d2.utils.events INFO:  eta: 3:41:24  iter: 599  total_loss: 2.817  loss_rel: 0.2841  loss_refine_obj: 1.687  binary_loss: 0.6931  loss_mask_segmentation: 0.2364  time: 4.0316  data_time: 0.2098  lr: 0.00058694  max_mem: 14528M
[04/17 12:13:42] d2.utils.events INFO:  eta: 3:40:36  iter: 619  total_loss: 2.765  loss_rel: 0.2999  loss_refine_obj: 1.465  binary_loss: 0.6931  loss_mask_segmentation: 0.2433  time: 4.0361  data_time: 0.1985  lr: 0.00059819  max_mem: 14528M
[04/17 12:15:04] d2.utils.events INFO:  eta: 3:39:18  iter: 639  total_loss: 2.956  loss_rel: 0.313  loss_refine_obj: 1.76  binary_loss: 0.6931  loss_mask_segmentation: 0.2288  time: 4.0372  data_time: 0.2062  lr: 0.00060944  max_mem: 14528M
[04/17 12:16:24] d2.utils.events INFO:  eta: 3:37:49  iter: 659  total_loss: 2.775  loss_rel: 0.2455  loss_refine_obj: 1.66  binary_loss: 0.6931  loss_mask_segmentation: 0.2239  time: 4.0359  data_time: 0.2610  lr: 0.00062069  max_mem: 14528M
[04/17 12:17:42] d2.utils.events INFO:  eta: 3:36:18  iter: 679  total_loss: 2.79  loss_rel: 0.2755  loss_refine_obj: 1.618  binary_loss: 0.6931  loss_mask_segmentation: 0.2196  time: 4.0316  data_time: 0.1957  lr: 0.00063194  max_mem: 14528M
[04/17 12:19:02] d2.utils.events INFO:  eta: 3:34:53  iter: 699  total_loss: 2.603  loss_rel: 0.2238  loss_refine_obj: 1.436  binary_loss: 0.6931  loss_mask_segmentation: 0.2299  time: 4.0313  data_time: 0.2095  lr: 0.00064319  max_mem: 15004M
[04/17 12:20:25] d2.utils.events INFO:  eta: 3:33:36  iter: 719  total_loss: 2.604  loss_rel: 0.2084  loss_refine_obj: 1.406  binary_loss: 0.6931  loss_mask_segmentation: 0.2314  time: 4.0341  data_time: 0.2090  lr: 0.00065444  max_mem: 15004M
[04/17 12:21:43] d2.utils.events INFO:  eta: 3:32:16  iter: 739  total_loss: 2.574  loss_rel: 0.2643  loss_refine_obj: 1.375  binary_loss: 0.6931  loss_mask_segmentation: 0.236  time: 4.0305  data_time: 0.2142  lr: 0.00066569  max_mem: 15004M
[04/17 12:23:03] d2.utils.events INFO:  eta: 3:30:57  iter: 759  total_loss: 2.514  loss_rel: 0.2704  loss_refine_obj: 1.322  binary_loss: 0.6931  loss_mask_segmentation: 0.2236  time: 4.0305  data_time: 0.1996  lr: 0.00067694  max_mem: 15004M
[04/17 12:24:26] d2.utils.events INFO:  eta: 3:29:40  iter: 779  total_loss: 2.545  loss_rel: 0.2489  loss_refine_obj: 1.309  binary_loss: 0.6931  loss_mask_segmentation: 0.2225  time: 4.0327  data_time: 0.2206  lr: 0.00068819  max_mem: 15004M
[04/17 12:25:45] d2.utils.events INFO:  eta: 3:28:14  iter: 799  total_loss: 2.699  loss_rel: 0.2898  loss_refine_obj: 1.51  binary_loss: 0.6931  loss_mask_segmentation: 0.2271  time: 4.0308  data_time: 0.2183  lr: 0.00069944  max_mem: 15004M
[04/17 12:27:02] d2.utils.events INFO:  eta: 3:26:47  iter: 819  total_loss: 2.631  loss_rel: 0.2575  loss_refine_obj: 1.42  binary_loss: 0.6931  loss_mask_segmentation: 0.2384  time: 4.0270  data_time: 0.2006  lr: 0.00071069  max_mem: 15004M
[04/17 12:28:23] d2.utils.events INFO:  eta: 3:25:28  iter: 839  total_loss: 2.544  loss_rel: 0.2362  loss_refine_obj: 1.334  binary_loss: 0.6931  loss_mask_segmentation: 0.2356  time: 4.0266  data_time: 0.1966  lr: 0.00072194  max_mem: 15004M
[04/17 12:29:42] d2.utils.events INFO:  eta: 3:23:57  iter: 859  total_loss: 2.517  loss_rel: 0.2219  loss_refine_obj: 1.409  binary_loss: 0.6931  loss_mask_segmentation: 0.2135  time: 4.0252  data_time: 0.1913  lr: 0.00073319  max_mem: 15004M
[04/17 12:31:06] d2.utils.events INFO:  eta: 3:22:53  iter: 879  total_loss: 2.652  loss_rel: 0.2234  loss_refine_obj: 1.455  binary_loss: 0.6931  loss_mask_segmentation: 0.2328  time: 4.0295  data_time: 0.3597  lr: 0.00074444  max_mem: 15004M
[04/17 12:32:28] d2.utils.events INFO:  eta: 3:21:44  iter: 899  total_loss: 2.572  loss_rel: 0.2732  loss_refine_obj: 1.421  binary_loss: 0.6931  loss_mask_segmentation: 0.2254  time: 4.0309  data_time: 0.2165  lr: 0.00075569  max_mem: 15004M
[04/17 12:33:54] d2.utils.events INFO:  eta: 3:20:40  iter: 919  total_loss: 2.549  loss_rel: 0.2194  loss_refine_obj: 1.287  binary_loss: 0.6931  loss_mask_segmentation: 0.2377  time: 4.0363  data_time: 0.2075  lr: 0.00076694  max_mem: 15004M
[04/17 12:35:16] d2.utils.events INFO:  eta: 3:19:41  iter: 939  total_loss: 2.493  loss_rel: 0.2723  loss_refine_obj: 1.263  binary_loss: 0.6931  loss_mask_segmentation: 0.2191  time: 4.0376  data_time: 0.2129  lr: 0.00077819  max_mem: 15004M
[04/17 12:36:34] d2.utils.events INFO:  eta: 3:18:16  iter: 959  total_loss: 2.494  loss_rel: 0.2267  loss_refine_obj: 1.29  binary_loss: 0.6931  loss_mask_segmentation: 0.2235  time: 4.0346  data_time: 0.2103  lr: 0.00078944  max_mem: 15004M
[04/17 12:37:52] d2.utils.events INFO:  eta: 3:16:39  iter: 979  total_loss: 2.498  loss_rel: 0.2533  loss_refine_obj: 1.29  binary_loss: 0.6931  loss_mask_segmentation: 0.2191  time: 4.0324  data_time: 0.2040  lr: 0.00080069  max_mem: 15004M
[04/17 12:39:17] d2.utils.events INFO:  eta: 3:15:39  iter: 999  total_loss: 2.361  loss_rel: 0.2578  loss_refine_obj: 1.204  binary_loss: 0.6931  loss_mask_segmentation: 0.2419  time: 4.0365  data_time: 0.2033  lr: 0.00081194  max_mem: 15004M
[04/17 12:40:39] d2.utils.events INFO:  eta: 3:14:36  iter: 1019  total_loss: 2.426  loss_rel: 0.2837  loss_refine_obj: 1.285  binary_loss: 0.6931  loss_mask_segmentation: 0.2254  time: 4.0377  data_time: 0.1974  lr: 0.00082319  max_mem: 15004M
[04/17 12:41:57] d2.utils.events INFO:  eta: 3:13:11  iter: 1039  total_loss: 2.504  loss_rel: 0.2721  loss_refine_obj: 1.313  binary_loss: 0.6931  loss_mask_segmentation: 0.2273  time: 4.0353  data_time: 0.2177  lr: 0.00083444  max_mem: 15004M
[04/17 12:43:18] d2.utils.events INFO:  eta: 3:11:13  iter: 1059  total_loss: 2.416  loss_rel: 0.3044  loss_refine_obj: 1.169  binary_loss: 0.6931  loss_mask_segmentation: 0.2244  time: 4.0353  data_time: 0.1970  lr: 0.00084569  max_mem: 15004M
[04/17 12:44:38] d2.utils.events INFO:  eta: 3:10:05  iter: 1079  total_loss: 2.276  loss_rel: 0.2377  loss_refine_obj: 1.118  binary_loss: 0.6931  loss_mask_segmentation: 0.2348  time: 4.0340  data_time: 0.1869  lr: 0.00085694  max_mem: 15004M
[04/17 12:45:55] d2.utils.events INFO:  eta: 3:08:35  iter: 1099  total_loss: 2.405  loss_rel: 0.2871  loss_refine_obj: 1.213  binary_loss: 0.6931  loss_mask_segmentation: 0.2256  time: 4.0311  data_time: 0.2088  lr: 0.00086819  max_mem: 15004M
[04/17 12:47:13] d2.utils.events INFO:  eta: 3:07:19  iter: 1119  total_loss: 2.346  loss_rel: 0.1995  loss_refine_obj: 1.181  binary_loss: 0.6931  loss_mask_segmentation: 0.2207  time: 4.0283  data_time: 0.1888  lr: 0.00087944  max_mem: 15004M
[04/17 12:48:33] d2.utils.events INFO:  eta: 3:06:12  iter: 1139  total_loss: 2.392  loss_rel: 0.2442  loss_refine_obj: 1.185  binary_loss: 0.6931  loss_mask_segmentation: 0.2344  time: 4.0278  data_time: 0.1809  lr: 0.00089069  max_mem: 15004M
[04/17 12:49:49] d2.utils.events INFO:  eta: 3:04:46  iter: 1159  total_loss: 2.331  loss_rel: 0.2343  loss_refine_obj: 1.186  binary_loss: 0.6931  loss_mask_segmentation: 0.2113  time: 4.0242  data_time: 0.1946  lr: 0.00090194  max_mem: 15004M
[04/17 12:51:09] d2.utils.events INFO:  eta: 3:03:36  iter: 1179  total_loss: 2.326  loss_rel: 0.2866  loss_refine_obj: 1.133  binary_loss: 0.6931  loss_mask_segmentation: 0.2278  time: 4.0238  data_time: 0.2130  lr: 0.00091319  max_mem: 15004M
[04/17 12:52:27] d2.utils.events INFO:  eta: 3:02:07  iter: 1199  total_loss: 2.557  loss_rel: 0.2523  loss_refine_obj: 1.313  binary_loss: 0.6931  loss_mask_segmentation: 0.2241  time: 4.0213  data_time: 0.1963  lr: 0.00092444  max_mem: 15004M
[04/17 12:53:47] d2.utils.events INFO:  eta: 3:00:47  iter: 1219  total_loss: 2.345  loss_rel: 0.2463  loss_refine_obj: 1.176  binary_loss: 0.6931  loss_mask_segmentation: 0.2142  time: 4.0209  data_time: 0.1907  lr: 0.00093569  max_mem: 15004M
[04/17 12:55:02] d2.utils.events INFO:  eta: 2:59:23  iter: 1239  total_loss: 2.37  loss_rel: 0.2436  loss_refine_obj: 1.276  binary_loss: 0.6931  loss_mask_segmentation: 0.2325  time: 4.0170  data_time: 0.2096  lr: 0.00094694  max_mem: 15004M
[04/17 12:56:21] d2.utils.events INFO:  eta: 2:58:08  iter: 1259  total_loss: 2.26  loss_rel: 0.1937  loss_refine_obj: 1.05  binary_loss: 0.6931  loss_mask_segmentation: 0.2378  time: 4.0160  data_time: 0.2044  lr: 0.00095819  max_mem: 15004M
[04/17 12:57:45] d2.utils.events INFO:  eta: 2:56:53  iter: 1279  total_loss: 2.344  loss_rel: 0.2395  loss_refine_obj: 1.135  binary_loss: 0.6931  loss_mask_segmentation: 0.2325  time: 4.0182  data_time: 0.1981  lr: 0.00096944  max_mem: 15004M
[04/17 12:59:00] d2.utils.events INFO:  eta: 2:55:35  iter: 1299  total_loss: 2.396  loss_rel: 0.2499  loss_refine_obj: 1.219  binary_loss: 0.6931  loss_mask_segmentation: 0.2104  time: 4.0139  data_time: 0.1968  lr: 0.00098069  max_mem: 15004M
[04/17 13:00:20] d2.utils.events INFO:  eta: 2:54:21  iter: 1319  total_loss: 2.292  loss_rel: 0.2488  loss_refine_obj: 1.143  binary_loss: 0.6931  loss_mask_segmentation: 0.2276  time: 4.0139  data_time: 0.2068  lr: 0.00099194  max_mem: 15004M
[04/17 13:01:39] d2.utils.events INFO:  eta: 2:53:10  iter: 1339  total_loss: 2.251  loss_rel: 0.2297  loss_refine_obj: 1.142  binary_loss: 0.6931  loss_mask_segmentation: 0.2047  time: 4.0133  data_time: 0.2056  lr: 0.0010032  max_mem: 15004M
[04/17 13:02:59] d2.utils.events INFO:  eta: 2:51:45  iter: 1359  total_loss: 2.309  loss_rel: 0.2722  loss_refine_obj: 1.137  binary_loss: 0.6931  loss_mask_segmentation: 0.2178  time: 4.0132  data_time: 0.2019  lr: 0.0010144  max_mem: 15004M
[04/17 13:04:15] d2.utils.events INFO:  eta: 2:50:34  iter: 1379  total_loss: 2.352  loss_rel: 0.2529  loss_refine_obj: 1.203  binary_loss: 0.6931  loss_mask_segmentation: 0.222  time: 4.0100  data_time: 0.1960  lr: 0.0010257  max_mem: 15004M
[04/17 13:05:35] d2.utils.events INFO:  eta: 2:49:16  iter: 1399  total_loss: 2.24  loss_rel: 0.2078  loss_refine_obj: 1.097  binary_loss: 0.6931  loss_mask_segmentation: 0.2296  time: 4.0097  data_time: 0.2148  lr: 0.0010369  max_mem: 15004M
[04/17 13:06:58] d2.utils.events INFO:  eta: 2:48:00  iter: 1419  total_loss: 2.277  loss_rel: 0.2505  loss_refine_obj: 1.103  binary_loss: 0.6931  loss_mask_segmentation: 0.234  time: 4.0112  data_time: 0.2183  lr: 0.0010482  max_mem: 15004M
[04/17 13:08:15] d2.utils.events INFO:  eta: 2:46:39  iter: 1439  total_loss: 2.291  loss_rel: 0.2047  loss_refine_obj: 1.119  binary_loss: 0.6931  loss_mask_segmentation: 0.2409  time: 4.0092  data_time: 0.1834  lr: 0.0010594  max_mem: 15004M
[04/17 13:09:33] d2.utils.events INFO:  eta: 2:45:05  iter: 1459  total_loss: 2.165  loss_rel: 0.226  loss_refine_obj: 1.012  binary_loss: 0.6931  loss_mask_segmentation: 0.2166  time: 4.0080  data_time: 0.2024  lr: 0.0010707  max_mem: 15004M
[04/17 13:10:56] d2.utils.events INFO:  eta: 2:43:52  iter: 1479  total_loss: 2.156  loss_rel: 0.1914  loss_refine_obj: 1.081  binary_loss: 0.6931  loss_mask_segmentation: 0.2281  time: 4.0097  data_time: 0.1946  lr: 0.0010819  max_mem: 15004M
[04/17 13:12:12] d2.utils.events INFO:  eta: 2:42:29  iter: 1499  total_loss: 2.272  loss_rel: 0.2348  loss_refine_obj: 1.131  binary_loss: 0.6931  loss_mask_segmentation: 0.2266  time: 4.0065  data_time: 0.2296  lr: 0.0010932  max_mem: 15004M
[04/17 13:13:32] d2.utils.events INFO:  eta: 2:41:06  iter: 1519  total_loss: 2.221  loss_rel: 0.194  loss_refine_obj: 1.074  binary_loss: 0.6931  loss_mask_segmentation: 0.2382  time: 4.0066  data_time: 0.1807  lr: 0.0011044  max_mem: 15004M
[04/17 13:14:56] d2.utils.events INFO:  eta: 2:39:58  iter: 1539  total_loss: 2.211  loss_rel: 0.187  loss_refine_obj: 1.132  binary_loss: 0.6931  loss_mask_segmentation: 0.2229  time: 4.0091  data_time: 0.2112  lr: 0.0011157  max_mem: 15004M
[04/17 13:16:20] d2.utils.events INFO:  eta: 2:38:46  iter: 1559  total_loss: 2.266  loss_rel: 0.1959  loss_refine_obj: 1.13  binary_loss: 0.6931  loss_mask_segmentation: 0.227  time: 4.0115  data_time: 0.2131  lr: 0.0011269  max_mem: 15004M
[04/17 13:17:38] d2.utils.events INFO:  eta: 2:37:22  iter: 1579  total_loss: 2.198  loss_rel: 0.213  loss_refine_obj: 1.082  binary_loss: 0.6931  loss_mask_segmentation: 0.2357  time: 4.0100  data_time: 0.1909  lr: 0.0011382  max_mem: 15004M
[04/17 13:19:02] d2.utils.events INFO:  eta: 2:36:13  iter: 1599  total_loss: 2.263  loss_rel: 0.2157  loss_refine_obj: 1.108  binary_loss: 0.6931  loss_mask_segmentation: 0.2283  time: 4.0124  data_time: 0.1998  lr: 0.0011494  max_mem: 15004M
[04/17 13:20:24] d2.utils.events INFO:  eta: 2:34:47  iter: 1619  total_loss: 2.275  loss_rel: 0.216  loss_refine_obj: 1.163  binary_loss: 0.6931  loss_mask_segmentation: 0.218  time: 4.0133  data_time: 0.1990  lr: 0.0011607  max_mem: 15004M
[04/17 13:21:44] d2.utils.events INFO:  eta: 2:33:29  iter: 1639  total_loss: 2.298  loss_rel: 0.2287  loss_refine_obj: 1.072  binary_loss: 0.6931  loss_mask_segmentation: 0.2204  time: 4.0134  data_time: 0.2051  lr: 0.0011719  max_mem: 15004M
[04/17 13:23:01] d2.utils.events INFO:  eta: 2:32:10  iter: 1659  total_loss: 2.328  loss_rel: 0.2334  loss_refine_obj: 1.174  binary_loss: 0.6931  loss_mask_segmentation: 0.2189  time: 4.0116  data_time: 0.1999  lr: 0.0011832  max_mem: 15004M
[04/17 13:24:21] d2.utils.events INFO:  eta: 2:30:47  iter: 1679  total_loss: 2.376  loss_rel: 0.219  loss_refine_obj: 1.201  binary_loss: 0.6931  loss_mask_segmentation: 0.2327  time: 4.0113  data_time: 0.1968  lr: 0.0011944  max_mem: 15004M
[04/17 13:25:41] d2.utils.events INFO:  eta: 2:29:29  iter: 1699  total_loss: 2.159  loss_rel: 0.1962  loss_refine_obj: 1.017  binary_loss: 0.6931  loss_mask_segmentation: 0.2209  time: 4.0112  data_time: 0.2081  lr: 0.0012057  max_mem: 15004M
[04/17 13:26:59] d2.utils.events INFO:  eta: 2:28:11  iter: 1719  total_loss: 2.236  loss_rel: 0.2161  loss_refine_obj: 1.043  binary_loss: 0.6931  loss_mask_segmentation: 0.2307  time: 4.0098  data_time: 0.1874  lr: 0.0012169  max_mem: 15004M
[04/17 13:28:20] d2.utils.events INFO:  eta: 2:26:56  iter: 1739  total_loss: 2.21  loss_rel: 0.2183  loss_refine_obj: 1.044  binary_loss: 0.6931  loss_mask_segmentation: 0.2205  time: 4.0101  data_time: 0.1955  lr: 0.0012282  max_mem: 15004M
[04/17 13:29:40] d2.utils.events INFO:  eta: 2:25:35  iter: 1759  total_loss: 2.348  loss_rel: 0.2333  loss_refine_obj: 1.14  binary_loss: 0.6931  loss_mask_segmentation: 0.2303  time: 4.0101  data_time: 0.1941  lr: 0.0012394  max_mem: 15004M
[04/17 13:31:01] d2.utils.events INFO:  eta: 2:24:12  iter: 1779  total_loss: 2.373  loss_rel: 0.2175  loss_refine_obj: 1.202  binary_loss: 0.6931  loss_mask_segmentation: 0.2298  time: 4.0104  data_time: 0.2035  lr: 0.0012507  max_mem: 15004M
[04/17 13:32:21] d2.utils.events INFO:  eta: 2:23:02  iter: 1799  total_loss: 2.285  loss_rel: 0.2657  loss_refine_obj: 1.1  binary_loss: 0.6931  loss_mask_segmentation: 0.2299  time: 4.0101  data_time: 0.2045  lr: 0.0012619  max_mem: 15004M
[04/17 13:33:41] d2.utils.events INFO:  eta: 2:21:46  iter: 1819  total_loss: 2.165  loss_rel: 0.2049  loss_refine_obj: 1.019  binary_loss: 0.6931  loss_mask_segmentation: 0.2241  time: 4.0104  data_time: 0.2065  lr: 0.0012732  max_mem: 15004M
[04/17 13:35:05] d2.utils.events INFO:  eta: 2:20:30  iter: 1839  total_loss: 2.293  loss_rel: 0.2731  loss_refine_obj: 1.122  binary_loss: 0.6931  loss_mask_segmentation: 0.2347  time: 4.0124  data_time: 0.2758  lr: 0.0012844  max_mem: 15004M
[04/17 13:36:28] d2.utils.events INFO:  eta: 2:19:22  iter: 1859  total_loss: 2.195  loss_rel: 0.1898  loss_refine_obj: 1.058  binary_loss: 0.6931  loss_mask_segmentation: 0.2262  time: 4.0134  data_time: 0.2052  lr: 0.0012957  max_mem: 15004M
[04/17 13:37:46] d2.utils.events INFO:  eta: 2:17:54  iter: 1879  total_loss: 2.315  loss_rel: 0.2497  loss_refine_obj: 1.139  binary_loss: 0.6931  loss_mask_segmentation: 0.2104  time: 4.0124  data_time: 0.2008  lr: 0.0013069  max_mem: 15004M
[04/17 13:39:06] d2.utils.events INFO:  eta: 2:16:30  iter: 1899  total_loss: 2.308  loss_rel: 0.2153  loss_refine_obj: 1.118  binary_loss: 0.6931  loss_mask_segmentation: 0.2253  time: 4.0124  data_time: 0.1998  lr: 0.0013182  max_mem: 15004M
[04/17 13:40:28] d2.utils.events INFO:  eta: 2:14:58  iter: 1919  total_loss: 2.395  loss_rel: 0.2651  loss_refine_obj: 1.218  binary_loss: 0.6931  loss_mask_segmentation: 0.2482  time: 4.0131  data_time: 0.1726  lr: 0.0013294  max_mem: 15004M
[04/17 13:41:47] d2.utils.events INFO:  eta: 2:13:40  iter: 1939  total_loss: 2.308  loss_rel: 0.2189  loss_refine_obj: 1.122  binary_loss: 0.6931  loss_mask_segmentation: 0.2289  time: 4.0122  data_time: 0.1997  lr: 0.0013407  max_mem: 15004M
[04/17 13:43:06] d2.utils.events INFO:  eta: 2:12:20  iter: 1959  total_loss: 2.143  loss_rel: 0.2048  loss_refine_obj: 1.04  binary_loss: 0.6931  loss_mask_segmentation: 0.225  time: 4.0116  data_time: 0.1892  lr: 0.0013519  max_mem: 15004M
[04/17 13:44:28] d2.utils.events INFO:  eta: 2:11:06  iter: 1979  total_loss: 2.232  loss_rel: 0.2286  loss_refine_obj: 1.135  binary_loss: 0.6931  loss_mask_segmentation: 0.227  time: 4.0125  data_time: 0.1877  lr: 0.0013632  max_mem: 15004M
[04/17 13:45:50] fvcore.common.checkpoint INFO: Saving checkpoint to ../output-step3-vctree-short-vg/model_0001999.pth
[04/17 13:46:15] d2.utils.events INFO:  eta: 2:09:41  iter: 1999  total_loss: 2.27  loss_rel: 0.2174  loss_refine_obj: 1.112  binary_loss: 0.6931  loss_mask_segmentation: 0.2271  time: 4.0134  data_time: 0.1975  lr: 0.0013744  max_mem: 15004M
[04/17 13:47:32] d2.utils.events INFO:  eta: 2:08:19  iter: 2019  total_loss: 2.25  loss_rel: 0.2103  loss_refine_obj: 1.088  binary_loss: 0.6931  loss_mask_segmentation: 0.2139  time: 4.0115  data_time: 0.1816  lr: 0.0013857  max_mem: 15004M
[04/17 13:49:02] d2.utils.events INFO:  eta: 2:07:13  iter: 2039  total_loss: 2.213  loss_rel: 0.2194  loss_refine_obj: 1.039  binary_loss: 0.6931  loss_mask_segmentation: 0.2282  time: 4.0163  data_time: 0.2724  lr: 0.0013969  max_mem: 15004M
[04/17 13:50:23] d2.utils.events INFO:  eta: 2:05:58  iter: 2059  total_loss: 2.238  loss_rel: 0.2133  loss_refine_obj: 1.114  binary_loss: 0.6931  loss_mask_segmentation: 0.2201  time: 4.0167  data_time: 0.2022  lr: 0.0014082  max_mem: 15004M
[04/17 13:51:42] d2.utils.events INFO:  eta: 2:04:35  iter: 2079  total_loss: 2.038  loss_rel: 0.2206  loss_refine_obj: 0.9224  binary_loss: 0.6931  loss_mask_segmentation: 0.2229  time: 4.0160  data_time: 0.1985  lr: 0.0014194  max_mem: 15004M
[04/17 13:52:58] d2.utils.events INFO:  eta: 2:03:12  iter: 2099  total_loss: 2.198  loss_rel: 0.2512  loss_refine_obj: 1.036  binary_loss: 0.6931  loss_mask_segmentation: 0.215  time: 4.0139  data_time: 0.1794  lr: 0.0014307  max_mem: 15004M
[04/17 13:54:20] d2.utils.events INFO:  eta: 2:01:54  iter: 2119  total_loss: 2.21  loss_rel: 0.1936  loss_refine_obj: 1.05  binary_loss: 0.6931  loss_mask_segmentation: 0.2174  time: 4.0145  data_time: 0.1880  lr: 0.0014419  max_mem: 15004M
[04/17 13:55:40] d2.utils.events INFO:  eta: 2:00:34  iter: 2139  total_loss: 2.25  loss_rel: 0.2127  loss_refine_obj: 1.1  binary_loss: 0.6931  loss_mask_segmentation: 0.2309  time: 4.0146  data_time: 0.1840  lr: 0.0014532  max_mem: 15004M
[04/17 13:56:59] d2.utils.events INFO:  eta: 1:59:16  iter: 2159  total_loss: 2.202  loss_rel: 0.2067  loss_refine_obj: 1.061  binary_loss: 0.6931  loss_mask_segmentation: 0.235  time: 4.0140  data_time: 0.2027  lr: 0.0014644  max_mem: 15004M
[04/17 13:58:19] d2.utils.events INFO:  eta: 1:57:53  iter: 2179  total_loss: 2.255  loss_rel: 0.1791  loss_refine_obj: 1.126  binary_loss: 0.6931  loss_mask_segmentation: 0.2076  time: 4.0139  data_time: 0.1756  lr: 0.0014757  max_mem: 15004M
[04/17 13:59:39] d2.utils.events INFO:  eta: 1:56:35  iter: 2199  total_loss: 2.161  loss_rel: 0.2418  loss_refine_obj: 0.9803  binary_loss: 0.6931  loss_mask_segmentation: 0.231  time: 4.0137  data_time: 0.1788  lr: 0.0014869  max_mem: 15004M
[04/17 14:01:00] d2.utils.events INFO:  eta: 1:55:11  iter: 2219  total_loss: 2.263  loss_rel: 0.2251  loss_refine_obj: 1.086  binary_loss: 0.6931  loss_mask_segmentation: 0.2413  time: 4.0138  data_time: 0.1944  lr: 0.0014982  max_mem: 15004M
[04/17 14:02:15] d2.utils.events INFO:  eta: 1:53:57  iter: 2239  total_loss: 2.137  loss_rel: 0.2165  loss_refine_obj: 1.007  binary_loss: 0.6931  loss_mask_segmentation: 0.2161  time: 4.0117  data_time: 0.1812  lr: 0.0015094  max_mem: 15004M
[04/17 14:03:36] d2.utils.events INFO:  eta: 1:52:43  iter: 2259  total_loss: 2.26  loss_rel: 0.212  loss_refine_obj: 1.111  binary_loss: 0.6931  loss_mask_segmentation: 0.2346  time: 4.0119  data_time: 0.1811  lr: 0.0015207  max_mem: 15004M
[04/17 14:04:55] d2.utils.events INFO:  eta: 1:51:15  iter: 2279  total_loss: 2.221  loss_rel: 0.2111  loss_refine_obj: 1.089  binary_loss: 0.6931  loss_mask_segmentation: 0.227  time: 4.0113  data_time: 0.1869  lr: 0.0015319  max_mem: 15004M
[04/17 14:06:17] d2.utils.events INFO:  eta: 1:49:59  iter: 2299  total_loss: 2.352  loss_rel: 0.222  loss_refine_obj: 1.132  binary_loss: 0.6931  loss_mask_segmentation: 0.2337  time: 4.0121  data_time: 0.1908  lr: 0.0015432  max_mem: 15004M
[04/17 14:07:38] d2.utils.events INFO:  eta: 1:48:43  iter: 2319  total_loss: 2.24  loss_rel: 0.2112  loss_refine_obj: 1.029  binary_loss: 0.6931  loss_mask_segmentation: 0.2429  time: 4.0123  data_time: 0.1905  lr: 0.0015544  max_mem: 15004M
[04/17 14:08:57] d2.utils.events INFO:  eta: 1:47:25  iter: 2339  total_loss: 2.209  loss_rel: 0.2153  loss_refine_obj: 1.015  binary_loss: 0.6931  loss_mask_segmentation: 0.2243  time: 4.0119  data_time: 0.1903  lr: 0.0015657  max_mem: 15004M
[04/17 14:10:17] d2.utils.events INFO:  eta: 1:46:04  iter: 2359  total_loss: 2.165  loss_rel: 0.1833  loss_refine_obj: 1.043  binary_loss: 0.6931  loss_mask_segmentation: 0.2291  time: 4.0118  data_time: 0.1778  lr: 0.0015769  max_mem: 15004M
[04/17 14:11:33] d2.utils.events INFO:  eta: 1:44:50  iter: 2379  total_loss: 2.323  loss_rel: 0.1901  loss_refine_obj: 1.032  binary_loss: 0.6931  loss_mask_segmentation: 0.2251  time: 4.0101  data_time: 0.1929  lr: 0.0015882  max_mem: 15004M
[04/17 14:12:56] d2.utils.events INFO:  eta: 1:43:39  iter: 2399  total_loss: 2.228  loss_rel: 0.2119  loss_refine_obj: 1.101  binary_loss: 0.6931  loss_mask_segmentation: 0.238  time: 4.0112  data_time: 0.1741  lr: 0.0015994  max_mem: 15004M
[04/17 14:14:18] d2.utils.events INFO:  eta: 1:42:21  iter: 2419  total_loss: 2.092  loss_rel: 0.1906  loss_refine_obj: 1.037  binary_loss: 0.6931  loss_mask_segmentation: 0.2118  time: 4.0118  data_time: 0.1838  lr: 0.0016107  max_mem: 15004M
[04/17 14:15:40] d2.utils.events INFO:  eta: 1:41:02  iter: 2439  total_loss: 2.235  loss_rel: 0.2433  loss_refine_obj: 1.099  binary_loss: 0.6931  loss_mask_segmentation: 0.2148  time: 4.0125  data_time: 0.1808  lr: 0.0016219  max_mem: 15004M
[04/17 14:16:56] d2.utils.events INFO:  eta: 1:39:44  iter: 2459  total_loss: 2.264  loss_rel: 0.214  loss_refine_obj: 1.082  binary_loss: 0.6931  loss_mask_segmentation: 0.2146  time: 4.0110  data_time: 0.1707  lr: 0.0016332  max_mem: 15004M
[04/17 14:18:18] d2.utils.events INFO:  eta: 1:38:26  iter: 2479  total_loss: 2.317  loss_rel: 0.2893  loss_refine_obj: 0.9993  binary_loss: 0.6931  loss_mask_segmentation: 0.2396  time: 4.0116  data_time: 0.1954  lr: 0.0016444  max_mem: 15004M
[04/17 14:19:39] d2.utils.events INFO:  eta: 1:37:08  iter: 2499  total_loss: 2.162  loss_rel: 0.218  loss_refine_obj: 1.018  binary_loss: 0.6931  loss_mask_segmentation: 0.2311  time: 4.0119  data_time: 0.1841  lr: 0.0016557  max_mem: 15004M
[04/17 14:21:04] d2.utils.events INFO:  eta: 1:36:01  iter: 2519  total_loss: 2.179  loss_rel: 0.1913  loss_refine_obj: 1.051  binary_loss: 0.6931  loss_mask_segmentation: 0.233  time: 4.0136  data_time: 0.1957  lr: 0.0016669  max_mem: 15004M
[04/17 14:22:19] d2.utils.events INFO:  eta: 1:34:34  iter: 2539  total_loss: 2.251  loss_rel: 0.2529  loss_refine_obj: 1.068  binary_loss: 0.6931  loss_mask_segmentation: 0.2325  time: 4.0117  data_time: 0.1792  lr: 0.0016782  max_mem: 15004M
[04/17 14:23:38] d2.utils.events INFO:  eta: 1:33:13  iter: 2559  total_loss: 2.275  loss_rel: 0.2228  loss_refine_obj: 1.117  binary_loss: 0.6931  loss_mask_segmentation: 0.213  time: 4.0110  data_time: 0.1706  lr: 0.0016894  max_mem: 15004M
[04/17 14:24:57] d2.utils.events INFO:  eta: 1:31:49  iter: 2579  total_loss: 2.187  loss_rel: 0.2046  loss_refine_obj: 1.032  binary_loss: 0.6931  loss_mask_segmentation: 0.2273  time: 4.0105  data_time: 0.1792  lr: 0.0017007  max_mem: 15004M
[04/17 14:26:13] d2.utils.events INFO:  eta: 1:30:12  iter: 2599  total_loss: 2.163  loss_rel: 0.2279  loss_refine_obj: 1.017  binary_loss: 0.6931  loss_mask_segmentation: 0.2267  time: 4.0090  data_time: 0.1773  lr: 0.0017119  max_mem: 15004M
[04/17 14:27:36] d2.utils.events INFO:  eta: 1:28:59  iter: 2619  total_loss: 2.285  loss_rel: 0.1907  loss_refine_obj: 1.157  binary_loss: 0.6931  loss_mask_segmentation: 0.2136  time: 4.0099  data_time: 0.1917  lr: 0.0017232  max_mem: 15004M
[04/17 14:28:55] d2.utils.events INFO:  eta: 1:27:33  iter: 2639  total_loss: 2.174  loss_rel: 0.2123  loss_refine_obj: 1.046  binary_loss: 0.6931  loss_mask_segmentation: 0.2297  time: 4.0094  data_time: 0.1662  lr: 0.0017344  max_mem: 15004M
[04/17 14:30:13] d2.utils.events INFO:  eta: 1:26:16  iter: 2659  total_loss: 2.101  loss_rel: 0.2075  loss_refine_obj: 0.9911  binary_loss: 0.6931  loss_mask_segmentation: 0.2356  time: 4.0085  data_time: 0.1678  lr: 0.0017457  max_mem: 15004M
[04/17 14:31:35] d2.utils.events INFO:  eta: 1:25:03  iter: 2679  total_loss: 2.185  loss_rel: 0.2249  loss_refine_obj: 1.013  binary_loss: 0.6931  loss_mask_segmentation: 0.2405  time: 4.0092  data_time: 0.1889  lr: 0.0017569  max_mem: 15004M
[04/17 14:32:54] d2.utils.events INFO:  eta: 1:23:46  iter: 2699  total_loss: 2.173  loss_rel: 0.209  loss_refine_obj: 1.035  binary_loss: 0.6931  loss_mask_segmentation: 0.209  time: 4.0091  data_time: 0.1666  lr: 0.0017682  max_mem: 15004M
[04/17 14:34:14] d2.utils.events INFO:  eta: 1:22:26  iter: 2719  total_loss: 2.222  loss_rel: 0.2378  loss_refine_obj: 1.026  binary_loss: 0.6931  loss_mask_segmentation: 0.222  time: 4.0089  data_time: 0.1661  lr: 0.0017794  max_mem: 15004M
[04/17 14:35:32] d2.utils.events INFO:  eta: 1:21:09  iter: 2739  total_loss: 2.271  loss_rel: 0.2417  loss_refine_obj: 1.063  binary_loss: 0.6931  loss_mask_segmentation: 0.2335  time: 4.0080  data_time: 0.1758  lr: 0.0017907  max_mem: 15004M
[04/17 14:36:53] d2.utils.events INFO:  eta: 1:19:52  iter: 2759  total_loss: 2.228  loss_rel: 0.2421  loss_refine_obj: 1.062  binary_loss: 0.6931  loss_mask_segmentation: 0.2361  time: 4.0082  data_time: 0.2223  lr: 0.0018019  max_mem: 15004M
[04/17 14:38:14] d2.utils.events INFO:  eta: 1:18:35  iter: 2779  total_loss: 2.233  loss_rel: 0.2199  loss_refine_obj: 1.116  binary_loss: 0.6931  loss_mask_segmentation: 0.2301  time: 4.0087  data_time: 0.1784  lr: 0.0018132  max_mem: 15004M
[04/17 14:39:36] d2.utils.events INFO:  eta: 1:17:17  iter: 2799  total_loss: 2.233  loss_rel: 0.2447  loss_refine_obj: 1.125  binary_loss: 0.6931  loss_mask_segmentation: 0.2332  time: 4.0091  data_time: 0.1810  lr: 0.0018244  max_mem: 15004M
[04/17 14:40:53] d2.utils.events INFO:  eta: 1:16:03  iter: 2819  total_loss: 2.241  loss_rel: 0.2125  loss_refine_obj: 1.132  binary_loss: 0.6931  loss_mask_segmentation: 0.2178  time: 4.0081  data_time: 0.1976  lr: 0.0018357  max_mem: 15004M
[04/17 14:42:12] d2.utils.events INFO:  eta: 1:14:41  iter: 2839  total_loss: 2.214  loss_rel: 0.1843  loss_refine_obj: 1.044  binary_loss: 0.6931  loss_mask_segmentation: 0.2137  time: 4.0076  data_time: 0.1684  lr: 0.0018469  max_mem: 15004M
[04/17 14:43:29] d2.utils.events INFO:  eta: 1:13:17  iter: 2859  total_loss: 2.188  loss_rel: 0.2275  loss_refine_obj: 1.081  binary_loss: 0.6931  loss_mask_segmentation: 0.2201  time: 4.0066  data_time: 0.1684  lr: 0.0018582  max_mem: 15004M
[04/17 14:44:45] d2.utils.events INFO:  eta: 1:11:59  iter: 2879  total_loss: 2.195  loss_rel: 0.2083  loss_refine_obj: 1.03  binary_loss: 0.6931  loss_mask_segmentation: 0.2278  time: 4.0051  data_time: 0.1820  lr: 0.0018694  max_mem: 15004M
[04/17 14:46:07] d2.utils.events INFO:  eta: 1:10:44  iter: 2899  total_loss: 2.309  loss_rel: 0.2322  loss_refine_obj: 1.182  binary_loss: 0.6931  loss_mask_segmentation: 0.2156  time: 4.0058  data_time: 0.1723  lr: 0.0018807  max_mem: 15004M
[04/17 14:47:28] d2.utils.events INFO:  eta: 1:09:25  iter: 2919  total_loss: 2.256  loss_rel: 0.2518  loss_refine_obj: 1.115  binary_loss: 0.6931  loss_mask_segmentation: 0.2215  time: 4.0059  data_time: 0.1698  lr: 0.0018919  max_mem: 15004M
[04/17 14:48:49] d2.utils.events INFO:  eta: 1:08:07  iter: 2939  total_loss: 2.305  loss_rel: 0.2533  loss_refine_obj: 1.12  binary_loss: 0.6931  loss_mask_segmentation: 0.2372  time: 4.0062  data_time: 0.1735  lr: 0.0019032  max_mem: 15004M
[04/17 14:50:07] d2.utils.events INFO:  eta: 1:06:50  iter: 2959  total_loss: 2.342  loss_rel: 0.2713  loss_refine_obj: 1.062  binary_loss: 0.6931  loss_mask_segmentation: 0.2425  time: 4.0054  data_time: 0.1686  lr: 0.0019144  max_mem: 15004M
[04/17 14:51:26] d2.utils.events INFO:  eta: 1:05:33  iter: 2979  total_loss: 2.233  loss_rel: 0.2048  loss_refine_obj: 1.03  binary_loss: 0.6931  loss_mask_segmentation: 0.2362  time: 4.0053  data_time: 0.1755  lr: 0.0019257  max_mem: 15004M
[04/17 14:52:49] d2.utils.events INFO:  eta: 1:04:19  iter: 2999  total_loss: 2.194  loss_rel: 0.201  loss_refine_obj: 1.072  binary_loss: 0.6931  loss_mask_segmentation: 0.2329  time: 4.0061  data_time: 0.1834  lr: 0.0019369  max_mem: 15004M
[04/17 14:54:04] d2.utils.events INFO:  eta: 1:03:00  iter: 3019  total_loss: 2.103  loss_rel: 0.1801  loss_refine_obj: 1.003  binary_loss: 0.6931  loss_mask_segmentation: 0.2152  time: 4.0043  data_time: 0.1685  lr: 0.0019482  max_mem: 15004M
[04/17 14:55:25] d2.utils.events INFO:  eta: 1:01:41  iter: 3039  total_loss: 2.179  loss_rel: 0.2115  loss_refine_obj: 1.023  binary_loss: 0.6931  loss_mask_segmentation: 0.2314  time: 4.0046  data_time: 0.1843  lr: 0.0019594  max_mem: 15004M
[04/17 14:56:43] d2.utils.events INFO:  eta: 1:00:23  iter: 3059  total_loss: 2.219  loss_rel: 0.1905  loss_refine_obj: 1.004  binary_loss: 0.6931  loss_mask_segmentation: 0.2263  time: 4.0041  data_time: 0.1972  lr: 0.0019707  max_mem: 15004M
[04/17 14:58:06] d2.utils.events INFO:  eta: 0:59:07  iter: 3079  total_loss: 2.278  loss_rel: 0.2456  loss_refine_obj: 1.101  binary_loss: 0.6931  loss_mask_segmentation: 0.2248  time: 4.0050  data_time: 0.1905  lr: 0.0019819  max_mem: 15004M
[04/17 14:59:22] d2.utils.events INFO:  eta: 0:57:50  iter: 3099  total_loss: 2.249  loss_rel: 0.2057  loss_refine_obj: 1.102  binary_loss: 0.6931  loss_mask_segmentation: 0.2123  time: 4.0036  data_time: 0.1659  lr: 0.0019932  max_mem: 15004M
[04/17 15:00:44] d2.utils.events INFO:  eta: 0:56:33  iter: 3119  total_loss: 2.278  loss_rel: 0.222  loss_refine_obj: 1.104  binary_loss: 0.6931  loss_mask_segmentation: 0.2318  time: 4.0044  data_time: 0.1759  lr: 0.0020044  max_mem: 15004M
[04/17 15:02:05] d2.utils.events INFO:  eta: 0:55:15  iter: 3139  total_loss: 2.244  loss_rel: 0.2129  loss_refine_obj: 1.063  binary_loss: 0.6931  loss_mask_segmentation: 0.2281  time: 4.0046  data_time: 0.1753  lr: 0.0020157  max_mem: 15004M
[04/17 15:03:25] d2.utils.events INFO:  eta: 0:53:58  iter: 3159  total_loss: 2.236  loss_rel: 0.2346  loss_refine_obj: 1.041  binary_loss: 0.6931  loss_mask_segmentation: 0.229  time: 4.0045  data_time: 0.1812  lr: 0.0020269  max_mem: 15004M
[04/17 15:04:44] d2.utils.events INFO:  eta: 0:52:41  iter: 3179  total_loss: 2.205  loss_rel: 0.2309  loss_refine_obj: 1.083  binary_loss: 0.6931  loss_mask_segmentation: 0.2254  time: 4.0040  data_time: 0.1914  lr: 0.0020382  max_mem: 15004M
[04/17 15:06:08] d2.utils.events INFO:  eta: 0:51:28  iter: 3199  total_loss: 2.234  loss_rel: 0.22  loss_refine_obj: 1.052  binary_loss: 0.6931  loss_mask_segmentation: 0.2296  time: 4.0052  data_time: 0.1944  lr: 0.0020494  max_mem: 15004M
[04/17 15:07:33] d2.utils.events INFO:  eta: 0:50:21  iter: 3219  total_loss: 2.162  loss_rel: 0.2223  loss_refine_obj: 0.999  binary_loss: 0.6931  loss_mask_segmentation: 0.2384  time: 4.0068  data_time: 0.1900  lr: 0.0020607  max_mem: 15004M
[04/17 15:08:56] d2.utils.events INFO:  eta: 0:49:12  iter: 3239  total_loss: 2.189  loss_rel: 0.233  loss_refine_obj: 0.9675  binary_loss: 0.6931  loss_mask_segmentation: 0.228  time: 4.0076  data_time: 0.1938  lr: 0.0020719  max_mem: 15004M
[04/17 15:10:18] d2.utils.events INFO:  eta: 0:47:54  iter: 3259  total_loss: 2.148  loss_rel: 0.2056  loss_refine_obj: 1.039  binary_loss: 0.6931  loss_mask_segmentation: 0.2117  time: 4.0081  data_time: 0.1862  lr: 0.0020832  max_mem: 15004M
[04/17 15:11:41] d2.utils.events INFO:  eta: 0:46:39  iter: 3279  total_loss: 2.256  loss_rel: 0.238  loss_refine_obj: 1.054  binary_loss: 0.6931  loss_mask_segmentation: 0.2365  time: 4.0092  data_time: 0.1820  lr: 0.0020944  max_mem: 15004M
[04/17 15:13:02] d2.utils.events INFO:  eta: 0:45:20  iter: 3299  total_loss: 2.237  loss_rel: 0.2375  loss_refine_obj: 1.026  binary_loss: 0.6931  loss_mask_segmentation: 0.2323  time: 4.0094  data_time: 0.1776  lr: 0.0021057  max_mem: 15004M
[04/17 15:14:22] d2.utils.events INFO:  eta: 0:44:01  iter: 3319  total_loss: 2.225  loss_rel: 0.2223  loss_refine_obj: 1.1  binary_loss: 0.6931  loss_mask_segmentation: 0.226  time: 4.0092  data_time: 0.1802  lr: 0.0021169  max_mem: 15004M
[04/17 15:15:44] d2.utils.events INFO:  eta: 0:42:44  iter: 3339  total_loss: 2.341  loss_rel: 0.2723  loss_refine_obj: 1.13  binary_loss: 0.6931  loss_mask_segmentation: 0.2297  time: 4.0097  data_time: 0.1728  lr: 0.0021282  max_mem: 15004M
[04/17 15:17:09] d2.utils.events INFO:  eta: 0:41:27  iter: 3359  total_loss: 2.145  loss_rel: 0.2312  loss_refine_obj: 0.9714  binary_loss: 0.6931  loss_mask_segmentation: 0.2329  time: 4.0113  data_time: 0.1926  lr: 0.0021394  max_mem: 15004M
[04/17 15:18:34] d2.utils.events INFO:  eta: 0:40:10  iter: 3379  total_loss: 2.189  loss_rel: 0.2115  loss_refine_obj: 1.056  binary_loss: 0.6931  loss_mask_segmentation: 0.2323  time: 4.0125  data_time: 0.1777  lr: 0.0021507  max_mem: 15004M
[04/17 15:19:52] d2.utils.events INFO:  eta: 0:38:52  iter: 3399  total_loss: 2.307  loss_rel: 0.2291  loss_refine_obj: 1.049  binary_loss: 0.6931  loss_mask_segmentation: 0.2288  time: 4.0118  data_time: 0.1868  lr: 0.0021619  max_mem: 15004M
[04/17 15:21:15] d2.utils.events INFO:  eta: 0:37:35  iter: 3419  total_loss: 2.133  loss_rel: 0.2243  loss_refine_obj: 1.022  binary_loss: 0.6931  loss_mask_segmentation: 0.2213  time: 4.0128  data_time: 0.1924  lr: 0.0021732  max_mem: 15004M
[04/17 15:22:39] d2.utils.events INFO:  eta: 0:36:18  iter: 3439  total_loss: 2.154  loss_rel: 0.194  loss_refine_obj: 1.032  binary_loss: 0.6931  loss_mask_segmentation: 0.2253  time: 4.0139  data_time: 0.1890  lr: 0.0021844  max_mem: 15004M
[04/17 15:23:57] d2.utils.events INFO:  eta: 0:35:00  iter: 3459  total_loss: 2.264  loss_rel: 0.2594  loss_refine_obj: 1.164  binary_loss: 0.6931  loss_mask_segmentation: 0.2234  time: 4.0132  data_time: 0.1817  lr: 0.0021957  max_mem: 15004M
[04/17 15:25:20] d2.utils.events INFO:  eta: 0:33:42  iter: 3479  total_loss: 2.193  loss_rel: 0.1954  loss_refine_obj: 1.007  binary_loss: 0.6931  loss_mask_segmentation: 0.2347  time: 4.0138  data_time: 0.1793  lr: 0.0022069  max_mem: 15004M
[04/17 15:26:43] d2.utils.events INFO:  eta: 0:32:25  iter: 3499  total_loss: 2.09  loss_rel: 0.1912  loss_refine_obj: 0.977  binary_loss: 0.6931  loss_mask_segmentation: 0.2414  time: 4.0147  data_time: 0.2164  lr: 0.0022182  max_mem: 15004M
[04/17 15:28:03] d2.utils.events INFO:  eta: 0:31:05  iter: 3519  total_loss: 2.373  loss_rel: 0.289  loss_refine_obj: 1.179  binary_loss: 0.6931  loss_mask_segmentation: 0.2148  time: 4.0146  data_time: 0.2291  lr: 0.0022294  max_mem: 15004M
[04/17 15:29:21] d2.utils.events INFO:  eta: 0:29:48  iter: 3539  total_loss: 2.237  loss_rel: 0.1868  loss_refine_obj: 1.161  binary_loss: 0.6931  loss_mask_segmentation: 0.2174  time: 4.0139  data_time: 0.1795  lr: 0.0022407  max_mem: 15004M
[04/17 15:30:43] d2.utils.events INFO:  eta: 0:28:31  iter: 3559  total_loss: 2.206  loss_rel: 0.2414  loss_refine_obj: 1.082  binary_loss: 0.6931  loss_mask_segmentation: 0.2079  time: 4.0143  data_time: 0.1867  lr: 0.0022519  max_mem: 15004M
[04/17 15:32:06] d2.utils.events INFO:  eta: 0:27:14  iter: 3579  total_loss: 2.199  loss_rel: 0.1912  loss_refine_obj: 1.044  binary_loss: 0.6931  loss_mask_segmentation: 0.2423  time: 4.0152  data_time: 0.1974  lr: 0.0022632  max_mem: 15004M
[04/17 15:33:29] d2.utils.events INFO:  eta: 0:26:03  iter: 3599  total_loss: 2.246  loss_rel: 0.2126  loss_refine_obj: 1.106  binary_loss: 0.6931  loss_mask_segmentation: 0.2333  time: 4.0158  data_time: 0.1867  lr: 0.0022744  max_mem: 15004M
[04/17 15:34:54] d2.utils.events INFO:  eta: 0:24:47  iter: 3619  total_loss: 2.149  loss_rel: 0.184  loss_refine_obj: 1.077  binary_loss: 0.6931  loss_mask_segmentation: 0.2229  time: 4.0172  data_time: 0.1911  lr: 0.0022857  max_mem: 15004M
[04/17 15:36:18] d2.utils.events INFO:  eta: 0:23:30  iter: 3639  total_loss: 2.233  loss_rel: 0.2338  loss_refine_obj: 1.044  binary_loss: 0.6931  loss_mask_segmentation: 0.2331  time: 4.0181  data_time: 0.1817  lr: 0.0022969  max_mem: 15004M
[04/17 15:37:41] d2.utils.events INFO:  eta: 0:22:12  iter: 3659  total_loss: 2.265  loss_rel: 0.2144  loss_refine_obj: 1.164  binary_loss: 0.6931  loss_mask_segmentation: 0.2272  time: 4.0187  data_time: 0.1896  lr: 0.0023082  max_mem: 15004M
[04/17 15:38:58] d2.utils.events INFO:  eta: 0:20:54  iter: 3679  total_loss: 2.149  loss_rel: 0.1664  loss_refine_obj: 1.073  binary_loss: 0.6931  loss_mask_segmentation: 0.2268  time: 4.0178  data_time: 0.1919  lr: 0.0023194  max_mem: 15004M
[04/17 15:40:21] d2.utils.events INFO:  eta: 0:19:36  iter: 3699  total_loss: 2.353  loss_rel: 0.2477  loss_refine_obj: 1.182  binary_loss: 0.6931  loss_mask_segmentation: 0.2221  time: 4.0185  data_time: 0.1825  lr: 0.0023307  max_mem: 15004M
[04/17 15:41:44] d2.utils.events INFO:  eta: 0:18:18  iter: 3719  total_loss: 2.113  loss_rel: 0.2079  loss_refine_obj: 0.9631  binary_loss: 0.6931  loss_mask_segmentation: 0.2351  time: 4.0192  data_time: 0.1928  lr: 0.0023419  max_mem: 15004M
[04/17 15:43:01] d2.utils.events INFO:  eta: 0:16:59  iter: 3739  total_loss: 2.163  loss_rel: 0.2215  loss_refine_obj: 0.987  binary_loss: 0.6931  loss_mask_segmentation: 0.2273  time: 4.0185  data_time: 0.1785  lr: 0.0023532  max_mem: 15004M
[04/17 15:44:26] d2.utils.events INFO:  eta: 0:15:42  iter: 3759  total_loss: 2.285  loss_rel: 0.221  loss_refine_obj: 1.137  binary_loss: 0.6931  loss_mask_segmentation: 0.2228  time: 4.0196  data_time: 0.1766  lr: 0.0023644  max_mem: 15004M
[04/17 15:45:48] d2.utils.events INFO:  eta: 0:14:24  iter: 3779  total_loss: 2.269  loss_rel: 0.191  loss_refine_obj: 1.15  binary_loss: 0.6931  loss_mask_segmentation: 0.2131  time: 4.0201  data_time: 0.1938  lr: 0.0023757  max_mem: 15004M
[04/17 15:47:09] d2.utils.events INFO:  eta: 0:13:05  iter: 3799  total_loss: 2.308  loss_rel: 0.2337  loss_refine_obj: 1.085  binary_loss: 0.6931  loss_mask_segmentation: 0.213  time: 4.0202  data_time: 0.1848  lr: 0.0023869  max_mem: 15004M
[04/17 15:48:27] d2.utils.events INFO:  eta: 0:11:46  iter: 3819  total_loss: 2.175  loss_rel: 0.2334  loss_refine_obj: 1.057  binary_loss: 0.6931  loss_mask_segmentation: 0.2154  time: 4.0196  data_time: 0.1895  lr: 0.0023982  max_mem: 15004M
[04/17 15:49:51] d2.utils.events INFO:  eta: 0:10:29  iter: 3839  total_loss: 2.145  loss_rel: 0.1922  loss_refine_obj: 1.06  binary_loss: 0.6931  loss_mask_segmentation: 0.2258  time: 4.0204  data_time: 0.1910  lr: 0.0024094  max_mem: 15004M
[04/17 15:51:15] d2.utils.events INFO:  eta: 0:09:11  iter: 3859  total_loss: 2.219  loss_rel: 0.2421  loss_refine_obj: 0.9827  binary_loss: 0.6931  loss_mask_segmentation: 0.2359  time: 4.0213  data_time: 0.1991  lr: 0.0024207  max_mem: 15004M
[04/17 15:52:32] d2.utils.events INFO:  eta: 0:07:53  iter: 3879  total_loss: 2.242  loss_rel: 0.2139  loss_refine_obj: 1.084  binary_loss: 0.6931  loss_mask_segmentation: 0.2237  time: 4.0206  data_time: 0.1788  lr: 0.0024319  max_mem: 15004M
[04/17 15:53:51] d2.utils.events INFO:  eta: 0:06:33  iter: 3899  total_loss: 2.17  loss_rel: 0.197  loss_refine_obj: 1.074  binary_loss: 0.6931  loss_mask_segmentation: 0.2317  time: 4.0201  data_time: 0.1834  lr: 0.0024432  max_mem: 15004M
[04/17 15:55:10] d2.utils.events INFO:  eta: 0:05:14  iter: 3919  total_loss: 2.084  loss_rel: 0.1843  loss_refine_obj: 0.9682  binary_loss: 0.6931  loss_mask_segmentation: 0.2271  time: 4.0198  data_time: 0.1736  lr: 0.0024544  max_mem: 15004M
[04/17 15:56:30] d2.utils.events INFO:  eta: 0:03:56  iter: 3939  total_loss: 2.154  loss_rel: 0.2104  loss_refine_obj: 1.032  binary_loss: 0.6931  loss_mask_segmentation: 0.2327  time: 4.0196  data_time: 0.1816  lr: 0.0024657  max_mem: 15004M
[04/17 15:57:47] d2.utils.events INFO:  eta: 0:02:37  iter: 3959  total_loss: 2.121  loss_rel: 0.2173  loss_refine_obj: 1.028  binary_loss: 0.6931  loss_mask_segmentation: 0.2223  time: 4.0188  data_time: 0.1690  lr: 0.0024769  max_mem: 15004M
[04/17 15:59:08] d2.utils.events INFO:  eta: 0:01:18  iter: 3979  total_loss: 2.252  loss_rel: 0.2535  loss_refine_obj: 1.04  binary_loss: 0.6931  loss_mask_segmentation: 0.2302  time: 4.0190  data_time: 0.1737  lr: 0.0024882  max_mem: 15004M
[04/17 16:00:30] d2.data.datasets.coco INFO: Loaded 5000 images in COCO format from ../datasets-real/coco/annotations/instances_val2017.json
[04/17 16:00:30] d2.data.build INFO: Distribution of instances among all 80 categories:
[36m|   category    | #instances   |   category   | #instances   |   category    | #instances   |
|:-------------:|:-------------|:------------:|:-------------|:-------------:|:-------------|
|    person     | 10777        |   bicycle    | 314          |      car      | 1918         |
|  motorcycle   | 367          |   airplane   | 143          |      bus      | 283          |
|     train     | 190          |    truck     | 414          |     boat      | 424          |
| traffic light | 634          | fire hydrant | 101          |   stop sign   | 75           |
| parking meter | 60           |    bench     | 411          |     bird      | 427          |
|      cat      | 202          |     dog      | 218          |     horse     | 272          |
|     sheep     | 354          |     cow      | 372          |   elephant    | 252          |
|     bear      | 71           |    zebra     | 266          |    giraffe    | 232          |
|   backpack    | 371          |   umbrella   | 407          |    handbag    | 540          |
|      tie      | 252          |   suitcase   | 299          |    frisbee    | 115          |
|     skis      | 241          |  snowboard   | 69           |  sports ball  | 260          |
|     kite      | 327          | baseball bat | 145          | baseball gl.. | 148          |
|  skateboard   | 179          |  surfboard   | 267          | tennis racket | 225          |
|    bottle     | 1013         |  wine glass  | 341          |      cup      | 895          |
|     fork      | 215          |    knife     | 325          |     spoon     | 253          |
|     bowl      | 623          |    banana    | 370          |     apple     | 236          |
|   sandwich    | 177          |    orange    | 285          |   broccoli    | 312          |
|    carrot     | 365          |   hot dog    | 125          |     pizza     | 284          |
|     donut     | 328          |     cake     | 310          |     chair     | 1771         |
|     couch     | 261          | potted plant | 342          |      bed      | 163          |
| dining table  | 695          |    toilet    | 179          |      tv       | 288          |
|    laptop     | 231          |    mouse     | 106          |    remote     | 283          |
|   keyboard    | 153          |  cell phone  | 262          |   microwave   | 55           |
|     oven      | 143          |   toaster    | 9            |     sink      | 225          |
| refrigerator  | 126          |     book     | 1129         |     clock     | 267          |
|     vase      | 274          |   scissors   | 36           |  teddy bear   | 190          |
|  hair drier   | 11           |  toothbrush  | 57           |               |              |
|     total     | 36335        |              |              |               |              |[0m
[04/17 16:00:30] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[04/17 16:00:30] d2.data.common INFO: Serializing 5000 elements to byte tensors and concatenating them all ...
[04/17 16:00:30] d2.data.common INFO: Serialized dataset takes 19.14 MiB
[04/17 16:00:30] d2.evaluation.coco_evaluation WARNING: COCO Evaluator instantiated using config, this is deprecated behavior. Please pass in explicit arguments instead.
[04/17 16:13:30] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[04/17 16:13:30] d2.evaluation.coco_evaluation INFO: Saving results to ../output-step3-vctree-short-vg/coco_instances_results.json
[04/17 16:13:32] d2.evaluation.coco_evaluation INFO: Evaluating predictions with unofficial COCO API...
[04/17 16:13:32] d2.evaluation.fast_eval_api INFO: Evaluate annotation type *bbox*
[04/17 16:13:42] d2.evaluation.fast_eval_api INFO: COCOeval_opt.evaluate() finished in 10.58 seconds.
[04/17 16:13:42] d2.evaluation.fast_eval_api INFO: Accumulating evaluation results...
[04/17 16:13:43] d2.evaluation.fast_eval_api INFO: COCOeval_opt.accumulate() finished in 1.01 seconds.
[04/17 16:13:43] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 42.691 | 62.994 | 47.039 | 25.305 | 46.849 | 55.509 |
[04/17 16:13:43] d2.evaluation.coco_evaluation INFO: Per-category bbox AP: 
| category      | AP     | category     | AP     | category       | AP     |
|:--------------|:-------|:-------------|:-------|:---------------|:-------|
| person        | 56.509 | bicycle      | 33.831 | car            | 46.369 |
| motorcycle    | 45.454 | airplane     | 66.509 | bus            | 66.310 |
| train         | 67.237 | truck        | 36.676 | boat           | 29.993 |
| traffic light | 27.935 | fire hydrant | 69.086 | stop sign      | 65.840 |
| parking meter | 47.390 | bench        | 27.667 | bird           | 37.850 |
| cat           | 68.779 | dog          | 63.760 | horse          | 60.263 |
| sheep         | 54.101 | cow          | 57.946 | elephant       | 64.506 |
| bear          | 71.520 | zebra        | 67.030 | giraffe        | 67.256 |
| backpack      | 16.172 | umbrella     | 42.221 | handbag        | 15.917 |
| tie           | 35.425 | suitcase     | 38.394 | frisbee        | 62.598 |
| skis          | 23.600 | snowboard    | 40.466 | sports ball    | 48.016 |
| kite          | 41.886 | baseball bat | 30.795 | baseball glove | 38.932 |
| skateboard    | 53.797 | surfboard    | 41.787 | tennis racket  | 50.497 |
| bottle        | 41.277 | wine glass   | 39.228 | cup            | 44.992 |
| fork          | 37.861 | knife        | 18.750 | spoon          | 21.591 |
| bowl          | 43.898 | banana       | 24.094 | apple          | 17.857 |
| sandwich      | 34.474 | orange       | 32.577 | broccoli       | 24.350 |
| carrot        | 21.989 | hot dog      | 33.617 | pizza          | 52.210 |
| donut         | 44.497 | cake         | 36.214 | chair          | 30.095 |
| couch         | 42.537 | potted plant | 29.634 | bed            | 43.120 |
| dining table  | 30.058 | toilet       | 60.830 | tv             | 55.632 |
| laptop        | 64.255 | mouse        | 59.559 | remote         | 32.745 |
| keyboard      | 50.321 | cell phone   | 36.843 | microwave      | 57.640 |
| oven          | 33.332 | toaster      | 35.444 | sink           | 39.221 |
| refrigerator  | 52.932 | book         | 14.574 | clock          | 50.567 |
| vase          | 39.353 | scissors     | 26.570 | teddy bear     | 48.492 |
| hair drier    | 1.164  | toothbrush   | 30.525 |                |        |
[04/17 16:13:47] d2.evaluation.fast_eval_api INFO: Evaluate annotation type *segm*
[04/17 16:13:57] d2.evaluation.fast_eval_api INFO: COCOeval_opt.evaluate() finished in 10.65 seconds.
[04/17 16:13:58] d2.evaluation.fast_eval_api INFO: Accumulating evaluation results...
[04/17 16:13:59] d2.evaluation.fast_eval_api INFO: COCOeval_opt.accumulate() finished in 0.96 seconds.
[04/17 16:13:59] d2.evaluation.coco_evaluation INFO: Evaluation results for segm: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 38.756 | 60.285 | 42.100 | 19.352 | 41.988 | 55.645 |
[04/17 16:13:59] d2.evaluation.coco_evaluation INFO: Per-category segm AP: 
| category      | AP     | category     | AP     | category       | AP     |
|:--------------|:-------|:-------------|:-------|:---------------|:-------|
| person        | 49.074 | bicycle      | 20.616 | car            | 43.402 |
| motorcycle    | 35.499 | airplane     | 51.374 | bus            | 65.149 |
| train         | 66.333 | truck        | 37.337 | boat           | 26.965 |
| traffic light | 27.529 | fire hydrant | 64.950 | stop sign      | 66.447 |
| parking meter | 49.216 | bench        | 19.935 | bird           | 32.598 |
| cat           | 68.586 | dog          | 61.762 | horse          | 44.145 |
| sheep         | 47.171 | cow          | 49.920 | elephant       | 58.888 |
| bear          | 69.471 | zebra        | 58.058 | giraffe        | 51.462 |
| backpack      | 17.017 | umbrella     | 48.090 | handbag        | 15.556 |
| tie           | 34.230 | suitcase     | 42.011 | frisbee        | 62.250 |
| skis          | 3.830  | snowboard    | 23.846 | sports ball    | 48.796 |
| kite          | 31.403 | baseball bat | 25.518 | baseball glove | 42.179 |
| skateboard    | 36.502 | surfboard    | 34.906 | tennis racket  | 54.832 |
| bottle        | 39.724 | wine glass   | 34.482 | cup            | 45.289 |
| fork          | 20.289 | knife        | 13.632 | spoon          | 13.924 |
| bowl          | 40.053 | banana       | 20.530 | apple          | 17.151 |
| sandwich      | 35.460 | orange       | 31.948 | broccoli       | 23.009 |
| carrot        | 19.951 | hot dog      | 28.294 | pizza          | 51.372 |
| donut         | 45.290 | cake         | 37.286 | chair          | 20.445 |
| couch         | 36.023 | potted plant | 24.171 | bed            | 34.437 |
| dining table  | 17.297 | toilet       | 59.460 | tv             | 57.275 |
| laptop        | 63.096 | mouse        | 60.613 | remote         | 32.246 |
| keyboard      | 51.260 | cell phone   | 36.985 | microwave      | 58.138 |
| oven          | 31.665 | toaster      | 35.951 | sink           | 36.838 |
| refrigerator  | 53.807 | book         | 10.386 | clock          | 51.599 |
| vase          | 38.390 | scissors     | 19.957 | teddy bear     | 46.321 |
| hair drier    | 0.642  | toothbrush   | 18.934 |                |        |
[04/17 16:14:00] d2.evaluation.testing INFO: copypaste: Task: bbox
[04/17 16:14:00] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[04/17 16:14:00] d2.evaluation.testing INFO: copypaste: 42.6905,62.9937,47.0394,25.3049,46.8493,55.5094
[04/17 16:14:00] d2.evaluation.testing INFO: copypaste: Task: segm
[04/17 16:14:00] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[04/17 16:14:00] d2.evaluation.testing INFO: copypaste: 38.7559,60.2846,42.0998,19.3518,41.9884,55.6445
[04/17 16:14:00] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[04/17 16:14:01] d2.data.build INFO: Distribution of instances among all 150 categories:
[36m|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
|  airplane  | 460          |   animal   | 897          |    arm     | 3387         |
|    bag     | 1906         |   banana   | 1352         |   basket   | 645          |
|   beach    | 1090         |    bear    | 1036         |    bed     | 929          |
|   bench    | 1542         |    bike    | 1445         |    bird    | 1261         |
|   board    | 1376         |    boat    | 1407         |    book    | 1105         |
|    boot    | 749          |   bottle   | 1679         |    bowl    | 1303         |
|    box     | 1436         |    boy     | 2110         |   branch   | 1766         |
|  building  | 7373         |    bus     | 1412         |  cabinet   | 1011         |
|    cap     | 1073         |    car     | 4150         |    cat     | 1188         |
|   chair    | 2893         |   child    | 895          |   clock    | 1327         |
|    coat    | 1094         |  counter   | 1159         |    cow     | 1192         |
|    cup     | 1087         |  curtain   | 763          |    desk    | 667          |
|    dog     | 1406         |    door    | 3383         |   drawer   | 618          |
|    ear     | 3770         |  elephant  | 1353         |   engine   | 757          |
|    eye     | 1965         |    face    | 2462         |   fence    | 3079         |
|   finger   | 1034         |    flag    | 903          |   flower   | 2299         |
|    food    | 1781         |    fork    | 649          |   fruit    | 660          |
|  giraffe   | 1562         |    girl    | 1792         |   glass    | 2983         |
|   glove    | 1228         |    guy     | 544          |    hair    | 4915         |
|    hand    | 5566         |   handle   | 1931         |    hat     | 2435         |
|    head    | 7112         |   helmet   | 1792         |    hill    | 1045         |
|   horse    | 1590         |   house    | 1113         |   jacket   | 2959         |
|    jean    | 1467         |    kid     | 564          |    kite    | 995          |
|    lady    | 657          |    lamp    | 942          |   laptop   | 927          |
|    leaf    | 3971         |    leg     | 7752         |   letter   | 2399         |
|   light    | 3604         |    logo    | 1267         |    man     | 16310        |
|    men     | 485          | motorcycle | 1088         |  mountain  | 1064         |
|   mouth    | 1139         |    neck    | 1379         |    nose    | 1892         |
|   number   | 1077         |   orange   | 749          |    pant    | 3834         |
|   paper    | 1119         |    paw     | 883          |   people   | 3751         |
|   person   | 12808        |   phone    | 839          |   pillow   | 1468         |
|   pizza    | 1000         |   plane    | 1641         |   plant    | 1714         |
|   plate    | 3203         |   player   | 1314         |    pole    | 5765         |
|    post    | 1596         |    pot     | 679          |   racket   | 840          |
|  railing   | 694          |    rock    | 2095         |    roof    | 1534         |
|    room    | 633          |   screen   | 676          |    seat    | 1076         |
|   sheep    | 1201         |   shelf    | 1477         |   shirt    | 9368         |
|    shoe    | 3725         |   short    | 2229         |  sidewalk  | 2263         |
|    sign    | 6306         |    sink    | 767          | skateboard | 1190         |
|    ski     | 1063         |   skier    | 590          |  sneaker   | 658          |
|    snow    | 2994         |    sock    | 935          |   stand    | 762          |
|   street   | 3007         | surfboard  | 1285         |   table    | 5216         |
|    tail    | 2589         |    tie     | 837          |    tile    | 1841         |
|    tire    | 1727         |   toilet   | 571          |   towel    | 807          |
|   tower    | 688          |   track    | 2287         |   train    | 1932         |
|    tree    | 12679        |   truck    | 1153         |   trunk    | 1386         |
|  umbrella  | 1838         |    vase    | 841          | vegetable  | 646          |
|  vehicle   | 858          |    wave    | 1710         |   wheel    | 2840         |
|   window   | 11751        | windshield | 866          |    wing    | 1400         |
|    wire    | 1030         |   woman    | 7212         |   zebra    | 1304         |
|            |              |            |              |            |              |
|   total    | 325570       |            |              |            |              |[0m
[04/17 16:14:01] d2.data.common INFO: Serializing 26446 elements to byte tensors and concatenating them all ...
[04/17 16:14:06] d2.data.common INFO: Serialized dataset takes 69.66 MiB
[04/17 16:14:06] detectron2 INFO: Following metrics will be use for evaluation
[04/17 16:14:06] detectron2 INFO: ('SGRecall', 'SGNoGraphConstraintRecall', 'SGZeroShotRecall', 'SGPairAccuracy', 'SGMeanRecall')
[04/17 16:14:06] d2.evaluation.coco_evaluation WARNING: COCO Evaluator instantiated using config, this is deprecated behavior. Please pass in explicit arguments instead.
[04/17 16:14:06] d2.evaluation.coco_evaluation INFO: Trying to convert 'VG_test' to COCO format ...
[04/17 16:14:06] d2.data.datasets.coco INFO: Converting annotations of dataset 'VG_test' to COCO format ...)
[04/17 16:14:06] d2.data.datasets.coco INFO: Converting dataset dicts into COCO format
[04/17 16:14:42] d2.data.datasets.coco INFO: Conversion finished, #images: 26446, #annotations: 325570
[04/17 16:14:42] d2.data.datasets.coco INFO: Caching COCO format annotations at '../output-step3-vctree-short-vg/inference/VG_test_coco_format.json' ...
[04/17 16:14:51] detectron2 INFO: Loading zero shot triplets
[04/17 16:14:51] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/home/r09521612/.local/lib/python3.8/site-packages/detectron2/engine/train_loop.py", line 150, in train
    self.after_step()
  File "/home/r09521612/.local/lib/python3.8/site-packages/detectron2/engine/train_loop.py", line 180, in after_step
    h.after_step()
  File "/home/r09521612/segmentationsg/segmentationsg/checkpoint/detection_checkpoint.py", line 37, in after_step
    results = self._do_eval()
  File "/home/r09521612/segmentationsg/segmentationsg/checkpoint/detection_checkpoint.py", line 29, in _do_eval
    results = self.eval._func()
  File "/home/r09521612/segmentationsg/segmentationsg/engine/sg_trainer.py", line 239, in test_and_save_results
    self._last_eval_results = self.test(self.cfg, self.model)
  File "/home/r09521612/segmentationsg/segmentationsg/engine/sg_trainer.py", line 320, in test
    evaluator = SceneGraphEvaluator(dataset_name, cfg, True, output_folder)
  File "/home/r09521612/segmentationsg/segmentationsg/evaluation/sg_evaluation.py", line 86, in __init__
    self._zero_shot_triplets = self._get_zero_shot_triplets() - 1
  File "/home/r09521612/segmentationsg/segmentationsg/evaluation/sg_evaluation.py", line 94, in _get_zero_shot_triplets
    return torch.load(self.cfg.MODEL.ROI_SCENEGRAPH_HEAD.ZERO_SHOT_TRIPLETS , map_location=torch.device("cpu")).long().numpy()
  File "/home/r09521612/.local/lib/python3.8/site-packages/torch/serialization.py", line 594, in load
    with _open_file_like(f, 'rb') as opened_file:
  File "/home/r09521612/.local/lib/python3.8/site-packages/torch/serialization.py", line 230, in _open_file_like
    return _open_file(name_or_buffer, mode)
  File "/home/r09521612/.local/lib/python3.8/site-packages/torch/serialization.py", line 211, in __init__
    super(_open_file, self).__init__(open(name, mode))
FileNotFoundError: [Errno 2] No such file or directory: '../evaluation/datasets/vg/zeroshot_triplet.pytorch'
[04/17 16:14:51] d2.engine.hooks INFO: Overall training speed: 3997 iterations in 4:27:48 (4.0202 s / it)
[04/17 16:14:51] d2.engine.hooks INFO: Total training time: 4:42:44 (0:14:56 on hooks)
[04/17 16:14:51] d2.utils.events INFO:  eta: 0:00:00  iter: 3999  total_loss: 2.235  loss_rel: 0.2367  loss_refine_obj: 1.112  binary_loss: 0.6931  loss_mask_segmentation: 0.2284  time: 4.0191  data_time: 0.1853  lr: 0.0024994  max_mem: 15004M
[04/17 16:27:03] detectron2 INFO: Rank of current process: 0. World size: 1
[04/17 16:27:06] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Sep 23 2021, 22:44:21) [GCC 8.4.1 20200928 (Red Hat 8.4.1-1.0.1)]
numpy                   1.19.0
detectron2              0.6 @/home/r09521612/.local/lib/python3.8/site-packages/detectron2
Compiler                GCC 7.3
CUDA compiler           CUDA 10.2
detectron2 arch flags   3.7, 5.0, 5.2, 6.0, 6.1, 7.0, 7.5
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.10.0+cu102 @/home/r09521612/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   Tesla V100-SXM2-32GB (arch=7.0)
Driver version          460.73.01
CUDA_HOME               /opt/cuda-11.2
Pillow                  8.3.2
torchvision             0.11.1+cu102 @/home/r09521612/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5
fvcore                  0.1.5.post20211023
iopath                  0.1.9
cv2                     4.5.3
----------------------  ----------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[04/17 16:27:06] detectron2 INFO: Command line arguments: Namespace(config_file='../configs/sg_dev_masktransfer.yaml', dist_url='tcp://127.0.0.1:17594', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['DATALOADER.NUM_WORKERS', '2', 'MODEL.WEIGHTS', '../output-step1-vg/resnet_pretrain_weights.pth', 'OUTPUT_DIR', '../output-step3-vctree-short-vg', 'DATASETS.VISUAL_GENOME.IMAGES', '../datasets-real/vg/images', 'DATASETS.VISUAL_GENOME.MAPPING_DICTIONARY', '../datasets-real/vg/VG-SGG-dicts-with-attri.json', 'DATASETS.VISUAL_GENOME.IMAGE_DATA', '../datasets-real/vg/image_data.json', 'DATASETS.VISUAL_GENOME.VG_ATTRIBUTE_H5', '../datasets-real/vg/VG-SGG-with-attri.h5', 'DATASETS.MSCOCO.ANNOTATIONS', '../datasets-real/coco/annotations/', 'DATASETS.MSCOCO.DATAROOT', '../datasets-real/coco/', 'MODEL.MASK_ON', 'True', 'MODEL.ROI_SCENEGRAPH_HEAD.USE_GT_BOX', 'False', 'MODEL.ROI_SCENEGRAPH_HEAD.USE_GT_OBJECT_LABEL', 'False', 'MODEL.ROI_SCENEGRAPH_HEAD.USE_MASK_ATTENTION', 'True', 'MODEL.ROI_SCENEGRAPH_HEAD.MASK_ATTENTION_TYPE', 'Weighted', 'MODEL.ROI_SCENEGRAPH_HEAD.SIGMOID_ATTENTION', 'True', 'TEST.EVAL_PERIOD', '50000', 'MODEL.ROI_RELATION_FEATURE_EXTRACTORS.MULTIPLY_LOGITS_WITH_MASKS', 'False', 'MODEL.ROI_BOX_FEATURE_EXTRACTORS.BOX_FEATURE_MASK', 'True', 'MODEL.ROI_BOX_FEATURE_EXTRACTORS.CLASS_LOGITS_WITH_MASK', 'False', 'SOLVER.IMS_PER_BATCH', '16', 'DATASETS.SEG_DATA_DIVISOR', '2', 'MODEL.ROI_SCENEGRAPH_HEAD.PREDICTOR', 'VCTreeSegmentationPredictorC', 'MODEL.ROI_HEADS.REFINE_SEG_MASKS', 'False', 'TEST.DETECTIONS_PER_IMAGE', '40', 'SOLVER.MAX_ITER', '1000', 'DATASETS.VISUAL_GENOME.NUMBER_OF_VALIDATION_IMAGES', '5000', 'MODEL.ROI_HEADS.MASK_NUM_CLASSES', '80', 'MODEL.ROI_HEADS.NUM_OUTPUT_CLASSES', '80', 'MODEL.ROI_SCENEGRAPH_HEAD.NUM_CLASSES', '50', 'SOLVER.REFERENCE_WORLD_SIZE', '4', 'MODEL.ROI_SCENEGRAPH_HEAD.ZERO_SHOT_TRIPLETS', '/home/r09521612/segmentationsg/segmentationsg/evaluation/datasets/vg/zeroshot_triplet.pytorch'], resume=True)
[04/17 16:27:06] detectron2 INFO: Contents of args.config_file=../configs/sg_dev_masktransfer.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mBase-RCNN-FPN.yaml[39m[38;5;186m"[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mSceneGraphSegmentationRCNN[39m[38;5;186m'[39m
[38;5;15m  [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m  [39m[38;5;197mUSE_MASK_ON_NODE[39m[38;5;15m:[39m[38;5;15m [39mFalse
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15m57.375[39m,[38;5;15m [39m[38;5;15m57.120[39m,[38;5;15m [39m[38;5;15m58.395[39m]
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39mFalse[38;5;15m  [39m[38;5;242m# this is a C2 model[39m
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m32
[38;5;15m    [39m[38;5;197mWIDTH_PER_GROUP[39m[38;5;15m:[39m[38;5;15m [39m8
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m101
[38;5;15m  [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mSGSegmentationROIHeadsMaskTransfer[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m150
[38;5;15m    [39m[38;5;197mEMBEDDINGS_PATH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m/home/r09521612/segmentationsg/segmentationsg/data/embeddings/glove_mean_vg[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mEMBEDDINGS_PATH_COCO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m/home/r09521612/segmentationsg/segmentationsg/data/embeddings/glove_mean_coco[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mROI_SCENEGRAPH_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mSceneGraphSegmentationHead[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mPREDICTOR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mMotifSegmentationPredictor[39m[38;5;186m'[39m
[38;5;15m  [39m[38;5;197mROI_MASK_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mSceneGraphMaskHeadTransfer[39m[38;5;186m'[39m
[38;5;15m  [39m[38;5;197mFREEZE_LAYERS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMETA_ARCH[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15mproposal_generator[39m,[38;5;15m [39m[38;5;15mbackbone[39m]
[38;5;15m    [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15mbox_pooler[39m,[38;5;15m [39m[38;5;15mbox_head[39m,[38;5;15m [39m[38;5;15mbox_predictor[39m,[38;5;15m [39m[38;5;15mmask_pooler[39m,[38;5;15m [39m[38;5;15mmask_head[39m,[38;5;15m [39m[38;5;15mkeypoint_pooler[39m,[38;5;15m [39m[38;5;15mkeypoint_head[39m]
[38;5;15m  [39m[38;5;197mROI_BOX_FEATURE_EXTRACTORS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186mBoxFeatureSegmentationExtractor[39m[38;5;186m'[39m
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mVISUAL[39m[38;5;15m [39m[38;5;186mGENOME[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m[38;5;15m [39m('VG_train',)
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m[38;5;15m [39m('coco_val_2017','VG_test',)
[38;5;15m  [39m[38;5;197mVISUAL_GENOME[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mTRAIN_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mVAL_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mTEST_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mTRAIN_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mFILTER_EMPTY_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197mFILTER_NON_OVERLAP[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197mFILTER_DUPLICATE_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m16
[38;5;15m  [39m[38;5;197mBIAS_LR_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m0.01
[38;5;15m  [39m[38;5;197mWARMUP_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m0.0001
[38;5;15m  [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m0.9
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m[38;5;15m [39m(25000, 35000)
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m40000
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m500
[38;5;15m  [39m[38;5;197mCLIP_GRADIENTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLIP_VALUE[39m[38;5;15m:[39m[38;5;15m [39m5.0
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m5000
[38;5;197mGLOVE_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m../glove/[39m[38;5;186m'[39m

[04/17 16:27:06] detectron2 INFO: Running with full config:
[38;5;197mCUDNN_BENCHMARK[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mASPECT_RATIO_GROUPING[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mFILTER_EMPTY_ANNOTATIONS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;15m  [39m[38;5;197mREPEAT_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mSAMPLER_TRAIN[39m[38;5;15m:[39m[38;5;15m [39mTrainingSampler
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mMASK_TEST[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mcoco_val_2017
[38;5;15m  [39m[38;5;197mMASK_TRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mcoco_train_2017
[38;5;15m  [39m[38;5;197mMSCOCO[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANNOTATIONS[39m[38;5;15m:[39m[38;5;15m [39m../datasets-real/coco/annotations/
[38;5;15m    [39m[38;5;197mDATAROOT[39m[38;5;15m:[39m[38;5;15m [39m../datasets-real/coco/
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m2000
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mSEG_DATA_DIVISOR[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mcoco_val_2017
[38;5;15m  [39m-[38;5;15m [39mVG_test
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mVG_train
[38;5;15m  [39m[38;5;197mTRANSFER[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mcoco_train_2014
[38;5;15m  [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39mVISUAL GENOME
[38;5;15m  [39m[38;5;197mVISUAL_GENOME[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOX_SCALE[39m[38;5;15m:[39m[38;5;15m [39m1024
[38;5;15m    [39m[38;5;197mCLIPPED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mFILTER_DUPLICATE_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mFILTER_EMPTY_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mFILTER_NON_OVERLAP[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mIMAGES[39m[38;5;15m:[39m[38;5;15m [39m../datasets-real/vg/images
[38;5;15m    [39m[38;5;197mIMAGE_DATA[39m[38;5;15m:[39m[38;5;15m [39m../datasets-real/vg/image_data.json
[38;5;15m    [39m[38;5;197mMAPPING_DICTIONARY[39m[38;5;15m:[39m[38;5;15m [39m../datasets-real/vg/VG-SGG-dicts-with-attri.json
[38;5;15m    [39m[38;5;197mNUMBER_OF_VALIDATION_IMAGES[39m[38;5;15m:[39m[38;5;15m [39m5000
[38;5;15m    [39m[38;5;197mTEST_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mTRAIN_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mVAL_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mVG_ATTRIBUTE_H5[39m[38;5;15m:[39m[38;5;15m [39m../datasets-real/vg/VG-SGG-with-attri.h5
[38;5;197mDEV_RUN[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;197mGLOBAL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mHACK[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;197mGLOVE_DIR[39m[38;5;15m:[39m[38;5;15m [39m../glove/
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.9
[38;5;15m    [39m-[38;5;15m [39m0.9
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39mrelative_range
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39mBGR
[38;5;15m  [39m[38;5;197mMASK_FORMAT[39m[38;5;15m:[39m[38;5;15m [39mpolygon
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m1333
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m1333
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m800
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m640
[38;5;15m  [39m-[38;5;15m [39m672
[38;5;15m  [39m-[38;5;15m [39m704
[38;5;15m  [39m-[38;5;15m [39m736
[38;5;15m  [39m-[38;5;15m [39m768
[38;5;15m  [39m-[38;5;15m [39m800
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39mchoice
[38;5;15m  [39m[38;5;197mRANDOM_FLIP[39m[38;5;15m:[39m[38;5;15m [39mhorizontal
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mANCHOR_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANGLES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m-90
[38;5;15m      [39m-[38;5;15m [39m0
[38;5;15m      [39m-[38;5;15m [39m90
[38;5;15m    [39m[38;5;197mASPECT_RATIOS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m0.5
[38;5;15m      [39m-[38;5;15m [39m1.0
[38;5;15m      [39m-[38;5;15m [39m2.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mDefaultAnchorGenerator
[38;5;15m    [39m[38;5;197mOFFSET[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m    [39m[38;5;197mSIZES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m32
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m64
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m128
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m256
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m512
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFREEZE_AT[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mbuild_resnet_fpn_backbone
[38;5;15m  [39m[38;5;197mDEVICE[39m[38;5;15m:[39m[38;5;15m [39mcuda
[38;5;15m  [39m[38;5;197mFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFUSE_TYPE[39m[38;5;15m:[39m[38;5;15m [39msum
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres4
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m  [39m[38;5;197mFREEZE_LAYERS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMETA_ARCH[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mproposal_generator
[38;5;15m    [39m-[38;5;15m [39mbackbone
[38;5;15m    [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mbox_pooler
[38;5;15m    [39m-[38;5;15m [39mbox_head
[38;5;15m    [39m-[38;5;15m [39mbox_predictor
[38;5;15m    [39m-[38;5;15m [39mmask_pooler
[38;5;15m    [39m-[38;5;15m [39mmask_head
[38;5;15m    [39m-[38;5;15m [39mkeypoint_pooler
[38;5;15m    [39m-[38;5;15m [39mkeypoint_head
[38;5;15m  [39m[38;5;197mGROUP_NORM[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDIM_PER_GP[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;15m    [39m[38;5;197mEPSILON[39m[38;5;15m:[39m[38;5;15m [39m1.0e-05
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m32
[38;5;15m  [39m[38;5;197mKEYPOINT_ON[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mLOAD_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39mSceneGraphSegmentationRCNN
[38;5;15m  [39m[38;5;197mPANOPTIC_FPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMBINE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m      [39m[38;5;197mINSTANCES_CONFIDENCE_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m      [39m[38;5;197mOVERLAP_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m      [39m[38;5;197mSTUFF_AREA_LIMIT[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m103.53
[38;5;15m  [39m-[38;5;15m [39m116.28
[38;5;15m  [39m-[38;5;15m [39m123.675
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m57.375
[38;5;15m  [39m-[38;5;15m [39m57.12
[38;5;15m  [39m-[38;5;15m [39m58.395
[38;5;15m  [39m[38;5;197mPROPOSAL_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMIN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mRPN
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEFORM_MODULATED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mDEFORM_NUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mDEFORM_ON_PER_STAGE[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m101
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mFrozenBN
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m32
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres4
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mRES2_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mRES5_DILATION[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m64
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mWIDTH_PER_GROUP[39m[38;5;15m:[39m[38;5;15m [39m8
[38;5;15m  [39m[38;5;197mRETINANET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m&id002[39m
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m0.25
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m2.0
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mp3
[38;5;15m    [39m-[38;5;15m [39mp4
[38;5;15m    [39m-[38;5;15m [39mp5
[38;5;15m    [39m-[38;5;15m [39mp6
[38;5;15m    [39m-[38;5;15m [39mp7
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.4
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m80
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m0.01
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m    [39m[38;5;197mSMOOTH_L1_LOSS_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mTOPK_CANDIDATES_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mROI_BOX_CASCADE_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m[38;5;15m&id001[39m
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m5.0
[38;5;15m      [39m-[38;5;15m [39m5.0
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m20.0
[38;5;15m      [39m-[38;5;15m [39m20.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m30.0
[38;5;15m      [39m-[38;5;15m [39m30.0
[38;5;15m      [39m-[38;5;15m [39m15.0
[38;5;15m      [39m-[38;5;15m [39m15.0
[38;5;15m    [39m[38;5;197mIOUS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m-[38;5;15m [39m0.6
[38;5;15m    [39m-[38;5;15m [39m0.7
[38;5;15m  [39m[38;5;197mROI_BOX_FEATURE_EXTRACTORS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOX_FEATURE_MASK[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mCLASS_LOGITS_WITH_MASK[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mBoxFeatureSegmentationExtractor
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m28
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m  [39m[38;5;197mROI_BOX_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id001[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_BBOX_REG[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mFC_DIM[39m[38;5;15m:[39m[38;5;15m [39m1024
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mFastRCNNConvFCHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNUM_FC[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m7
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m    [39m[38;5;197mTRAIN_ON_PRED_BOXES[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mEMBEDDINGS_PATH[39m[38;5;15m:[39m[38;5;15m [39m/home/r09521612/segmentationsg/segmentationsg/data/embeddings/glove_mean_vg
[38;5;15m    [39m[38;5;197mEMBEDDINGS_PATH_COCO[39m[38;5;15m:[39m[38;5;15m [39m/home/r09521612/segmentationsg/segmentationsg/data/embeddings/glove_mean_coco
[38;5;15m    [39m[38;5;197mFG_IOU_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mp2
[38;5;15m    [39m-[38;5;15m [39mp3
[38;5;15m    [39m-[38;5;15m [39mp4
[38;5;15m    [39m-[38;5;15m [39mp5
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mLINGUAL_MATRIX_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m    [39m[38;5;197mMASK_NUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m80
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mSGSegmentationROIHeadsMaskTransfer
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m150
[38;5;15m    [39m[38;5;197mNUM_OUTPUT_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m80
[38;5;15m    [39m[38;5;197mOBJECTNESS_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.3
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m0.25
[38;5;15m    [39m[38;5;197mPROPOSAL_APPEND_GT[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mREFINE_SEG_MASKS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m    [39m[38;5;197mSEGMENTATION_STEP_MASK_REFINE[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mROI_KEYPOINT_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mMIN_KEYPOINTS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mKRCNNConvDeconvUpsampleHead
[38;5;15m    [39m[38;5;197mNORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mNUM_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m17
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m  [39m[38;5;197mROI_MASK_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_MASK[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mSceneGraphMaskHeadTransfer
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m  [39m[38;5;197mROI_RELATION_FEATURE_EXTRACTORS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMULTIPLY_LOGITS_WITH_MASKS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mRelationFeatureExtractor
[38;5;15m    [39m[38;5;197mUSE_MASK_COMBINER[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mROI_SCENEGRAPH_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mADD_GTBOX_TO_PROPOSAL_IN_TRAIN[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m64
[38;5;15m    [39m[38;5;197mCONTEXT_DROPOUT_RATE[39m[38;5;15m:[39m[38;5;15m [39m0.2
[38;5;15m    [39m[38;5;197mCONTEXT_HIDDEN_DIM[39m[38;5;15m:[39m[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mCONTEXT_OBJ_LAYER[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mCONTEXT_POOLING_DIM[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mCONTEXT_REL_LAYER[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mEMBED_DIM[39m[38;5;15m:[39m[38;5;15m [39m200
[38;5;15m    [39m[38;5;197mLABEL_SMOOTHING_LOSS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mMASK_ATTENTION_TYPE[39m[38;5;15m:[39m[38;5;15m [39mWeighted
[38;5;15m    [39m[38;5;197mMODE[39m[38;5;15m:[39m[38;5;15m [39mpredcls
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mSceneGraphSegmentationHead
[38;5;15m    [39m[38;5;197mNMS_FILTER_DUPLICATES[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m50
[38;5;15m    [39m[38;5;197mNUM_SAMPLE_PER_GT_REL[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m0.25
[38;5;15m    [39m[38;5;197mPREDICTOR[39m[38;5;15m:[39m[38;5;15m [39mVCTreeSegmentationPredictorC
[38;5;15m    [39m[38;5;197mPREDICT_USE_BIAS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mPREDICT_USE_VISION[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mREL_PROP[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.01858
[38;5;15m    [39m-[38;5;15m [39m0.00057
[38;5;15m    [39m-[38;5;15m [39m0.00051
[38;5;15m    [39m-[38;5;15m [39m0.00109
[38;5;15m    [39m-[38;5;15m [39m0.0015
[38;5;15m    [39m-[38;5;15m [39m0.00489
[38;5;15m    [39m-[38;5;15m [39m0.00432
[38;5;15m    [39m-[38;5;15m [39m0.02913
[38;5;15m    [39m-[38;5;15m [39m0.00245
[38;5;15m    [39m-[38;5;15m [39m0.00121
[38;5;15m    [39m-[38;5;15m [39m0.00404
[38;5;15m    [39m-[38;5;15m [39m0.0011
[38;5;15m    [39m-[38;5;15m [39m0.00132
[38;5;15m    [39m-[38;5;15m [39m0.00172
[38;5;15m    [39m-[38;5;15m [39m5.0e-05
[38;5;15m    [39m-[38;5;15m [39m0.00242
[38;5;15m    [39m-[38;5;15m [39m0.0005
[38;5;15m    [39m-[38;5;15m [39m0.00048
[38;5;15m    [39m-[38;5;15m [39m0.00208
[38;5;15m    [39m-[38;5;15m [39m0.15608
[38;5;15m    [39m-[38;5;15m [39m0.0265
[38;5;15m    [39m-[38;5;15m [39m0.06091
[38;5;15m    [39m-[38;5;15m [39m0.009
[38;5;15m    [39m-[38;5;15m [39m0.00183
[38;5;15m    [39m-[38;5;15m [39m0.00225
[38;5;15m    [39m-[38;5;15m [39m0.0009
[38;5;15m    [39m-[38;5;15m [39m0.00028
[38;5;15m    [39m-[38;5;15m [39m0.00077
[38;5;15m    [39m-[38;5;15m [39m0.04844
[38;5;15m    [39m-[38;5;15m [39m0.08645
[38;5;15m    [39m-[38;5;15m [39m0.31621
[38;5;15m    [39m-[38;5;15m [39m0.00088
[38;5;15m    [39m-[38;5;15m [39m0.00301
[38;5;15m    [39m-[38;5;15m [39m0.00042
[38;5;15m    [39m-[38;5;15m [39m0.00186
[38;5;15m    [39m-[38;5;15m [39m0.001
[38;5;15m    [39m-[38;5;15m [39m0.00027
[38;5;15m    [39m-[38;5;15m [39m0.01012
[38;5;15m    [39m-[38;5;15m [39m0.0001
[38;5;15m    [39m-[38;5;15m [39m0.01286
[38;5;15m    [39m-[38;5;15m [39m0.00647
[38;5;15m    [39m-[38;5;15m [39m0.00084
[38;5;15m    [39m-[38;5;15m [39m0.01077
[38;5;15m    [39m-[38;5;15m [39m0.00132
[38;5;15m    [39m-[38;5;15m [39m0.00069
[38;5;15m    [39m-[38;5;15m [39m0.00376
[38;5;15m    [39m-[38;5;15m [39m0.00214
[38;5;15m    [39m-[38;5;15m [39m0.11424
[38;5;15m    [39m-[38;5;15m [39m0.01205
[38;5;15m    [39m-[38;5;15m [39m0.02958
[38;5;15m    [39m[38;5;197mREQUIRE_BOX_OVERLAP[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mRETURN_SEG_ANNOS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mRETURN_SEG_MASKS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mSEG_BBOX_LOSS_MULTIPLIER[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mSIGMOID_ATTENTION[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mTRANSFORMER[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mDROPOUT_RATE[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m      [39m[38;5;197mINNER_DIM[39m[38;5;15m:[39m[38;5;15m [39m2048
[38;5;15m      [39m[38;5;197mKEY_DIM[39m[38;5;15m:[39m[38;5;15m [39m64
[38;5;15m      [39m[38;5;197mNUM_HEAD[39m[38;5;15m:[39m[38;5;15m [39m8
[38;5;15m      [39m[38;5;197mOBJ_LAYER[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m      [39m[38;5;197mREL_LAYER[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;15m      [39m[38;5;197mVAL_DIM[39m[38;5;15m:[39m[38;5;15m [39m64
[38;5;15m    [39m[38;5;197mUSE_GT_BOX[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mUSE_GT_OBJECT_LABEL[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mUSE_MASK_ATTENTION[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mUSE_ONLY_FG_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mZERO_SHOT_TRIPLETS[39m[38;5;15m:[39m[38;5;15m [39m/home/r09521612/segmentationsg/segmentationsg/evaluation/datasets/vg/zeroshot_triplet.pytorch
[38;5;15m  [39m[38;5;197mRPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id002[39m
[38;5;15m    [39m[38;5;197mBOUNDARY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m[38;5;197mHEAD_NAME[39m[38;5;15m:[39m[38;5;15m [39mStandardRPNHead
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mp2
[38;5;15m    [39m-[38;5;15m [39mp3
[38;5;15m    [39m-[38;5;15m [39mp4
[38;5;15m    [39m-[38;5;15m [39mp5
[38;5;15m    [39m-[38;5;15m [39mp6
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.3
[38;5;15m    [39m-[38;5;15m [39m0.7
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mNMS_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.7
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m2000
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mSCENEGRAPH_ON[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m128
[38;5;15m    [39m[38;5;197mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m255
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mp2
[38;5;15m    [39m-[38;5;15m [39mp3
[38;5;15m    [39m-[38;5;15m [39mp4
[38;5;15m    [39m-[38;5;15m [39mp5
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mSemSegFPNHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mGN
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m54
[38;5;15m  [39m[38;5;197mUSE_MASK_ON_NODE[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m../output-step1-vg/resnet_pretrain_weights.pth
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m../output-step3-vctree-short-vg
[38;5;197mSEED[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAMP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m0.01
[38;5;15m  [39m[38;5;197mBIAS_LR_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m500
[38;5;15m  [39m[38;5;197mCLIP_GRADIENTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLIP_TYPE[39m[38;5;15m:[39m[38;5;15m [39mvalue
[38;5;15m    [39m[38;5;197mCLIP_VALUE[39m[38;5;15m:[39m[38;5;15m [39m5.0
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNORM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m2.0
[38;5;15m  [39m[38;5;197mGAMMA[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m16
[38;5;15m  [39m[38;5;197mLR_SCHEDULER_NAME[39m[38;5;15m:[39m[38;5;15m [39mWarmupMultiStepLR
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m0.9
[38;5;15m  [39m[38;5;197mNESTEROV[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mREFERENCE_WORLD_SIZE[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m25000
[38;5;15m  [39m-[38;5;15m [39m35000
[38;5;15m  [39m[38;5;197mWARMUP_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m  [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39mlinear
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m0.0001
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_BIAS[39m[38;5;15m:[39m[38;5;15m [39mnull
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_NORM[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mFLIP[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mMAX_SIZE[39m[38;5;15m:[39m[38;5;15m [39m4000
[38;5;15m    [39m[38;5;197mMIN_SIZES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m400
[38;5;15m    [39m-[38;5;15m [39m500
[38;5;15m    [39m-[38;5;15m [39m600
[38;5;15m    [39m-[38;5;15m [39m700
[38;5;15m    [39m-[38;5;15m [39m800
[38;5;15m    [39m-[38;5;15m [39m900
[38;5;15m    [39m-[38;5;15m [39m1000
[38;5;15m    [39m-[38;5;15m [39m1100
[38;5;15m    [39m-[38;5;15m [39m1200
[38;5;15m  [39m[38;5;197mDETECTIONS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m40
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m50000
[38;5;15m  [39m[38;5;197mEXPECTED_RESULTS[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mKEYPOINT_OKS_SIGMAS[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mPRECISE_BN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNUM_ITER[39m[38;5;15m:[39m[38;5;15m [39m200
[38;5;15m  [39m[38;5;197mRELATION[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mLATER_NMS_PREDICTION_THRES[39m[38;5;15m:[39m[38;5;15m [39m0.3
[38;5;15m    [39m[38;5;197mMULTIPLE_PREDS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mREQUIRE_OVERLAP[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;197mVERSION[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;197mVIS_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m0

[04/17 16:27:06] detectron2 INFO: Full config saved to ../output-step3-vctree-short-vg/config.yaml
[04/17 16:27:06] d2.utils.env INFO: Using a generated random seed 7248718
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: box_head.fc1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: box_head.fc1.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: box_head.fc2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: box_head.fc2.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: box_predictor.cls_score.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: box_predictor.cls_score.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: box_predictor.bbox_pred.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: box_predictor.bbox_pred.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: box_predictor.transfer_cls_score.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: box_predictor.transfer_cls_score.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: box_predictor.transfer_bbox_pred.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: box_predictor.transfer_bbox_pred.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: mask_head.mask_fcn1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: mask_head.mask_fcn1.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: mask_head.mask_fcn2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: mask_head.mask_fcn2.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: mask_head.mask_fcn3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: mask_head.mask_fcn3.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: mask_head.mask_fcn4.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: mask_head.mask_fcn4.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: mask_head.deconv.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: mask_head.deconv.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: mask_head.predictor.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: mask_head.predictor.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.fpn_lateral2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.fpn_lateral2.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.fpn_output2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.fpn_output2.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.fpn_lateral3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.fpn_lateral3.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.fpn_output3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.fpn_output3.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.fpn_lateral4.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.fpn_lateral4.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.fpn_output4.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.fpn_output4.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.fpn_lateral5.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.fpn_lateral5.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.fpn_output5.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.fpn_output5.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.stem.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res2.0.shortcut.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res2.0.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res2.0.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res2.0.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res2.1.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res2.1.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res2.1.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res2.2.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res2.2.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res2.2.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.0.shortcut.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.0.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.0.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.0.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.1.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.1.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.1.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.2.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.2.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.2.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.3.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.3.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res3.3.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.0.shortcut.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.0.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.0.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.0.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.1.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.1.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.1.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.2.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.2.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.2.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.3.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.3.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.3.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.4.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.4.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.4.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.5.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.5.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.5.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.6.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.6.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.6.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.7.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.7.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.7.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.8.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.8.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.8.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.9.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.9.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.9.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.10.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.10.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.10.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.11.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.11.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.11.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.12.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.12.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.12.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.13.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.13.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.13.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.14.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.14.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.14.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.15.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.15.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.15.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.16.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.16.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.16.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.17.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.17.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.17.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.18.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.18.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.18.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.19.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.19.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.19.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.20.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.20.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.20.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.21.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.21.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.21.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.22.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.22.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res4.22.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res5.0.shortcut.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res5.0.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res5.0.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res5.0.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res5.1.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res5.1.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res5.1.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res5.2.conv1.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res5.2.conv2.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: backbone.bottom_up.res5.2.conv3.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: proposal_generator.rpn_head.conv.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: proposal_generator.rpn_head.conv.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: proposal_generator.rpn_head.objectness_logits.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: proposal_generator.rpn_head.objectness_logits.bias
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: proposal_generator.rpn_head.anchor_deltas.weight
[04/17 16:27:27] detectron2 WARNING: Freezed Layer: proposal_generator.rpn_head.anchor_deltas.bias
[04/17 16:27:27] d2.engine.defaults INFO: Model:
SceneGraphSegmentationRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv2): Conv2d(
            2048, 2048, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv3): Conv2d(
            2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv2): Conv2d(
            2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv3): Conv2d(
            2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv2): Conv2d(
            2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv3): Conv2d(
            2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): SGSegmentationROIHeadsMaskTransfer(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayersSGMaskTransfer(
      (cls_score): Linear(in_features=1024, out_features=81, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=320, bias=True)
      (transfer_cls_score): Linear(in_features=1024, out_features=151, bias=True)
      (transfer_bbox_pred): Linear(in_features=1024, out_features=600, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): SceneGraphMaskHeadTransfer(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 80, kernel_size=(1, 1), stride=(1, 1))
    )
    (scenegraph_head): SceneGraphSegmentationHead(
      (box_feature_extractor): BoxFeatureSegmentationExtractor(
        (mask_combiner): Conv2d(406, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (mask_combiner_segmentation): Conv2d(336, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (pooler): ROIPooler(
          (level_poolers): ModuleList(
            (0): ROIAlign(output_size=(28, 28), spatial_scale=0.25, sampling_ratio=0, aligned=True)
            (1): ROIAlign(output_size=(28, 28), spatial_scale=0.125, sampling_ratio=0, aligned=True)
            (2): ROIAlign(output_size=(28, 28), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
            (3): ROIAlign(output_size=(28, 28), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
          )
        )
        (fc6): Linear(in_features=200704, out_features=1024, bias=True)
        (fc7): Linear(in_features=1024, out_features=1024, bias=True)
      )
      (union_feature_extractor): RelationFeatureExtractor(
        (feature_extractor): BoxFeatureExtractor(
          (mask_combiner): Conv2d(406, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (pooler): ROIPooler(
            (level_poolers): ModuleList(
              (0): ROIAlign(output_size=(28, 28), spatial_scale=0.25, sampling_ratio=0, aligned=True)
              (1): ROIAlign(output_size=(28, 28), spatial_scale=0.125, sampling_ratio=0, aligned=True)
              (2): ROIAlign(output_size=(28, 28), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
              (3): ROIAlign(output_size=(28, 28), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
            )
          )
          (fc6): Linear(in_features=200704, out_features=1024, bias=True)
          (fc7): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (variance_net): Linear(in_features=302, out_features=6, bias=True)
      )
      (predictor): VCTreeSegmentationPredictorC(
        (post_emb): Linear(in_features=512, out_features=1024, bias=True)
        (post_cat): Linear(in_features=1024, out_features=4096, bias=True)
        (ctx_compress): Linear(in_features=4096, out_features=51, bias=True)
        (up_dim): Linear(in_features=1024, out_features=4096, bias=True)
        (freq_bias): FrequencyBias(
          (obj_baseline): Embedding(22801, 51)
        )
        (context_layer): VCTreeLSTMSegmentationContextC(
          (obj_embed1): Embedding(151, 200)
          (obj_embed2): Embedding(151, 200)
          (pos_embed): Sequential(
            (0): Linear(in_features=9, out_features=32, bias=True)
            (1): BatchNorm1d(32, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
            (2): Linear(in_features=32, out_features=128, bias=True)
            (3): ReLU(inplace=True)
          )
          (overlap_embed): Sequential(
            (0): Linear(in_features=6, out_features=128, bias=True)
            (1): BatchNorm1d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (box_embed): Sequential(
            (0): Linear(in_features=9, out_features=128, bias=True)
            (1): BatchNorm1d(128, eps=1e-05, momentum=0.001, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
          (bi_freq_prior): Linear(in_features=22801, out_features=1, bias=False)
          (obj_reduce): Linear(in_features=1024, out_features=128, bias=True)
          (emb_reduce): Linear(in_features=200, out_features=128, bias=True)
          (score_pre): Linear(in_features=512, out_features=512, bias=True)
          (score_sub): Linear(in_features=512, out_features=512, bias=True)
          (score_obj): Linear(in_features=512, out_features=512, bias=True)
          (vision_prior): Linear(in_features=1537, out_features=1, bias=True)
          (obj_ctx_rnn): MultiLayer_BTreeLSTM(
            (multi_layer_lstm): ModuleList(
              (0): BidirectionalTreeLSTM(
                (treeLSTM_foreward): OneDirectionalTreeLSTM(
                  (treeLSTM): BiTreeLSTM_Foreward(
                    (px): Linear(in_features=1352, out_features=256, bias=True)
                    (ioffux): Linear(in_features=1352, out_features=1536, bias=True)
                    (ioffuh_left): Linear(in_features=256, out_features=1536, bias=True)
                    (ioffuh_right): Linear(in_features=256, out_features=1536, bias=True)
                  )
                )
                (treeLSTM_backward): OneDirectionalTreeLSTM(
                  (treeLSTM): BiTreeLSTM_Backward(
                    (px): Linear(in_features=1352, out_features=256, bias=True)
                    (iofux): Linear(in_features=1352, out_features=1280, bias=True)
                    (iofuh): Linear(in_features=256, out_features=1280, bias=True)
                  )
                )
              )
            )
          )
          (edge_ctx_rnn): MultiLayer_BTreeLSTM(
            (multi_layer_lstm): ModuleList(
              (0): BidirectionalTreeLSTM(
                (treeLSTM_foreward): OneDirectionalTreeLSTM(
                  (treeLSTM): BiTreeLSTM_Foreward(
                    (px): Linear(in_features=1736, out_features=256, bias=True)
                    (ioffux): Linear(in_features=1736, out_features=1536, bias=True)
                    (ioffuh_left): Linear(in_features=256, out_features=1536, bias=True)
                    (ioffuh_right): Linear(in_features=256, out_features=1536, bias=True)
                  )
                )
                (treeLSTM_backward): OneDirectionalTreeLSTM(
                  (treeLSTM): BiTreeLSTM_Backward(
                    (px): Linear(in_features=1736, out_features=256, bias=True)
                    (iofux): Linear(in_features=1736, out_features=1280, bias=True)
                    (iofuh): Linear(in_features=256, out_features=1280, bias=True)
                  )
                )
              )
            )
          )
          (decoder_rnn): DecoderTreeLSTM(
            (obj_embed): Embedding(152, 200)
            (out): Linear(in_features=512, out_features=151, bias=True)
            (decoderLSTM): BiTreeLSTM_Backward(
              (embed_layer): Embedding(152, 200)
              (embed_out_layer): Linear(in_features=512, out_features=151, bias=True)
              (px): Linear(in_features=2064, out_features=512, bias=True)
              (iofux): Linear(in_features=2064, out_features=2560, bias=True)
              (iofuh): Linear(in_features=512, out_features=2560, bias=True)
            )
          )
          (sg_segmentation_features): Linear(in_features=1864, out_features=256, bias=True)
          (segmentation_head): SGSceneGraphMaskHead(
            (mask_fcn1): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
              (activation): ReLU()
            )
            (mask_fcn2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
              (activation): ReLU()
            )
            (mask_fcn3): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
              (activation): ReLU()
            )
            (mask_fcn4): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
              (activation): ReLU()
            )
            (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
            (deconv_relu): ReLU()
            (predictor): Conv2d(256, 80, kernel_size=(1, 1), stride=(1, 1))
          )
          (obj_embed_segmentation): Embedding(81, 200)
          (segmentation_reducer): Conv2d(
            512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1)
            (activation): ReLU()
          )
        )
      )
      (post_processor): PostProcessor()
      (pooler): ROIPooler(
        (level_poolers): ModuleList(
          (0): ROIAlign(output_size=(28, 28), spatial_scale=0.25, sampling_ratio=0, aligned=True)
          (1): ROIAlign(output_size=(28, 28), spatial_scale=0.125, sampling_ratio=0, aligned=True)
          (2): ROIAlign(output_size=(28, 28), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
          (3): ROIAlign(output_size=(28, 28), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
        )
      )
      (segmentation_criterion_loss): CrossEntropyLoss()
    )
    (embeddings): Embedding(150, 300)
    (embeddings_coco): Embedding(80, 300)
  )
)
[04/17 16:27:27] fvcore.common.checkpoint INFO: [Checkpointer] Loading from ../output-step3-vctree-short-vg/model_0001999.pth ...
[04/17 16:28:00] d2.data.datasets.coco INFO: Loading ../datasets-real/coco/annotations/instances_val2017.json takes 2.28 seconds.
[04/17 16:28:00] d2.data.datasets.coco INFO: Loaded 5000 images in COCO format from ../datasets-real/coco/annotations/instances_val2017.json
[04/17 16:28:01] d2.data.build INFO: Distribution of instances among all 80 categories:
[36m|   category    | #instances   |   category   | #instances   |   category    | #instances   |
|:-------------:|:-------------|:------------:|:-------------|:-------------:|:-------------|
|    person     | 10777        |   bicycle    | 314          |      car      | 1918         |
|  motorcycle   | 367          |   airplane   | 143          |      bus      | 283          |
|     train     | 190          |    truck     | 414          |     boat      | 424          |
| traffic light | 634          | fire hydrant | 101          |   stop sign   | 75           |
| parking meter | 60           |    bench     | 411          |     bird      | 427          |
|      cat      | 202          |     dog      | 218          |     horse     | 272          |
|     sheep     | 354          |     cow      | 372          |   elephant    | 252          |
|     bear      | 71           |    zebra     | 266          |    giraffe    | 232          |
|   backpack    | 371          |   umbrella   | 407          |    handbag    | 540          |
|      tie      | 252          |   suitcase   | 299          |    frisbee    | 115          |
|     skis      | 241          |  snowboard   | 69           |  sports ball  | 260          |
|     kite      | 327          | baseball bat | 145          | baseball gl.. | 148          |
|  skateboard   | 179          |  surfboard   | 267          | tennis racket | 225          |
|    bottle     | 1013         |  wine glass  | 341          |      cup      | 895          |
|     fork      | 215          |    knife     | 325          |     spoon     | 253          |
|     bowl      | 623          |    banana    | 370          |     apple     | 236          |
|   sandwich    | 177          |    orange    | 285          |   broccoli    | 312          |
|    carrot     | 365          |   hot dog    | 125          |     pizza     | 284          |
|     donut     | 328          |     cake     | 310          |     chair     | 1771         |
|     couch     | 261          | potted plant | 342          |      bed      | 163          |
| dining table  | 695          |    toilet    | 179          |      tv       | 288          |
|    laptop     | 231          |    mouse     | 106          |    remote     | 283          |
|   keyboard    | 153          |  cell phone  | 262          |   microwave   | 55           |
|     oven      | 143          |   toaster    | 9            |     sink      | 225          |
| refrigerator  | 126          |     book     | 1129         |     clock     | 267          |
|     vase      | 274          |   scissors   | 36           |  teddy bear   | 190          |
|  hair drier   | 11           |  toothbrush  | 57           |               |              |
|     total     | 36335        |              |              |               |              |[0m
[04/17 16:28:01] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[04/17 16:28:01] d2.data.common INFO: Serializing 5000 elements to byte tensors and concatenating them all ...
[04/17 16:28:01] d2.data.common INFO: Serialized dataset takes 19.14 MiB
[04/17 16:28:01] d2.evaluation.coco_evaluation WARNING: COCO Evaluator instantiated using config, this is deprecated behavior. Please pass in explicit arguments instead.
